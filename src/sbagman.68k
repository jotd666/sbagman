* super bagman (super bagnard)
*
* Z80
* disassembled by JOTD in 2023
*
* Original code (C) 1984 Valadon Automation, singlehandedly coded
* by Jacques Brisse

* xy <-> logical address conversions (Python proto code)
*def xy2addr(x,y,current_screen):
*     rval = 0x4062 + 0x400 * current_screen + y/8 + ((0xE0-x)/8)*0x20
*     return rval
*def addr2xy(addr):
*     b = addr - 0x4000
*     current_screen = 0
*     while b < 0x400:
*	b-=0x400
*	current_screen+=1
*     b -= 0x62
*     y = (b % 0x20) * 8
*     x = 0xE0 - b / 4
*     return [x,y,current_screen]


    .global sbagman_irq
    .global sbagman_reset

	.include	"sbagman.inc"
	.ifdef	__amiga__
	.include "sbagman_ram.68k"
	.align	2
	.endif


	.macro	WPSET	addr
	clr.b	\addr
	.endm
	
	.macro	LEA_ROM			offset,dest
	.ifle		\offset-0x6000
	lea			game_mem+\offset,\dest
	.else
	lea			game_mem+\offset-0xC000+0x6000,\dest
	.endif
	.endm
	
	.macro	READ_COLORRAM	offset
	move.w	d6,-(sp)
	add.w	#\offset,d6
	jbsr	osd_r_colorram
	move.w	(sp)+,d6
	.endm
	
	.macro	READ_VIDEORAM	offset
	move.w	d6,-(sp)
	add.w	#\offset,d6
	jbsr	osd_r_videoram
	move.w	(sp)+,d6
	.endm
	
	.macro	WRITE_COLORRAM	offset
	move.w	d6,-(sp)
	add.w	#\offset,d6
	jbsr	osd_w_colorram
	move.w	(sp)+,d6
	.endm
	
	.macro	WRITE_VIDEORAM	offset
	move.w	d6,-(sp)
	add.w	#\offset,d6
	jbsr	osd_w_videoram
	move.w	(sp)+,d6
	.endm
	
	.macro	LOAD_AX_BE_WORD_DY	ax,dy
	move.b	(\ax),\dy               
	lsl.w	#8,\dy
	move.b	(1,\ax),\dy
	.endm
	
	.macro	STORE_WORD	dx,mem
	move.b	\dx,\mem+1
	rol.w	#8,\dx
	move.b	\dx,\mem
	rol.w	#8,\dx
	.endm
	
	.macro	STORE_DX_BE_WORD_AY	dx,ay
	move.w	\dx,-(sp)
	lsr.w	#8,\dx
	move.b	\dx,(\ay)
	move.w	(sp)+,\dx
	move.b	\dx,(0x01,\ay)
	.endm	
	
	.macro CLEAR_XC_FLAG
	moveq	#0,d7
	roxl.b	#1,d7
	.endm
	.macro SET_XC_FLAG
	st	d7
	roxl.b	#1,d7
	.endm

zero_sprites:
	movem.l	d0-a6,-(a7)
	lea	barrow_sprite_shadow_ram_65A0,a0                	| [$00a1: ld   hl,barrow_sprite_shadow_ram_65A0]
	moveq	#7,d0
1:
	clr.l	(a0)+
	dbf		d0,1b
	
	lea	barrow_sprite_shadow_ram_65A0,a0
	jbsr	osd_update_sprites						| [$00a4: ld   bc,$0020] 32
	movem.l	(a7)+,d0-a6
	rts
	

* walk/climb/pick sounds are played continuously
* if a sound is played too close to the same one,
* don't play it
start_a_sound:
	cmp.w	#TYPING_SND,d0
	beq.b	1f
	cmp.w	#CREDIT_SND,d0
	bne.b	0f
1:
	* credit/typing sound can be interrupted all right and played anytime
	jbra		osd_sound_start
0:
	tst.b	check_scenery_disabled_61ED
	beq.b	0f
	rts
0:
	
	movem.l	a0/d1,-(a7)
	lea		last_played_sound_timer_table,a0
	
	add.w	d0,d0
	move.w	(a0,d0.w),d1
	jeq		0f			| zero: not played ever: play it
	sub.w	sound_timer,d1
	jeq		1f			| played just now: ignore
	jcc		0f			| wrap around
	neg.w	d1
	cmp.w	#42,d1		| empiric
	jcc		0f
1:
	* too close: don't play
	movem.l	(a7)+,a0/d1
	rts
	
0:
	move.w	sound_timer,(a0,d0.w)		| timestamp last sound play
	lsr.w	#1,d0
	jbsr		osd_sound_start
	movem.l	(a7)+,a0/d1
	rts

tune_table:
	dc.w	TUNE3_SND
	dc.w	TUNE1_SND
	dc.w	TUNE2_SND


play_tune:
	move.w	d0,-(a7)
	move.b	time_61E8,d0                    	| [$3ba6: ld   a,(time_61E8)]

	cmp.b	#0x05,d0                         	| [$3bab: cp   $05]
	movem.w	(a7)+,d0
	bcc.b	0f                               	| [$3bad: ret  nc] [...]
	* don't start music if timer is too low
	rts  
0:	
	jra		osd_sound_start
	
is_invincible:
	*tst.b	gameplay_allowed_6054	| not during demo game
	*bne.b	0f
	tst.b	invincible_flag
	rts
0:
	cmp.b	d0,d0
	rts

* < D6: ROM offset
* A0 is preserved as else it can conflict with program
read_rom:
	move.w	d6,-(sp)
	swap	d6
	clr.w	d6
	swap	d6
	cmp.w	#0xC000,d6
	bcc.b	0f
	.ifndef		RELEASE
	cmp.w	#0x6000,d6
	bcc.b	rr_error
	.endif
	bra.b	1f
0:
	* offset to make up for gap as area 0x6000-0xC000 isn't dumped/mapped
	sub.w	#0xC000-0x6000,d6
1:

	move.l	a0,-(sp)
	lea		game_mem,a0
	move.b	(a0,d6.l),d0
	move.l	(sp)+,a0
	move.w	(sp)+,d6
	rts
	
rr_error:
	jbsr	osd_break
	illegal
	
	
* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts

* < A0: source (HL)
* < D1: length to search
* > D0.B value searched for (A)
* > Z flag if found
cpir:
    subq.w    #1,d1
0:
    cmp.b    (a0)+,d0
    beq.b    1f
    dbf        d1,0b
    clr.w    d1
    * not found: unset Z
    cmp.b   #1,d1
1:
    rts

* < all registers d1-d6/a0/a1/a4 (BC,DE,HL)
* > all registers swapped
*: note regscopy must be defined somewhere in RAM
*: with a size of 36*2
exx:
	move.w	d0,-(a7)
	jbsr	osd_is_vblank_interrupt_enabled
	tst		d0
	movem.w	(a7)+,d0
	beq.b	0f		| interrupts disabled => no need to do anything
	
	* if interrupts are enabled, disable them to copy memory
	* then enable them again
	jbsr	osd_disable_vblank_interrupt
	bsr.b	0f
	jbsr	osd_enable_vblank_interrupt
	rts
0:

    lea     regscopy+36,a6
    * save current regs in region 1
    movem.l d1-d6/a0/a1/a4,-(a6)
    * restore old regs from region 2
    lea     regscopy+36,a6
    movem.l (a6),d1-d6/a0/a1/a4
    * now copy region 1 to region 2
    movem.l d1-d6/a0/a1/a4,-(a7)
    lea     regscopy,a6
    movem.l (a6)+,d1-d6/a0/a1/a4
    movem.l d1-d6/a0/a1/a4,(a6)
    movem.l (a7)+,d1-d6/a0/a1/a4
    rts

* < A0: source (HL)
* < D1: length to search
* > D0.B value searched for (A)
* > Z flag if found
cpdr:
    subq.w    #1,d1
0:
    subq.w  #1,a0
    cmp.b    (1,a0),d0
    beq.b    1f
    dbf        d1,0b
    clr.w    d1
    * not found: unset Z
    cmp.b   #1,d1
1:
    rts

*---------------

assert_failed_blitz:
	jbra		osd_break
	
	
	
sbagman_reset:
	* default: 1 update/irq call
	* we need 60 updates / second so on amiga PAL
	* we need to set this variable to 2 once out of 5 calls
	move.b	#1,vb_ticks_count
	
	
	jra	game_startup_eca8                             	| [$0000: jp   $1200]

sbagman_irq:
	move.b	vb_ticks_count,d0
0:
	move.w	d0,-(a7)
	bsr.b	game_tick_0038
	move.w	(a7)+,d0
	subq.b	#1,d0
	bne.b	0b
	rts
	
game_tick_0038:
	clr.b	vblank_ack
	addq.w	#1,sound_timer
	bne.b	0f
	* don't stay at 0 ever
	addq.w	#1,sound_timer
0:



* interrupt handler

											| [$0038: push af]
	movem.w	d0-d7,-(sp)                    	| [$0039: push bc]
												| [$003a: push de]
	movem.l	a0-a4,-(sp)                        	| [$003a: push de]
												| [$003b: push hl]
												| [$003c: push ix]
												| [$003e: push iy]
	jbsr	exx                               	| [$0040: exx]
	movem.w	d1/d2,-(sp)                    	| [$0041: push bc]
	movem.w	d3/d4,-(sp)                    	| [$0042: push de]
	move.l	a1,-(sp)                        	| [$0042: push de]
	move.l	a0,-(sp)                        	| [$0043: push hl]
	exg	d0,d7                              	| [$0044: ex   af,af']
	move.w	d0,-(sp)                        	| [$0045: push af]
	
	jbsr	l_d32e                            	| [$0047: call $D32E]
										| [$0049: xor  a]
        jbsr	osd_disable_vblank_interrupt  	| [$004a: ld   (interrupt_control_A000),a]
	jbsr	l_ca91                            	| [$004e: call $CA91]
	jbsr	l_1565                            	| [$0051: call $1565]
	move.b	unknown_628C,d0                 	| [$0054: ld   a,(unknown_628C)]
	cmp.b	#0x01,d0                         	| [$0057: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	read_player_controls_1689                            	| [$0059: call z,$1689]
0:
* TODO play sound?
*	move.b	ay_sound_start_6142,d0          	| [$005c: ld   a,(ay_sound_start_6142)]
*	addq.b	#1,d0                           	| [$005f: inc  a]
*	move.b	d0,ay_sound_start_6142          	| [$0060: ld   (ay_sound_start_6142),a]
*	move.b	unknown_6332,d0                 	| [$0063: ld   a,(unknown_6332)]
*	cmp.b	#0x01,d0                         	| [$0066: cp   $01]
*	bne.b	0f                               	| [...]
*	jbsr	l_119e                            	| [$0068: call z,$119E]
*0:
	move.b	unknown_6332,d0                 	| [$006b: ld   a,(unknown_6332)]
	cmp.b	#0x01,d0                         	| [$006e: cp   $01]
	jeq	l_0512                             	| [$0070: jp   z,$0512]
	move.b	is_intermission_6274,d0         	| [$0073: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$0076: cp   $01]
	jeq	l_007f                             	| [$0078: jr   z,$007F]
	move.b	check_scenery_disabled_61ED,d0  	| [$007a: ld   a,(check_scenery_disabled_61ED)]
l_007f:
	*bne.b	0f
	* AY-8192 handling
	*jbsr	l_0f7f                            	| [$0067: call z,$0F7F]
*0:
	move.b	unknown_626F,d0                 	| [$0082: ld   a,(unknown_626F)]
	cmp.b	#0x01,d0                         	| [$0085: cp   $01]
	jeq	l_0515                             	| [$0087: jp   z,$0515]
	move.b	must_play_music_6210,d0         	| [$008a: ld   a,(must_play_music_6210)]
	cmp.b	#0x01,d0                         	| [$008d: cp   $01]
	jne	l_00b3                             	| [$008f: jr   nz,$00B3]
	move.b	gameplay_allowed_6054,d0        	| [$0091: ld   a,(gameplay_allowed_6054)]
	                         	| [$0094: cp   $00]
	jeq	l_00b3                             	| [$0096: jr   z,$00B3]
	move.b	player_controls_blocked_61F2,d0 	| [$0098: ld   a,(player_controls_blocked_61F2)]
	cmp.b	#0x01,d0                         	| [$009b: cp   $01]
	jeq	l_00b3                             	| [$009d: jr   z,$00B3]
	move.b	check_scenery_disabled_61ED,d0  	| [$009f: ld   a,(check_scenery_disabled_61ED)]
	cmp.b	#0x01,d0                         	| [$00a2: cp   $01]
	jeq	l_00b3                             	| [$00a4: jr   z,$00B3]
	move.b	player_x_6582,d0                	| [$00a6: ld   a,(player_x_6582)]
	cmp.b	#0xE9,d0                         	| [$00a9: cp   $E9]
	jcc	l_0515                             	| [$00ab: jp   nc,$0515]
	cmp.b	#0x0F,d0                         	| [$00ae: cp   $0F]
	jcs	l_0515                             	| [$00b0: jp   c,$0515]
l_00b3:
                       	| [$00b3: ld   a,($B800)]
 
	lea	barrow_sprite_shadow_ram_65A0,a0	| [$00b6: ld   hl,barrow_sprite_shadow_ram_65A0]
	jbsr	osd_update_sprites                      	| [$00b9: ld   de,$9800]
	                        	| [$00bc: ld   bc,$0020] 32
	                         	| [$00bc: ld   bc,$0020] 32
	                             	| [$00bf: ldir]

	* count coin shit
	*jbsr	l_cf09                            	| [$00c1: call $CF09]
	move.b	unknown_62C1,d0                 	| [$00c4: ld   a,(unknown_62C1)]
	                         	| [$00c7: cp   $00]
	jeq	l_00cf                             	| [$00c9: jr   z,$00CF]
	subq.b	#1,d0                           	| [$00cb: dec  a]
	move.b	d0,unknown_62C1                 	| [$00cc: ld   (unknown_62C1),a]
l_00cf:
	jbsr	decrease_timer_cfa7                            	| [$00cf: call $CFA7]
	move.b	unknown_6351,d0                 	| [$00d2: ld   a,(unknown_6351)]
	cmp.b	#0x01,d0                         	| [$00d5: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	backup_bomb_tiles_background_dbe7                            	| [$00d7: call z,$DBE7]
0:
	addq.b	#1,unknown_6143                 	| [$00da: ld   a,(unknown_6143)]
	                           	| [$00dd: inc  a]
	                 	| [$00de: ld   (unknown_6143),a]
	* speed management disabled            	| [$00e1: call speech_management_1192]
	addq.b	#1,flash_counter_626D          	| [$00e4: ld   a,(flash_counter_626D)]
	                           	| [$00e7: inc  a]
	           	| [$00e8: ld   (flash_counter_626D),a]
	lea	guard_1_shadow_sprite_65B8,a3	| [$00eb: ld   iy,guard_1_shadow_sprite_65B8]
	move.b	player_screen_600D,d0           	| [$00ef: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$00f2: ld   b,a]
	move.b	guard_1_screen_6099,d0          	| [$00f3: ld   a,(guard_1_screen_6099)]
	cmp.b	d1,d0                            	| [$00f6: cp   b]
	jeq	l_00fe                             	| [$00f7: jr   z,$00FE]
 * not the same screen between player and guard 1
	jbsr	set_previous_guard_y_255_118C     	| [$00f9: call set_previous_guard_y_255_118C]
	jra	l_0109                             	| [$00fc: jr   $0109]
l_00fe:
	lea	guard_1_struct_6594,a2         	| [$00fe: ld   ix,guard_1_struct_6594]
	lea	guard_1_shadow_sprite_65B8,a3	| [$0102: ld   iy,guard_1_shadow_sprite_65B8]
	jbsr	update_sprite_data_d6d7                            	| [$0106: call $D6D7]
l_0109:
	lea	guard_2_shadow_sprite_65BC,a3	| [$0109: ld   iy,guard_2_shadow_sprite_65BC]
	move.b	player_screen_600D,d0           	| [$010d: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$0110: ld   b,a]
	move.b	guard_2_screen_609A,d0          	| [$0111: ld   a,(guard_2_screen_609A)]
	cmp.b	d1,d0                            	| [$0114: cp   b]
	jeq	l_011c                             	| [$0115: jr   z,$011C]
	jbsr	set_previous_guard_y_255_118C     	| [$0117: call set_previous_guard_y_255_118C]
	jra	l_0127                             	| [$011a: jr   $0127]
l_011c:
	lea	guard_2_struct_6598,a2         	| [$011c: ld   ix,guard_2_struct_6598]
	lea	guard_2_shadow_sprite_65BC,a3	| [$0120: ld   iy,guard_2_shadow_sprite_65BC]
	jbsr	update_sprite_data_d6d7                            	| [$0124: call $D6D7]
l_0127:
	move.b	jail_buddy_free_6343,d0                 	| [$0127: ld   a,(jail_buddy_free_6343)]
	cmp.b	#0x01,d0                         	| [$012a: cp   $01]
	jeq	l_0139                             	| [$012c: jr   z,$0139]
	move.b	game_locked_6053,d0             	| [$012e: ld   a,(game_locked_6053)]
	cmp.b	#0x01,d0                         	| [$0131: cp   $01]
	jeq	l_04ea                             	| [$0133: jp   z,$04EA]
	jbsr	l_0580                            	| [$0136: call $0580]
l_0139:
	move.b	game_locked_6151,d0             	| [$0139: ld   a,(game_locked_6151)]
	cmp.b	#0x01,d0                         	| [$013c: cp   $01]
	jeq	l_04ea                             	| [$013e: jp   z,$04EA]
	jbsr	l_1731                            	| [$0141: call $1731]
                       	| [$0144: ld   a,($B800)]

	move.b	unknown_62AC,d0                 	| [$0147: ld   a,(unknown_62AC)]
	addq.b	#1,d0                           	| [$014a: inc  a]
	move.b	d0,unknown_62AC                 	| [$014b: ld   (unknown_62AC),a]
	jbsr	l_feae                            	| [$014e: call $FEAE]
	jbsr	l_e9d3                            	| [$0151: call $E9D3]
	jbsr	handle_player_gun_e76f                            	| [$0154: call $E76F]
	jbsr	l_e616                            	| [$0157: call $E616]
	jbsr	l_0538                            	| [$015a: call $0538]
	jbsr	l_c637                            	| [$015d: call $C637]
	jbsr	l_ceb3                            	| [$0160: call $CEB3]
	jbsr	l_d3c4                            	| [$0163: call $D3C4]
                       	| [$0166: ld   a,($B800)]

	move.b	unknown_6271,d0                 	| [$0169: ld   a,(unknown_6271)]
	move.b	d0,unknown_6272                 	| [$016c: ld   (unknown_6272),a]
	* probably protection, check copyright just in case someones tampers
	* with the "VALADON" bit
	move.b	#0x41,d0                        	| [$016f: ld   a,($570C)]
 	move.b	d0,unknown_6271                 	| [$0172: ld   (unknown_6271),a]
	lea	unknown_6156,a3                	| [$0175: ld   iy,unknown_6156]
	lea	guard_1_struct_6594,a2         	| [$0179: ld   ix,guard_1_struct_6594]
	lea	guard_1_not_moving_flag_6148,a1                	| [$017d: ld   de,guard_1_not_moving_flag_6148]
	jbsr	l_054c                            	| [$0180: call $054C]
	lea	unknown_6157,a3                	| [$0183: ld   iy,unknown_6157]
	lea	guard_2_struct_6598,a2         	| [$0187: ld   ix,guard_2_struct_6598]
	lea	guard_2_not_moving_flag_6149,a1                	| [$018b: ld   de,guard_2_not_moving_flag_6149]
	jbsr	l_054c                            	| [$018e: call $054C]
	move.w	guard_1_logical_address_6038,d6	| [$0191: ld   hl,(guard_1_logical_address_6038)]
	lea	unknown_61EB,a2                	| [$0194: ld   ix,unknown_61EB]
	lea	unknown_603A,a3                	| [$0198: ld   iy,unknown_603A]
	move.b	(A2),d0                    	| [$019c: ld   a,(ix+$00)]
	and.b	(0x01,a2),d0                     	| [$019f: and  (ix+$01)]
	exg	d0,d7                              	| [$01a2: ex   af,af']
	lea	guard_1_y_6597,a1              	| [$01a3: ld   de,guard_1_y_6597]
	move.b	guard_1_screen_6099,d0          	| [$01a6: ld   a,(guard_1_screen_6099)]
	move.b	d0,d1                           	| [$01a9: ld   b,a]
	move.b	unknown_61EB,d0                 	| [$01aa: ld   a,(unknown_61EB)]
	                         	| [$01ad: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	l_cf77                            	| [$01af: call nz,$CF77]
0:
	move.w	guard_2_logical_address_6078,d6	| [$01b2: ld   hl,(guard_2_logical_address_6078)]
	lea	unknown_61EC,a2                	| [$01b5: ld   ix,unknown_61EC]
	lea	unknown_607A,a3                	| [$01b9: ld   iy,unknown_607A]
	lea	guard_2_y_659B,a1              	| [$01bd: ld   de,guard_2_y_659B]
	clr.b	d0                               	| [$01c0: ld   a,$00]
	exg	d0,d7                              	| [$01c2: ex   af,af']
	move.b	guard_2_screen_609A,d0          	| [$01c3: ld   a,(guard_2_screen_609A)]
	move.b	d0,d1                           	| [$01c6: ld   b,a]
	move.b	unknown_61EC,d0                 	| [$01c7: ld   a,(unknown_61EC)]
	                         	| [$01ca: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	l_cf77                            	| [$01cc: call nz,$CF77]
0:
	move.b	check_scenery_disabled_61ED,d0  	| [$01cf: ld   a,(check_scenery_disabled_61ED)]
	                         	| [$01d2: cp   $00]
	bne.b	0f                               	| [...]
	jbsr	l_f199                            	| [$01d4: call z,$F199]
0:
	jbsr	handle_player_object_pickup_115E  	| [$01d7: call handle_player_object_pickup_115E]
	jbsr	l_08e8                            	| [$01da: call $08E8]
	move.b	unknown_602C,d0                 	| [$01dd: ld   a,(unknown_602C)]
	cmp.b	#0x01,d0                         	| [$01e0: cp   $01]
	jeq	l_01ea                             	| [$01e2: jr   z,$01EA]
	jbsr	player_grip_handle_test_0884                            	| [$01e4: call $0884]
                       	| [$01e7: ld   a,($B800)]
l_01ea:
	jbsr	l_08c2                            	| [$01ea: call $08C2]
	clr.b	d0                               	| [$01ed: xor  a]
	move.b	d0,unknown_602C                 	| [$01ee: ld   (unknown_602C),a]
                       	| [$01f1: ld   a,($B800)]
	jbsr	wagon_player_collision_F83E       	| [$01f4: call wagon_player_collision_F83E]
	jbsr	handle_player_walk_0792                            	| [$01f7: call $0792]
	jbsr	l_cbc6                            	| [$01fa: call $CBC6]
	jbsr	l_07d5                            	| [$01fd: call $07D5]
	jbsr	compute_wagon_start_values_0982       	| [$0200: call $0982]
	jbsr	l_0910                            	| [$0203: call $0910]
                       	| [$0206: ld   a,($B800)]
	jbsr	l_d59f                            	| [$0209: call $D59F]
	jbsr	l_d5d6                            	| [$020c: call $D5D6]
	move.b	check_scenery_disabled_61ED,d0  	| [$020f: ld   a,(check_scenery_disabled_61ED)]
	                         	| [$0212: cp   $00]
	bne.b	0f                               	| [...]
	jbsr	move_wagon_09A6                            	| [$0214: call z,$09A6]
0:
                       	| [$0217: ld   a,($B800)]
	jbsr	handle_pick_hold_timer_DA8A                            	| [$021a: call $DA8A]
	move.b	player_input_6026,d0            	| [$021d: ld   a,(player_input_6026)]
	and.b	#0x60,d0                         	| [$0220: and  $60]
	                         	| [$0222: cp   $00]
	jeq	l_023d                             	| [$0224: jr   z,$023D]
	move.b	player_y_6583,d0                	| [$0226: ld   a,(player_y_6583)]
	move.w	d0,-(sp)                        	| [$0229: push af]
	subq.b	#1,d0                           	| [$022a: dec  a]
	move.b	d0,player_y_6583                	| [$022b: ld   (player_y_6583),a]
	jbsr	update_player_screen_address_from_xy_eaa7                            	| [$022e: call $EAA7]
	move.w	(sp)+,d0                        	| [$0231: pop  af]
	move.b	d0,player_y_6583                	| [$0232: ld   (player_y_6583),a]
	move.b	holds_barrow_61C7,d0            	| [$0235: ld   a,(holds_barrow_61C7)]
	                         	| [$0238: cp   $00]
	bne.b	0f                               	| [...]
	jbsr	l_0e14                            	| [$023a: call z,$0E14]
0:
l_023d:
	jbsr	update_player_screen_address_from_xy_eaa7                            	| [$023d: call $EAA7]
	move.b	fatal_fall_height_reached_604E,d0	| [$0240: ld   a,(fatal_fall_height_reached_604E)]
	                         	| [$0243: cp   $00]
	jne	l_029e                             	| [$0245: jr   nz,$029E]
	jbsr	l_d464                            	| [$0247: call $D464]
	move.b	player_in_elevator_4_6014,d0                 	| [$024a: ld   a,(player_in_elevator_4_6014)]
	cmp.b	#0x01,d0                         	| [$024d: cp   $01]
	jeq	l_025f                             	| [$024f: jr   z,$025F]
	move.b	player_in_elevator_5_62E5,d0                 	| [$0251: ld   a,(player_in_elevator_5_62E5)]
	cmp.b	#0x01,d0                         	| [$0254: cp   $01]
	jeq	l_025f                             	| [$0256: jr   z,$025F]
	move.b	unknown_6008,d0                 	| [$0258: ld   a,(unknown_6008)]
	cmp.b	#0x01,d0                         	| [$025b: cp   $01]
	jeq	l_029e                             	| [$025d: jr   z,$029E]
l_025f:
	move.b	unknown_62BD,d0                 	| [$025f: ld   a,(unknown_62BD)]
	                         	| [$0262: cp   $00]
	jne	l_029e                             	| [$0264: jr   nz,$029E]
	move.b	unknown_62D2,d0                 	| [$0266: ld   a,(unknown_62D2)]
	cmp.b	#0x01,d0                         	| [$0269: cp   $01]
	jeq	l_029e                             	| [$026b: jr   z,$029E]
	move.b	unknown_6295,d0                 	| [$026d: ld   a,(unknown_6295)]
	                         	| [$0270: cp   $00]
	jne	l_029e                             	| [$0272: jr   nz,$029E]
	move.b	unknown_62B0,d0                 	| [$0274: ld   a,(unknown_62B0)]
	cmp.b	#0x01,d0                         	| [$0277: cp   $01]
	jeq	l_0282                             	| [$0279: jr   z,$0282]
	move.b	unknown_62AF,d0                 	| [$027b: ld   a,(unknown_62AF)]
	cmp.b	#0x01,d0                         	| [$027e: cp   $01]
	jeq	l_029e                             	| [$0280: jr   z,$029E]
l_0282:
	move.b	player_in_elevator_4_6014,d0                 	| [$0282: ld   a,(player_in_elevator_4_6014)]
	cmp.b	#0x01,d0                         	| [$0285: cp   $01]
	jne	l_0290                             	| [$0287: jr   nz,$0290]
	move.b	elevator_not_moving_screen_4_6012,d0     	| [$0289: ld   a,(elevator_not_moving_screen_4_6012)]
	cmp.b	#0x01,d0                         	| [$028c: cp   $01]
	jne	l_029e                             	| [$028e: jr   nz,$029E]
l_0290:
	lea	player_just_moved_flag_6047,a3 	| [$0290: ld   iy,player_just_moved_flag_6047]
	lea	player_struct_6580,a2          	| [$0294: ld   ix,player_struct_6580]
	jbsr	player_movement_0BC6              	| [$0298: call player_movement_0BC6]
                       	| [$029b: ld   a,($B800)]
       
l_029e:
	jbsr	handle_player_object_carry_10C6   	| [$029e: call handle_player_object_carry_10C6]
	jbsr	attach_pick_sprite_to_player_110c                            	| [$02a1: call $110C]
	move.b	#0x01,d0                        	| [$02a4: ld   a,$01]
	move.b	d0,unknown_628A                 	| [$02a6: ld   (unknown_628A),a]
	move.b	player_screen_600D,d0           	| [$02a9: ld   a,(player_screen_600D)]
	move.b	d0,current_character_screen_index_6098	| [$02ac: ld   (current_character_screen_index_6098),a]
	lea	player_in_elevator_4_6014,a0                	| [$02af: ld   hl,player_in_elevator_4_6014]
	lea	player_struct_6580,a2          	| [$02b2: ld   ix,player_struct_6580]
	jbsr	is_character_sufficiently_aligned_with_elevator_0ab1                            	| [$02b6: call $0AB1]
                       	| [$02b9: ld   a,($B800)]
       
	move.b	player_controls_blocked_61F2,d0 	| [$02bc: ld   a,(player_controls_blocked_61F2)]
											| [$02bf: cp   $00]
	jne	l_0323                             	| [$02c1: jr   nz,$0323]
	move.b	unknown_62D2,d0                 	| [$02c3: ld   a,(unknown_62D2)]
	cmp.b	#0x01,d0                         	| [$02c6: cp   $01]
	jeq	l_0323                             	| [$02c8: jr   z,$0323]
	move.b	player_in_elevator_5_62E5,d0                 	| [$02ca: ld   a,(player_in_elevator_5_62E5)]
	cmp.b	#0x01,d0                         	| [$02cd: cp   $01]
	jeq	l_0323                             	| [$02cf: jr   z,$0323]
	move.b	unknown_62BD,d0                 	| [$02d1: ld   a,(unknown_62BD)]
	cmp.b	#0x01,d0                         	| [$02d4: cp   $01]
	jeq	l_0323                             	| [$02d6: jr   z,$0323]
	move.b	unknown_62AF,d0                 	| [$02d8: ld   a,(unknown_62AF)]
	cmp.b	#0x01,d0                         	| [$02db: cp   $01]
	jeq	l_0323                             	| [$02dd: jr   z,$0323]
	move.b	player_screen_600D,d0           	| [$02df: ld   a,(player_screen_600D)]
	move.b	d0,current_character_screen_index_6098	| [$02e2: ld   (current_character_screen_index_6098),a]
	lea	unknown_6008,a0                	| [$02e5: ld   hl,unknown_6008]
	move.b	(a0),d0                         	| [$02e8: ld   a,(hl)]
											| [$02e9: cp   $00]
	jeq	l_030c                             	| [$02eb: jr   z,$030C]
	move.b	player_screen_600D,d0           	| [$02ed: ld   a,(player_screen_600D)]
	cmp.b	#0x04,d0                         	| [$02f0: cp   $04]
	jne	l_030c                             	| [$02f2: jr   nz,$030C]
	move.b	player_almost_in_elevator_4_6013,d0                 	| [$02f4: ld   a,(player_almost_in_elevator_4_6013)]
	cmp.b	#0x01,d0                         	| [$02f7: cp   $01]
	jeq	l_030c                             	| [$02f9: jr   z,$030C]
	move.b	player_in_elevator_4_6014,d0                 	| [$02fb: ld   a,(player_in_elevator_4_6014)]
	cmp.b	#0x01,d0                         	| [$02fe: cp   $01]
	jeq	l_030c                             	| [$0300: jr   z,$030C]
	move.b	holds_barrow_61C7,d0            	| [$0302: ld   a,(holds_barrow_61C7)]
	move.l	a0,-(sp)                        	| [$0307: push hl]
	cmp.b	#0x01,d0                         	| [$0305: cp   $01]

	bne.b	0f                               	| [...]
	jbsr	l_d64b                            	| [$0308: call z,$D64B]
0:
	move.l	(sp)+,a0                        	| [$030b: pop  hl]
l_030c:
	lea	fall_height_604D,a3            	| [$030c: ld   iy,fall_height_604D]
	lea	player_struct_6580,a2          	| [$0310: ld   ix,player_struct_6580]
	move.b	player_in_elevator_4_6014,d0                 	| [$0314: ld   a,(player_in_elevator_4_6014)]
	move.b	d0,d2                           	| [$0317: ld   c,a]
	move.b	player_almost_in_elevator_4_6013,d0                 	| [$0318: ld   a,(player_almost_in_elevator_4_6013)]
	move.b	#0x19,d1                        	| [$031b: ld   b,$19]
	jbsr	l_0b82                            	| [$031d: call $0B82]
                       	| [$0320: ld   a,($B800)]

l_0323:
	move.b	player_screen_600D,d0           	| [$0323: ld   a,(player_screen_600D)]
	move.b	d0,current_character_screen_index_6098	| [$0326: ld   (current_character_screen_index_6098),a]
	lea	player_struct_6580,a2          	| [$0329: ld   ix,player_struct_6580]
	lea	player_in_elevator_4_6014,a3                	| [$032d: ld   iy,player_in_elevator_4_6014]
	jbsr	handle_elevator_screen_4_0ADB             	| [$0331: call handle_elevator_screen_4_0ADB]
	lea	player_struct_6580,a2          	| [$0334: ld   ix,player_struct_6580]
	lea	player_in_elevator_4_6014,a0                	| [$0338: ld   hl,player_in_elevator_4_6014]
	jbsr	handle_elevator_stops_0A40        	| [$033b: call handle_elevator_stops_0A40]
	move.b	unknown_6156,d0                 	| [$033e: ld   a,(unknown_6156)]
	                         	| [$0341: cp   $00]
	jne	l_03a8                             	| [$0343: jr   nz,$03A8]
	move.b	unknown_62D6,d0                 	| [$0345: ld   a,(unknown_62D6)]
	cmp.b	#0x01,d0                         	| [$0348: cp   $01]
	jeq	l_0387                             	| [$034a: jr   z,$0387]
	move.b	unknown_6211,d0                 	| [$034c: ld   a,(unknown_6211)]
	                         	| [$034f: cp   $00]
	jne	l_0387                             	| [$0351: jr   nz,$0387]
	move.b	unknown_62C4,d0                 	| [$0353: ld   a,(unknown_62C4)]
	                         	| [$0356: cp   $00]
	jne	l_0387                             	| [$0358: jr   nz,$0387]
	move.b	unknown_629D,d0                 	| [$035a: ld   a,(unknown_629D)]
	                         	| [$035d: cp   $00]
	jne	l_0387                             	| [$035f: jr   nz,$0387]
	move.b	unknown_62B6,d0                 	| [$0361: ld   a,(unknown_62B6)]
	cmp.b	#0x01,d0                         	| [$0364: cp   $01]
	jeq	l_0376                             	| [$0366: jr   z,$0376]
	move.b	unknown_62B5,d0                 	| [$0368: ld   a,(unknown_62B5)]
	cmp.b	#0x01,d0                         	| [$036b: cp   $01]
	jeq	l_0387                             	| [$036d: jr   z,$0387]
	move.b	guard_1_not_moving_flag_6148,d0                 	| [$036f: ld   a,(guard_1_not_moving_flag_6148)]
	cmp.b	#0x01,d0                         	| [$0372: cp   $01]
	jeq	l_0387                             	| [$0374: jr   z,$0387]
l_0376:
	move.b	guard_1_in_elevator_603B,d0     	| [$0376: ld   a,(guard_1_in_elevator_603B)]
	cmp.b	#0x01,d0                         	| [$0379: cp   $01]
	jne	l_0384                             	| [$037b: jr   nz,$0384]
	move.b	elevator_not_moving_screen_4_6012,d0     	| [$037d: ld   a,(elevator_not_moving_screen_4_6012)]
	cmp.b	#0x01,d0                         	| [$0380: cp   $01]
	jne	l_0387                             	| [$0382: jr   nz,$0387]
 * routine actually moving the guards
*  theres some other routine monitoring the guard movements
*  if they don't move, then reset them to the center up of the neighbor screen
*  did not locate this routine yet but this is not really important
l_0384:
	jbsr	guard_1_walk_movement_11C0        	| [$0384: call guard_1_walk_movement_11C0]
l_0387:
	lea	guard_1_not_moving_timeout_counter_6057,a3	| [$0387: ld   iy,guard_1_not_moving_timeout_counter_6057]
	move.l	a3,guard_struct_pointer_6093    	| [$038b: ld   (guard_struct_pointer_6093),iy]
	move.w	guard_1_logical_address_6038,stored_logical_address_6044	| [$038f: ld   hl,(guard_1_logical_address_6038)]
 
	| [$0392: ld   (stored_logical_address_6044),hl]
	lea	guard_1_ladder_frame_6035,a0   	| [$0395: ld   hl,guard_1_ladder_frame_6035]
	lea	guard_1_direction_6027,a3      	| [$0398: ld   iy,guard_1_direction_6027]
	lea	guard_1_struct_6594,a2         	| [$039c: ld   ix,guard_1_struct_6594]
	move.b	guard_1_in_elevator_6037,d0     	| [$03a0: ld   a,(guard_1_in_elevator_6037)]
	cmp.b	#0x01,d0                         	| [$03a3: cp   $01]
	beq.b	0f                               	| [...]
	jbsr	guard_ladder_movement_05bb               	| [$03a5: call nz,$05BB]
0:
l_03a8:
	tst.b	unknown_6157                 	| [$03a8: ld   a,(unknown_6157)]
	                         	| [$03ab: cp   $00]
	jne	l_0418                             	| [$03ad: jr   nz,$0418]
	tst.b	unknown_6212                 	| [$03af: ld   a,(unknown_6212)]
	                         	| [$03b2: cp   $00]
	jne	l_03f1                             	| [$03b4: jr   nz,$03F1]
	move.b	unknown_62DA,d0                 	| [$03b6: ld   a,(unknown_62DA)]
	cmp.b	#0x01,d0                         	| [$03b9: cp   $01]
	jeq	l_03f1                             	| [$03bb: jr   z,$03F1]
	tst.b	unknown_62CB                 	| [$03bd: ld   a,(unknown_62CB)]
	                         	| [$03c0: cp   $00]
	jne	l_03f1                             	| [$03c2: jr   nz,$03F1]
	tst.b	unknown_62A5                 	| [$03c4: ld   a,(unknown_62A5)]
	                         	| [$03c7: cp   $00]
	jne	l_03f1                             	| [$03c9: jr   nz,$03F1]
	move.b	unknown_62BA,d0                 	| [$03cb: ld   a,(unknown_62BA)]
	cmp.b	#0x01,d0                         	| [$03ce: cp   $01]
	jeq	l_03e0                             	| [$03d0: jr   z,$03E0]
	move.b	unknown_62B9,d0                 	| [$03d2: ld   a,(unknown_62B9)]
	cmp.b	#0x01,d0                         	| [$03d5: cp   $01]
	jeq	l_03f1                             	| [$03d7: jr   z,$03F1]
	move.b	guard_2_not_moving_flag_6149,d0                 	| [$03d9: ld   a,(guard_2_not_moving_flag_6149)]
	cmp.b	#0x01,d0                         	| [$03dc: cp   $01]
	jeq	l_03f1                             	| [$03de: jr   z,$03F1]
l_03e0:
	move.b	guard_2_in_elevator_607B,d0     	| [$03e0: ld   a,(guard_2_in_elevator_607B)]
	cmp.b	#0x01,d0                         	| [$03e3: cp   $01]
	jne	l_03ee                             	| [$03e5: jr   nz,$03EE]
	move.b	elevator_not_moving_screen_4_6012,d0     	| [$03e7: ld   a,(elevator_not_moving_screen_4_6012)]
	cmp.b	#0x01,d0                         	| [$03ea: cp   $01]
	jne	l_03f1                             	| [$03ec: jr   nz,$03F1]
l_03ee:
	jbsr	guard_2_walk_movement_11EC        	| [$03ee: call guard_2_walk_movement_11EC]
l_03f1:
	move.w	guard_2_logical_address_6078,stored_logical_address_6044	| [$03f1: ld   hl,(guard_2_logical_address_6078)]
 
		| [$03f4: ld   (stored_logical_address_6044),hl]
	lea	guard_2_not_moving_timeout_counter_6097,a3	| [$03f7: ld   iy,guard_2_not_moving_timeout_counter_6097]
	move.l	a3,guard_struct_pointer_6093    	| [$03fb: ld   (guard_struct_pointer_6093),iy]
	move.w	guard_2_logical_address_6078,stored_logical_address_6044	| [$03ff: ld   hl,(guard_2_logical_address_6078)]

		| [$0402: ld   (stored_logical_address_6044),hl]
	lea	guard_2_ladder_frame_6075,a0   	| [$0405: ld   hl,guard_2_ladder_frame_6075]
	lea	guard_2_direction_6067,a3      	| [$0408: ld   iy,guard_2_direction_6067]
	lea	guard_2_struct_6598,a2         	| [$040c: ld   ix,guard_2_struct_6598]
	move.b	guard_2_in_elevator_6077,d0     	| [$0410: ld   a,(guard_2_in_elevator_6077)]
	cmp.b	#0x01,d0                         	| [$0413: cp   $01]
	beq.b	0f                               	| [...]
	jbsr	guard_ladder_movement_05bb                            	| [$0415: call nz,$05BB]
0:
l_0418:
	move.b	guard_2_screen_609A,current_character_screen_index_6098          	| [$0418: ld   a,(guard_2_screen_609A)]
		| [$041b: ld   (current_character_screen_index_6098),a]
	lea	guard_2_in_elevator_607B,a0    	| [$041e: ld   hl,guard_2_in_elevator_607B]
	lea	guard_2_struct_6598,a2         	| [$0421: ld   ix,guard_2_struct_6598]
	jbsr	is_character_sufficiently_aligned_with_elevator_0ab1                            	| [$0425: call $0AB1]
                       	| [$0428: ld   a,($B800)]

	addq.b	#1,guard_2_not_moving_timeout_counter_6097	| [$042b: ld   a,(guard_2_not_moving_timeout_counter_6097)]
	                          	| [$042e: inc  a]
	| [$042f: ld   (guard_2_not_moving_timeout_counter_6097),a]
	lea	unknown_608F,a3                	| [$0432: ld   iy,unknown_608F]
	lea	guard_2_in_elevator_6077,a0    	| [$0436: ld   hl,guard_2_in_elevator_6077]
	lea	guard_2_struct_6598,a2         	| [$0439: ld   ix,guard_2_struct_6598]
	move.b	unknown_61EC,d0                 	| [$043d: ld   a,(unknown_61EC)]
	cmp.b	#0x01,d0                         	| [$0440: cp   $01]
	jeq	l_046b                             	| [$0442: jr   z,$046B]
	move.b	unknown_62DA,d0                 	| [$0444: ld   a,(unknown_62DA)]
	cmp.b	#0x01,d0                         	| [$0447: cp   $01]
	jeq	l_046b                             	| [$0449: jr   z,$046B]
	move.b	unknown_62CB,d0                 	| [$044b: ld   a,(unknown_62CB)]
	                         	| [$044e: cp   $00]
	jne	l_046b                             	| [$0450: jr   nz,$046B]
	move.b	guard_2_in_elevator_5_62ED,d0                 	| [$0452: ld   a,(guard_2_in_elevator_5_62ED)]
	cmp.b	#0x01,d0                         	| [$0455: cp   $01]
	jeq	l_046b                             	| [$0457: jr   z,$046B]
	move.b	guard_2_screen_609A,d0          	| [$0459: ld   a,(guard_2_screen_609A)]
	move.b	d0,current_character_screen_index_6098	| [$045c: ld   (current_character_screen_index_6098),a]
	move.b	guard_2_in_elevator_607B,d0     	| [$045f: ld   a,(guard_2_in_elevator_607B)]
	move.b	d0,d2                           	| [$0462: ld   c,a]
	move.b	unknown_607A,d0                 	| [$0463: ld   a,(unknown_607A)]
	move.b	#0x26,d1                        	| [$0466: ld   b,$26]
	jbsr	l_0b82                            	| [$0468: call $0B82]
l_046b:
	move.b	guard_1_screen_6099,d0          	| [$046b: ld   a,(guard_1_screen_6099)]
	move.b	d0,current_character_screen_index_6098	| [$046e: ld   (current_character_screen_index_6098),a]
	lea	guard_1_in_elevator_603B,a0    	| [$0471: ld   hl,guard_1_in_elevator_603B]
	lea	guard_1_struct_6594,a2         	| [$0474: ld   ix,guard_1_struct_6594]
	jbsr	is_character_sufficiently_aligned_with_elevator_0ab1                            	| [$0478: call $0AB1]
	move.b	guard_1_not_moving_timeout_counter_6057,d0	| [$047b: ld   a,(guard_1_not_moving_timeout_counter_6057)]
	addq.b	#1,d0                           	| [$047e: inc  a]
	move.b	d0,guard_1_not_moving_timeout_counter_6057	| [$047f: ld   (guard_1_not_moving_timeout_counter_6057),a]
	lea	unknown_604F,a3                	| [$0482: ld   iy,unknown_604F]
	lea	guard_1_in_elevator_6037,a0    	| [$0486: ld   hl,guard_1_in_elevator_6037]
	lea	guard_1_struct_6594,a2         	| [$0489: ld   ix,guard_1_struct_6594]
	move.b	unknown_61EB,d0                 	| [$048d: ld   a,(unknown_61EB)]
	cmp.b	#0x01,d0                         	| [$0490: cp   $01]
	jeq	l_04bb                             	| [$0492: jr   z,$04BB]
	move.b	unknown_62D6,d0                 	| [$0494: ld   a,(unknown_62D6)]
	cmp.b	#0x01,d0                         	| [$0497: cp   $01]
	jeq	l_04bb                             	| [$0499: jr   z,$04BB]
	move.b	unknown_62C4,d0                 	| [$049b: ld   a,(unknown_62C4)]
	                         	| [$049e: cp   $00]
	jne	l_04bb                             	| [$04a0: jr   nz,$04BB]
	move.b	guard_1_in_elevator_5_62E9,d0                 	| [$04a2: ld   a,(guard_1_in_elevator_5_62E9)]
	cmp.b	#0x01,d0                         	| [$04a5: cp   $01]
	jeq	l_04bb                             	| [$04a7: jr   z,$04BB]
	move.b	guard_1_screen_6099,d0          	| [$04a9: ld   a,(guard_1_screen_6099)]
	move.b	d0,current_character_screen_index_6098	| [$04ac: ld   (current_character_screen_index_6098),a]
	move.b	guard_1_in_elevator_603B,d0     	| [$04af: ld   a,(guard_1_in_elevator_603B)]
	move.b	d0,d2                           	| [$04b2: ld   c,a]
	move.b	unknown_603A,d0                 	| [$04b3: ld   a,(unknown_603A)]
	move.b	#0x26,d1                        	| [$04b6: ld   b,$26]
	jbsr	l_0b82                            	| [$04b8: call $0B82]
l_04bb:
	jbsr	l_e3e0                            	| [$04bb: call $E3E0]
	jbsr	l_e36d                            	| [$04be: call $E36D]
	jbsr	l_e389                            	| [$04c1: call $E389]
	jbsr	check_if_gun_is_picked_e630                            	| [$04c4: call $E630]
	jbsr	l_e1b4                            	| [$04c7: call $E1B4]
	jbsr	l_e1c0                            	| [$04ca: call $E1C0]
	jbsr	l_e1cc                            	| [$04cd: call $E1CC]
	jbsr	l_e869                            	| [$04d0: call $E869]
	jbsr	handle_elevator_5_e03c                            	| [$04d3: call $E03C]
	jbsr	l_df42                            	| [$04d6: call $DF42]
	jbsr	update_bomb_explosion_frame_timer_dd13                            	| [$04d9: call $DD13]
	jbsr	l_d60c                            	| [$04dc: call $D60C]
	move.b	#0x01,d0                        	| [$04df: ld   a,$01]
	move.b	d0,unknown_627F                 	| [$04e1: ld   (unknown_627F),a]
	jbsr	l_f3ed                            	| [$04e4: call $F3ED]
                       	| [$04e7: ld   a,($B800)]
 
l_04ea:
	jbsr	update_all_sprites_D511                            	| [$04ea: call $D511]
	move.b	game_locked_6151,d0                 	| [$04ed: ld   a,(game_locked_6151)]
	                         	| [$04f0: cp   $00]
	bne.b	0f                               	| [...]
	jbsr	start_a_game_0F15                 	| [$04f2: call z,start_a_game_0F15]
0:
	move.b	check_scenery_disabled_61ED,d0  	| [$04f5: ld   a,(check_scenery_disabled_61ED)]
	cmp.b	#0x01,d0                         	| [$04f8: cp   $01]
	jbsr	l_e861                            	| [$04fa: call $E861]
	move.b	unknown_635B,d0                 	| [$04fd: ld   a,(unknown_635B)]
	addq.b	#1,d0                           	| [$0500: inc  a]
	move.b	d0,unknown_635B                 	| [$0501: ld   (unknown_635B),a]
	cmp.b	#0x0A,d0                         	| [$0504: cp   $0A]
	jcs	l_0512                             	| [$0506: jr   c,$0512]
	clr.b	d0                               	| [$0508: xor  a]
	move.b	d0,unknown_635B                 	| [$0509: ld   (unknown_635B),a]
	jbsr	write_credits_and_lives_162e                            	| [$050c: call $162E]
	jbsr	write_scores_and_time_560f        	| [$050f: call write_scores_and_time_560f]
l_0512:
	jbsr	read_player_controls_1689                            	| [$0512: call $1689]
l_0515:
	jbsr	l_d34d                            	| [$0515: call $D34D]
	move.b	unknown_6356,d0                 	| [$0518: ld   a,(unknown_6356)]
	                         	| [$051b: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$051d: ret  nz] [...]
0:
                       	| [$051e: ld   a,($B800)]
 
	                        	| [$0521: ld   a,$01]
       	| [$0523: ld   (interrupt_control_A000),a]

	move.w	(sp)+,d0                        	| [$0528: pop  af]
	exg	d0,d7                              	| [$0529: ex   af,af']
        
	move.l	(sp)+,a0                        	| [$052a: pop  hl]
	move.l	(sp)+,a1                        	| [$052b: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$052b: pop  de]

	movem.w	(sp)+,d1/d2                    	| [$052c: pop  bc]
	jbsr	exx                               	| [$052d: exx]
 
	movem.l	(sp)+,a0-a4                        	| [$052e: pop  iy]
	movem.w	(sp)+,d0-d7                         	| [$0530: pop  ix]
	                        	| [$0532: pop  hl]
	                        	| [$0533: pop  de]
	                    	| [$0533: pop  de]

	                    	| [$0534: pop  bc]
                        	| [$0535: pop  af]

        jbsr	osd_enable_vblank_interrupt
	rts                                    	| [$0537: ret]
l_0538:
	move.b	bag_falling_6159,d0             	| [$0538: ld   a,(bag_falling_6159)]
	move.b	d0,d1                           	| [$053b: ld   b,a]
	move.b	bomb_just_dropped_6334,d0                 	| [$053c: ld   a,(bomb_just_dropped_6334)]
	or.b	d1,d0                             	| [$053f: or   b]
	                         	| [$0540: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$0542: ret  z] [...]
0:
	move.b	sprite_object_y_659F,d0         	| [$0543: ld   a,(sprite_object_y_659F)]
	addq.b	#2,d0                           	| [$0546: inc  a] * 2
	move.b	d0,sprite_object_y_659F         	| [$0548: ld   (sprite_object_y_659F),a]
	rts                                    	| [$054b: ret]
l_054c:
	move.b	(A3),d0                    	| [$054c: ld   a,(iy+$00)]
	                         	| [$054f: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$0551: ret  z] [...]
0:
	move.w	unknown_6154,d6             	| [$0552: ld   hl,(unknown_6154)]

	move.b	unknown_6153,d0                 	| [$0555: ld   a,(unknown_6153)]
	cmp.b	#0x07,d0                         	| [$0558: cp   $07]
	jne	l_056d                             	| [$055a: jr   nz,$056D]
	bsr		read_rom                         	| [$055c: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$055d: cp   $FF]
	jeq	l_0575                             	| [$055f: jr   z,$0575]
	move.b	d0,(A2)                    	| [$0561: ld   (ix+$00),a]
	addq.w	#1,d6                           	| [$0564: inc  hl]
	move.w	d6,unknown_6154                 	| [$0565: ld   (unknown_6154),hl]
	clr.b	d0                               	| [$0568: xor  a]
	move.b	d0,unknown_6153                 	| [$0569: ld   (unknown_6153),a]
	rts                                    	| [$056c: ret]
l_056d:
	move.b	unknown_6153,d0                 	| [$056d: ld   a,(unknown_6153)]
	addq.b	#1,d0                           	| [$0570: inc  a]
	move.b	d0,unknown_6153                 	| [$0571: ld   (unknown_6153),a]
	rts                                    	| [$0574: ret]
l_0575:
	move.b	#0x31,d0                        	| [$0575: ld   a,$31]
	move.b	d0,(A2)                    	| [$0577: ld   (ix+$00),a]
	clr.b	d0                               	| [$057a: xor  a]
	move.b	d0,(A3)                    	| [$057b: ld   (iy+$00),a]
	move.b	d0,(a1)                         	| [$057e: ld   (de),a]
	rts                                    	| [$057f: ret]
l_0580:
	lea	game_locked_6151,a3            	| [$0580: ld   iy,game_locked_6151]
	lea	player_struct_6580,a2          	| [$0584: ld   ix,player_struct_6580]
	move.w	unknown_6154,d6             	| [$0588: ld   hl,(unknown_6154)]
	tst.b	(a3)                    	| [$058b: ld   a,(iy+$00)]
	                         	| [$058e: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$0590: ret  z] [...]
0:
	move.b	unknown_6153,d0                 	| [$0591: ld   a,(unknown_6153)]
	cmp.b	#0x07,d0                         	| [$0594: cp   $07]
	jne	l_05a9                             	| [$0596: jr   nz,$05A9]
	bsr		read_rom                         	| [$0598: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$0599: cp   $FF]
	jeq	l_05b1                             	| [$059b: jr   z,$05B1]
	move.b	d0,(A2)                    	| [$059d: ld   (ix+$00),a]
	addq.w	#1,d6                           	| [$05a0: inc  hl]
 
	move.w	d6,unknown_6154                 	| [$05a1: ld   (unknown_6154),hl]
	clr.b	d0                               	| [$05a4: xor  a]
	move.b	d0,unknown_6153                 	| [$05a5: ld   (unknown_6153),a]
	rts                                    	| [$05a8: ret]
l_05a9:
	addq.b	#1,unknown_6153                 	| [$05a9: ld   a,(unknown_6153)]
	                           	| [$05ac: inc  a]
	                 	| [$05ad: ld   (unknown_6153),a]
	rts                                    	| [$05b0: ret]
l_05b1:
	move.b	#0x01,d0                        	| [$05b1: ld   a,$01]
	move.b	d0,wait_flag_6152               	| [$05b3: ld   (wait_flag_6152),a]
	rts                                    	| [$05b6: ret]
 * in ix guard structure
 * structure is as follows: (same struct for player)
 * offset 0:	sprite frame gfx index (ex: 27/A7:	climbing)
 * offset 1:	?
 * offset 2:	x
 * offset 3:	y
	
guard_ladder_movement_05bb:
	move.b	(A3),d0                    	| [$05bb: ld   a,(iy+$00)]
	and.b	#0x10,d0                         	| [$05be: and  $10]
	cmp.b	#0x10,d0                         	| [$05c0: cp   $10]
	jeq	l_05d9                             	| [$05c2: jr   z,$05D9]
	move.b	(A3),d0                    	| [$05c4: ld   a,(iy+$00)]
	and.b	#0x20,d0                         	| [$05c7: and  $20]
	cmp.b	#0x20,d0                         	| [$05c9: cp   $20]
	beq.b	0f                               	| [...]
	rts                                    	| [$05cb: ret  nz] [...]
0:

	move.w	d6,-(sp)                        	| [$05cc: push hl]
	move.w	stored_logical_address_6044,d6	| [$05cd: ld   hl,(stored_logical_address_6044)]
 	bsr		read_rom                         	| [$05d0: ld   a,(hl)]
	* the only ladder tile (0xFF) that needs checking
	cmp.b	#0xFF,d0                         	| [$05d1: cp   $FF]
	movem.w	(sp)+,d6                        	| [$05d3: pop  hl]
	beq.b	0f                               	| [...]

	rts                                    	| [$05d4: ret  nz] [...]
0:
	clr.b	d1                               	| [$05d5: ld   b,$00]
	jra	l_05e5                             	| [$05d7: jr   $05E5]
l_05d9:

	move.w	d6,-(sp)                        	| [$05d9: push hl]
	move.w	stored_logical_address_6044,d6	| [$05da: ld   hl,(stored_logical_address_6044)]
	subq.w	#1,d6                           	| [$05dd: dec  hl]
	bsr		read_rom                         	| [$05de: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$05df: cp   $FF]
	movem.w	(sp)+,d6                        	| [$05e1: pop  hl]
	beq.b	0f                               	| [...]
	rts                                    	| [$05e2: ret  nz] [...]
0:
	move.b	#0x80,d1                        	| [$05e3: ld   b,$80]
l_05e5:
	* change climb frame
	move.b	(a0),d0                         	| [$05e5: ld   a,(hl)]
	cmp.b	#0x0B,d0                         	| [$05e6: cp   $0B]
	jne	l_05ef                             	| [$05e8: jr   nz,$05EF]
	move.b	#0x01,d0                        	| [$05ea: ld   a,$01]
	move.b	d0,(a0)                         	| [$05ec: ld   (hl),a]
	jra	l_05f1                             	| [$05ed: jr   $05F1]
l_05ef:
	addq.b	#1,d0                           	| [$05ef: inc  a]
	move.b	d0,(a0)                         	| [$05f0: ld   (hl),a]
l_05f1:
	move.b	(a0),d0                         	| [$05f1: ld   a,(hl)]
 * move timer. 01 -> 0B for the guard climbing up/down
 * note: difficulty/score does not affect up/down moves
	cmp.b	#0x01,d0                         	| [$05f2: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$05f4: ret  z] [...]
0:
	cmp.b	#0x03,d0                         	| [$05f5: cp   $03]
	bne.b	0f                               	| [...]
	rts                                    	| [$05f7: ret  z] [...]
0:
	cmp.b	#0x05,d0                         	| [$05f8: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$05fa: ret  z] [...]
0:
	cmp.b	#0x08,d0                         	| [$05fb: cp   $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$05fd: ret  z] [...]
0:
	cmp.b	#0x0A,d0                         	| [$05fe: cp   $0A]
	bne.b	0f                               	| [...]
	jbsr	l_0631                            	| [$0600: call z,$0631]
0:
	cmp.b	#0x02,d0                         	| [$0603: cp   $02]
	bne.b	0f                               	| [...]
	jbsr	l_0631                            	| [$0605: call z,$0631]
0:
	cmp.b	#0x04,d0                         	| [$0608: cp   $04]
	bne.b	0f                               	| [...]
	jbsr	l_0631                            	| [$060a: call z,$0631]
0:
	cmp.b	#0x07,d0                         	| [$060d: cp   $07]
	bne.b	0f                               	| [...]
	jbsr	l_0631                            	| [$060f: call z,$0631]
0:
	cmp.b	#0x09,d0                         	| [$0612: cp   $09]
	bne.b	0f                               	| [...]
	jbsr	l_0631                            	| [$0614: call z,$0631]
0:
	cmp.b	#0x06,d0                         	| [$0617: cp   $06]
	jne	l_0624                             	| [$0619: jr   nz,$0624]
	move.b	#0x27,d0                        	| [$061b: ld   a,$27]
	move.b	d0,(A2)                    	| [$061d: ld   (ix+$00),a]
	jbsr	l_0631                            	| [$0620: call $0631]
	rts                                    	| [$0623: ret]
l_0624:
	cmp.b	#0x0B,d0                         	| [$0624: cp   $0B]
	jne	l_0630                             	| [$0626: jr   nz,$0630]
	move.b	#0xA7,d0                        	| [$0628: ld   a,$A7]
	move.b	d0,(A2)                    	| [$062a: ld   (ix+$00),a]
	jbsr	l_0631                            	| [$062d: call $0631]
l_0630:
	rts                                    	| [$0630: ret]
l_0631:
	move.w	d0,-(sp)                        	| [$0631: push af]
	movem.w	d1/d2,-(sp)                    	| [$0632: push bc]
	move.b	unknown_61F5,d0                 	| [$0633: ld   a,(unknown_61F5)]
	                         	| [$0636: cp   $00]
	jne	l_064e                             	| [$0638: jr   nz,$064E]
	move.b	has_pick_61CF,d0                	| [$063a: ld   a,(has_pick_61CF)]
	                         	| [$063d: cp   $00]
	jne	l_064e                             	| [$063f: jr   nz,$064E]
	move.b	unknown_61F3,d0                 	| [$0641: ld   a,(unknown_61F3)]
	                         	| [$0644: cp   $00]
	jne	l_064e                             	| [$0646: jr   nz,$064E]
	move.w	#GUARD_CLIMB_SND,d0                      	| [$0648: ld   hl,$D97B]
	jbsr	start_a_sound                  	| [$064b: call play_sample_EC84]
l_064e:

	movem.w	(sp)+,d1/d2                    	| [$064e: pop  bc]
	move.w	(sp),d0                        	| [$064f: pop  af]
	                        	| [$0650: push af]
	move.b	d1,d0                           	| [$0651: ld   a,b]
	cmp.b	#0x80,d0                         	| [$0652: cp   $80]
	jne	l_066a                             	| [$0654: jr   nz,$066A]
	move.b	(0x03,a2),d0                    	| [$0656: ld   a,(ix+$03)]
	subq.b	#1,d0                           	| [$0659: dec  a]
	move.b	d0,(0x03,a2)                    	| [$065a: ld   (ix+$03),a]
	clr.b	d0                               	| [$065d: xor  a]
	move.l	guard_struct_pointer_6093,a3	| [$065e: ld   iy,(guard_struct_pointer_6093)]

	move.b	d0,(A3)                    	| [$0662: ld   (iy+$00),a]
	jbsr	align_character_x_0fc9            	| [$0665: call align_character_x_0fc9]
	move.w	(sp)+,d0                        	| [$0668: pop  af]
	rts                                    	| [$0669: ret]
l_066a:
	move.b	(0x03,a2),d0                    	| [$066a: ld   a,(ix+$03)]
	addq.b	#1,d0                           	| [$066d: inc  a]
	move.b	d0,(0x03,a2)                    	| [$066e: ld   (ix+$03),a]
	clr.b	d0                               	| [$0671: xor  a]
	move.l	guard_struct_pointer_6093,a3	| [$0672: ld   iy,(guard_struct_pointer_6093)]
 	move.b	d0,(A3)                    	| [$0676: ld   (iy+$00),a]
	jbsr	align_character_x_0fc9            	| [$0679: call align_character_x_0fc9]
	move.w	(sp)+,d0                        	| [$067c: pop  af]
	rts                                    	| [$067d: ret]
 *
 * guard left/right movement routine
 * no A.I. here:	 if direction = left, animates left, etc..
 *
guard_walk_movement_067E:
 * handle the right side
	move.b	(A3),d0                    	| [$067e: ld   a,(iy+$00)]  guard direction
	and.b	#0x80,d0                         	| [$0681: and  $80]
	cmp.b	#0x80,d0                         	| [$0683: cp   $80]
	jne	l_0696                             	| [$0685: jr   nz,$0696]
 * guard walks right

	move.l	a0,-(sp)                        	| [$0687: push hl]
	move.w	d6,-(sp)
	move.w	stored_logical_address_6044,d6	| [$0688: ld   hl,(stored_logical_address_6044)]
 	jbsr	character_can_walk_right_0D71     	| [$068b: call character_can_walk_right_0D71]
	move.w	(sp)+,d6
	move.l	(sp)+,a0                        	| [$068e: pop  hl]
	move.b	way_clear_flag_600B,d0          	| [$068f: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$0692: cp   $02]
	jeq	l_06b0                             	| [$0694: jr   z,$06B0]
 * does not face right or cannot walk right. handle left side
l_0696:
	move.b	(A3),d0                    	| [$0696: ld   a,(iy+$00)]
	and.b	#0x40,d0                         	| [$0699: and  $40]
	cmp.b	#0x40,d0                         	| [$069b: cp   $40]  faces left?
	beq.b	0f                               	| [...]
	rts                                    	| [$069d: ret  nz] neither right or left: on ladder? quit [...]
0:

	move.l	a0,-(sp)                        	| [$069e: push hl]
	move.w	d6,-(sp)
	move.w	stored_logical_address_6044,d6	| [$069f: ld   hl,(stored_logical_address_6044)]
                  
	jbsr	character_can_walk_left_0DCC      	| [$06a2: call character_can_walk_left_0DCC]
	move.w	(sp)+,d6
	move.l	(sp)+,a0                        	| [$06a5: pop  hl]
	move.b	way_clear_flag_600B,d0          	| [$06a6: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$06a9: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$06ab: ret  nz] [...]
0:
 * walk left/animate
	move.b	#0x80,d1                        	| [$06ac: ld   b,$80]
	jra	l_06b2                             	| [$06ae: jr   z,$06B2]
  * walk right/animate
l_06b0:
	clr.b	d1                               	| [$06b0: ld   b,$00]
 * animation/move counter for the guard
l_06b2:
	move.b	(a0),d0                         	| [$06b2: ld   a,(hl)]
	cmp.b	#0x0B,d0                         	| [$06b3: cp   $0B]
	jne	l_06bc                             	| [$06b5: jr   nz,$06BC]
 * counter reaches 0B: reset to 01
	move.b	#0x01,d0                        	| [$06b7: ld   a,$01]
	move.b	d0,(a0)                         	| [$06b9: ld   (hl),a]
	jra	l_06be                             	| [$06ba: jr   $06BE]
l_06bc:
	addq.b	#1,d0                           	| [$06bc: inc  a]
	move.b	d0,(a0)                         	| [$06bd: ld   (hl),a]
l_06be:
	move.b	(a0),d0                         	| [$06be: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$06bf: cp   $02]
	jeq	guard_move_if_fast_enough_06EE     	| [$06c1: jr   z,guard_move_if_fast_enough_06EE]
	cmp.b	#0x05,d0                         	| [$06c3: cp   $05]
	jeq	guard_move_if_fast_enough_06EE     	| [$06c5: jr   z,guard_move_if_fast_enough_06EE]
	cmp.b	#0x09,d0                         	| [$06c7: cp   $09]
	jeq	guard_move_if_fast_enough_06EE     	| [$06c9: jr   z,guard_move_if_fast_enough_06EE]
* $FF is never set and thus never used: must be a last minute change
* this is somehow confirmed by the fact that speeds 9 and 10 are strictly
* identical (same speed as player)
	cmp.b	#0xFF,d0                         	| [$06cb: cp   $FF]
	jeq	guard_move_if_fast_enough_06EE     	| [$06cd: jr   z,guard_move_if_fast_enough_06EE]
	cmp.b	#0x04,d0                         	| [$06cf: cp   $04]
	jeq	guard_move_if_fast_enough_06EE     	| [$06d1: jp   z,guard_move_if_fast_enough_06EE]
	cmp.b	#0x06,d0                         	| [$06d4: cp   $06]
	bne.b	0f                               	| [...]
	jbsr	guard_unconditional_move_0722     	| [$06d6: call z,guard_unconditional_move_0722]
0:
	cmp.b	#0x08,d0                         	| [$06d9: cp   $08]
	bne.b	0f                               	| [...]
	jbsr	guard_unconditional_move_0722     	| [$06db: call z,guard_unconditional_move_0722]
0:
	cmp.b	#0x0A,d0                         	| [$06de: cp   $0A]
	bne.b	0f                               	| [...]
	jbsr	guard_unconditional_move_0722     	| [$06e0: call z,guard_unconditional_move_0722]
0:
	cmp.b	#0x01,d0                         	| [$06e3: cp   $01]
	jne	l_0700                             	| [$06e5: jr   nz,$0700]
 * could move
	move.b	#0x31,d0                        	| [$06e7: ld   a,$31]
	or.b	d1,d0                             	| [$06e9: or   b]
	jra	l_ff17                             	| [$06ea: jp   $FF17]
	rts                                    	| [$06ed: ret]
guard_move_if_fast_enough_06EE:
	move.w	d0,-(sp)                        	| [$06ee: push af]
	movem.w	d1/d2,-(sp)                    	| [$06ef: push bc]
	move.b	d0,d1                           	| [$06f0: ld   b,a]
	move.b	guard_speed_6164,d0             	| [$06f1: ld   a,(guard_speed_6164)]
	cmp.b	d1,d0                            	| [$06f4: cp   b]
	jcc	l_06fa                             	| [$06f5: jr   nc,$06FA]
 * b > guard speed:	don't move

	movem.w	(sp)+,d1/d2                    	| [$06f7: pop  bc]
	move.w	(sp)+,d0                        	| [$06f8: pop  af]
	rts                                    	| [$06f9: ret]
l_06fa:

	movem.w	(sp)+,d1/d2                    	| [$06fa: pop  bc]
	move.w	(sp)+,d0                        	| [$06fb: pop  af]
	jbsr	guard_unconditional_move_0722     	| [$06fc: call guard_unconditional_move_0722]
	rts                                    	| [$06ff: ret]
l_0700:
	cmp.b	#0x03,d0                         	| [$0700: cp   $03]
	jne	l_070b                             	| [$0702: jr   nz,$070B]
	move.b	#0x30,d0                        	| [$0704: ld   a,$30]
	or.b	d1,d0                             	| [$0706: or   b]
	jra	l_ff17                             	| [$0707: jp   $FF17]
	rts                                    	| [$070a: ret]
l_070b:
	cmp.b	#0x07,d0                         	| [$070b: cp   $07]
	jne	l_0716                             	| [$070d: jr   nz,$0716]
	move.b	#0x2E,d0                        	| [$070f: ld   a,$2E]
	or.b	d1,d0                             	| [$0711: or   b]
	jra	l_ff27                             	| [$0712: jp   $FF27]
	rts                                    	| [$0715: ret]
l_0716:
	cmp.b	#0xFF,d0                         	| [$0716: cp   $FF]
	jne	l_0721                             	| [$0718: jr   nz,$0721]
	move.b	#0x30,d0                        	| [$071a: ld   a,$30]
	or.b	d1,d0                             	| [$071c: or   b]
	jra	l_ff2f                             	| [$071d: jp   $FF2F]
	rts                                    	| [$0720: ret]
l_0721:
	rts                                    	| [$0721: ret]
guard_unconditional_move_0722:
 * actually move
	move.w	d0,-(sp)                        	| [$0722: push af]
	movem.w	d1/d2,-(sp)                    	| [$0723: push bc]
	move.b	unknown_61F5,d0                 	| [$0724: ld   a,(unknown_61F5)]
	                         	| [$0727: cp   $00]
	jne	l_073f                             	| [$0729: jr   nz,$073F]
	tst.b	has_pick_61CF                	| [$072b: ld   a,(has_pick_61CF)]
	                         	| [$072e: cp   $00]
	jne	l_073f                             	| [$0730: jr   nz,$073F]
	tst.b	unknown_61F3                 	| [$0732: ld   a,(unknown_61F3)]
	                         	| [$0735: cp   $00]
	jne	l_073f                             	| [$0737: jr   nz,$073F]
	                      	| [$0739: ld   hl,$D99F]
* guard walking sound
	move.w	#GUARD_WALK_SND,d0                  	| [$073c: call play_sample_EC84]
	jbsr	start_a_sound
l_073f:

	movem.w	(sp)+,d1/d2                    	| [$073f: pop  bc]
	clr.b	d0                               	| [$0740: xor  a]
	move.l	guard_struct_pointer_6093,a3	| [$0741: ld   iy,(guard_struct_pointer_6093)]
	move.b	d0,(A3)                    	| [$0745: ld   (iy+$00),a]
	move.b	d1,d0                           	| [$0748: ld   a,b]
	cmp.b	#0x80,d0                         	| [$0749: cp   $80]
	jeq	move_to_the_left_0766                             	| [$074b: jr   z,$0766]
	move.b	(0x02,a2),d0                    	| [$074d: ld   a,(ix+$02)]
	addq.b	#1,d0                           	| [$0750: inc  a]
	move.b	d0,(0x02,a2)                    	| [$0751: ld   (ix+$02),a]
	cmp.b	#0xF0,d0                         	| [$0754: cp   $F0]  F0 is the max screen X
	jne	l_0764                             	| [$0756: jr   nz,$0764]
	move.b	#0x01,d0                        	| [$0758: ld   a,$01]
	move.b	d0,(0x02,a2)                    	| [$075a: ld   (ix+$02),a]
 * increase screen index
	addq.b	#1,current_character_screen_index_6098	| [$075d: ld   a,(current_character_screen_index_6098)]
	                           	| [$0760: inc  a]
		| [$0761: ld   (current_character_screen_index_6098),a]
l_0764:
	move.w	(sp)+,d0                        	| [$0764: pop  af]
	rts                                    	| [$0765: ret]
move_to_the_left_0766:
	move.b	(0x02,a2),d0                    	| [$0766: ld   a,(ix+$02)]
	subq.b	#1,d0                           	| [$0769: dec  a]
	move.b	d0,(0x02,a2)                    	| [$076a: ld   (ix+$02),a]
	cmp.b	#0x01,d0                         	| [$076d: cp   $01]  1 is the min screen x
	jne	l_077d                             	| [$076f: jr   nz,$077D]
* set x to $F0, move to the screen to the left
	move.b	#0xF0,d0                        	| [$0771: ld   a,$F0]
	move.b	d0,(0x02,a2)                    	| [$0773: ld   (ix+$02),a]
 * decrease screen index
		| [$0776: ld   a,(current_character_screen_index_6098)]
	subq.b	#1,current_character_screen_index_6098                           	| [$0779: dec  a]
		| [$077a: ld   (current_character_screen_index_6098),a]
l_077d:
	clr.b	d0                               	| [$077d: xor  a]
	move.l	guard_struct_pointer_6093,a3	| [$077e: ld   iy,(guard_struct_pointer_6093)]
 	move.b	d0,(A3)                    	| [$0782: ld   (iy+$00),a]
	move.w	(sp)+,d0                        	| [$0785: pop  af]
	rts                                    	| [$0786: ret]
l_0787:
	                               	| [$0787: xor  a]
	clr.b	player_in_wagon_1_601C       	| [$0788: ld   (player_in_wagon_1_601C),a]
	clr.b	player_in_wagon_2_601D       	| [$078b: ld   (player_in_wagon_2_601D),a]
	clr.b	player_in_wagon_3_601E       	| [$078e: ld   (player_in_wagon_3_601E),a]
	rts                                    	| [$0791: ret]
handle_player_walk_0792:
	lea	player_in_wagon_1_601C,a0      	| [$0792: ld   hl,player_in_wagon_1_601C]
	lea	wagon_data_658A,a2             	| [$0795: ld   ix,wagon_data_658A]
	lea	player_x_6582,a3               	| [$0799: ld   iy,player_x_6582]
	* useless set to D3 as routine has been heavily simplified from bagman
	move.w	#0x0004,d3                      	| [$079d: ld   de,$0004] 4
	move.b	(a0),d0                         	| [$07a0: ld   a,(hl)]
	cmp.b	#0x01,d0                         	| [$07a1: cp   $01]
	jeq	l_07a6                             	| [$07a3: jr   z,$07A6]
	rts                                    	| [$07a5: ret]
l_07a6:
	move.b	#0x01,d0                        	| [$07a6: ld   a,$01]
	move.b	d0,unknown_6030                 	| [$07a8: ld   (unknown_6030),a]
	move.b	player_input_6026,d0            	| [$07ab: ld   a,(player_input_6026)]
	and.b	#0x08,d0                         	| [$07ae: and  $08]
	cmp.b	#0x08,d0                         	| [$07b0: cp   $08]
	bne.b	0f                               	| [...]
	jbsr	l_07c9                            	| [$07b2: call z,$07C9]
0:
	move.b	player_input_6026,d0            	| [$07b5: ld   a,(player_input_6026)]
	and.b	#0x10,d0                         	| [$07b8: and  $10]
	cmp.b	#0x10,d0                         	| [$07ba: cp   $10]
	bne.b	0f                               	| [...]
	jbsr	l_07cf                            	| [$07bc: call z,$07CF]
0:
	move.b	#0x01,d0                        	| [$07bf: ld   a,$01]
	move.b	d0,player_in_wagon_flag_6029    	| [$07c1: ld   (player_in_wagon_flag_6029),a]
	subq.b	#1,d0                           	| [$07c4: dec  a]
	move.b	d0,player_in_wagon_flag_13_602F 	| [$07c5: ld   (player_in_wagon_flag_13_602F),a]
	rts                                    	| [$07c8: ret]
l_07c9:
	move.b	#0x01,d0                        	| [$07c9: ld   a,$01]
	move.b	d0,unknown_602D                 	| [$07cb: ld   (unknown_602D),a]
	rts                                    	| [$07ce: ret]
l_07cf:
	move.b	#0x01,d0                        	| [$07cf: ld   a,$01]
	move.b	d0,unknown_602E                 	| [$07d1: ld   (unknown_602E),a]
	rts                                    	| [$07d4: ret]
l_07d5:
	move.b	unknown_6030,d0                 	| [$07d5: ld   a,(unknown_6030)]
	cmp.b	#0x01,d0                         	| [$07d8: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$07da: ret  nz] [...]
0:
	move.b	unknown_602D,d0                 	| [$07db: ld   a,(unknown_602D)]
	cmp.b	#0x01,d0                         	| [$07de: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_0810                            	| [$07e0: call z,$0810]
0:
	move.b	unknown_602E,d0                 	| [$07e3: ld   a,(unknown_602E)]
	cmp.b	#0x01,d0                         	| [$07e6: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_0820                            	| [$07e8: call z,$0820]
0:
	move.b	player_in_wagon_flag_13_602F,d0 	| [$07eb: ld   a,(player_in_wagon_flag_13_602F)]
	addq.b	#1,d0                           	| [$07ee: inc  a]
	cmp.b	#0x04,d0                         	| [$07ef: cp   $04]
	jeq	l_07f7                             	| [$07f1: jr   z,$07F7]
	move.b	d0,player_in_wagon_flag_13_602F 	| [$07f3: ld   (player_in_wagon_flag_13_602F),a]
	rts                                    	| [$07f6: ret]
 *  kind of reset but called when???
l_07f7:
	                               	| [$07f7: xor  a]
	clr.b	unknown_602D                 	| [$07f8: ld   (unknown_602D),a]
	clr.b	unknown_602E                 	| [$07fb: ld   (unknown_602E),a]
	clr.b	unknown_6030                 	| [$07fe: ld   (unknown_6030),a]
	clr.b	player_in_wagon_flag_6029    	| [$0801: ld   (player_in_wagon_flag_6029),a]
	clr.b	player_death_flag_6025       	| [$0804: ld   (player_death_flag_6025),a]
	jbsr	l_0787                            	| [$0807: call $0787]
	move.b	#0x20,d0                        	| [$080a: ld   a,$20]
	move.b	d0,player_struct_6580           	| [$080c: ld   (player_struct_6580),a]
	rts                                    	| [$080f: ret]
l_0810:
	jbsr	l_0830                            	| [$0810: call $0830]
	jbsr	l_0870                            	| [$0813: call $0870]
	move.b	(A3),d0                    	| [$0816: ld   a,(iy+$00)]
	subq.b	#3,d0                           	| [$0819: dec  a] * 3
	move.b	d0,(A3)                    	| [$081c: ld   (iy+$00),a]
	rts                                    	| [$081f: ret]
l_0820:
	jbsr	l_0830                            	| [$0820: call $0830]
	jbsr	l_0853                            	| [$0823: call $0853]
	move.b	(A3),d0                    	| [$0826: ld   a,(iy+$00)]
	addq.b	#3,d0                           	| [$0829: inc  a] * 3
	move.b	d0,(A3)                    	| [$082c: ld   (iy+$00),a]
	rts                                    	| [$082f: ret]
l_0830:
	LEA_ROM	       0x084F,a1                      	| [$0830: ld   de,$084F]
	moveq	#0,d0
	move.b	player_in_wagon_flag_13_602F,d0 	| [$0833: ld   a,(player_in_wagon_flag_13_602F)]
	cmp.b	#0x04,d0                         	| [$0836: cp   $04]
	bne.b	0f                               	| [...]
	rts                                    	| [$0838: ret  z] [...]
0:
	add.w	d0,a1                            	| [$0839: add  a,e]
	                           	| [$083a: ld   e,a]
	                           	| [$083b: ld   a,d]

	                           	| [$083e: ld   d,a]
	move.b	(a1),d0                         	| [$083f: ld   a,(de)]
	move.b	d0,d1                           	| [$0840: ld   b,a]
	move.b	player_struct_6580,d0           	| [$0841: ld   a,(player_struct_6580)]
	and.b	#0x08,d0                         	| [$0844: and  $08]
	or.b	d1,d0                             	| [$0846: or   b]
	move.b	d0,player_struct_6580           	| [$0847: ld   (player_struct_6580),a]
	clr.b	d0                               	| [$084a: xor  a]
	move.b	d0,player_death_flag_6025       	| [$084b: ld   (player_death_flag_6025),a]
	rts                                    	| [$084e: ret]

l_0853:
	move.b	#0x20,d1                        	| [$0853: ld   b,$20]
	movem.w	d1/d2,-(sp)                    	| [$0855: push bc]
	move.w	player_logical_address_6009,d6	| [$0856: ld   hl,(player_logical_address_6009)]

	jbsr	character_can_walk_right_0D71     	| [$0859: call character_can_walk_right_0D71]
	move.b	way_clear_flag_600B,d0          	| [$085c: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$085f: cp   $02]
	jne	l_0865                             	| [$0861: jr   nz,$0865]

	movem.w	(sp)+,d1/d2                    	| [$0863: pop  bc]
	rts                                    	| [$0864: ret]
l_0865:
	jbsr	is_invincible
	bne.b	0f
	move.b	#0x01,d0                        	| [$0865: ld   a,$01]
	move.b	d0,player_death_flag_6025       	| [$0867: ld   (player_death_flag_6025),a]
0:
											| [$086a: dec  a]
	clr.b	player_in_wagon_flag_6029    	| [$086b: ld   (player_in_wagon_flag_6029),a]

	movem.w	(sp)+,d1/d2                    	| [$086e: pop  bc]
	rts                                    	| [$086f: ret]
l_0870:
	move.b	#0x20,d1                        	| [$0870: ld   b,$20]
l_0872:
	movem.w	d1/d2,-(sp)                    	| [$0872: push bc]
	move.w	player_logical_address_6009,d6	| [$0873: ld   hl,(player_logical_address_6009)]
	jbsr	character_can_walk_left_0DCC      	| [$0876: call character_can_walk_left_0DCC]
	move.b	way_clear_flag_600B,d0          	| [$0879: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$087c: cp   $02]
	jne	l_0865                             	| [$087e: jr   nz,$0865]

	movem.w	(sp)+,d1/d2                    	| [$0880: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_0872                             	| [$0881: djnz $0872]
	rts                                    	| [$0883: ret]

player_grip_handle_test_0884:

	move.w	player_logical_address_6009,d6	| [$0884: ld   hl,(player_logical_address_6009)]
	bne.b	0f
	* jotd: can be null at times!
	rts
0:
	subq.w	#3,d6                           	| [$0887: dec  hl] * 3
	bsr		read_rom                         	| [$088a: ld   a,(hl)] check what's above player head on screen
	cmp.b	#0xDC,d0                         	| [$088b: cp   $DC]
	jeq	l_0892                             	| [$088d: jr   z,$0892]
	cmp.b	#0x0B,d0                         	| [$088f: cp   $0B]
	beq.b	0f                               	| [...]
	rts                                    	| [$0891: ret  nz] [...]
0:
 * handle detected ($DC or $0B)
l_0892:
	move.b	player_gripping_handle_602A,d0  	| [$0892: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$0895: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$0897: ret  z] [...]
0:
	move.b	#0x01,d0                        	| [$0898: ld   a,$01]
	lea	player_in_wagon_3_601E,a0      	| [$089a: ld   hl,player_in_wagon_3_601E]
	move.w	#0x03,d1                        	| [$089d: ld   bc,$0003] 3
	                        	| [$089d: ld   bc,$0003] 3
	jbsr	cpdr                              	| [$08a0: cpdr]

	bne.b	0f                               	| [...]
	rts                                    	| [$08a2: ret  z] [...]
0:
	jbsr	test_pickup_flag_F4E3             	| [$08a3: call test_pickup_flag_F4E3]
	move.b	d1,d0                           	| [$08a6: ld   a,b]
	cmp.b	#0x01,d0                         	| [$08a7: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$08a9: ret  nz] [...]
0:
	move.b	#0x01,d0                        	| [$08aa: ld   a,$01]
	move.b	d0,player_controls_frozen_6028  	| [$08ac: ld   (player_controls_frozen_6028),a]
	move.b	d0,player_gripping_handle_602A  	| [$08af: ld   (player_gripping_handle_602A),a]
	subq.b	#1,d0                           	| [$08b2: dec  a]
	move.b	d0,unknown_602B                 	| [$08b3: ld   (unknown_602B),a]
	move.b	#0x01,d0                        	| [$08b6: ld   a,$01]
	move.b	d0,unknown_6275                 	| [$08b8: ld   (unknown_6275),a]
	* play "ho hisse" sample
	move.w	#PLAYER_GRABS_HANDLE_SND,d0                      	| [$08bb: ld   hl,$D963]
	jbsr	start_a_sound                  	| [$08be: call play_sample_EC84]
	rts                                    	| [$08c1: ret]
l_08c2:
	move.b	player_gripping_handle_602A,d0  	| [$08c2: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$08c5: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$08c7: ret  nz] [...]
0:
	LEA_ROM	       0x08E3,a1                      	| [$08c8: ld   de,l_08E3]
	moveq	#0,d0
	move.b	unknown_602B,d0                 	| [$08cb: ld   a,(unknown_602B)]
	cmp.b	#0x05,d0                         	| [$08ce: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$08d0: ret  z] [...]
0:
                            	| [$08d1: add  a,e]
                           	| [$08d2: ld   e,a]
                           	| [$08d3: ld   a,d]

                           	| [$08d6: ld   d,a]
	move.b	(a1,d0.w),d0                         	| [$08d7: ld   a,(de)]
	move.b	d0,player_struct_6580           	| [$08d8: ld   (player_struct_6580),a]
	move.b	unknown_602B,d0                 	| [$08db: ld   a,(unknown_602B)]
	addq.b	#1,d0                           	| [$08de: inc  a]
	move.b	d0,unknown_602B                 	| [$08df: ld   (unknown_602B),a]
	rts                                    	| [$08e2: ret]
l_08E3:
	.byte	0x1C
	.byte	0x1C
	.byte	0x1C
	.byte	0x1C
	.byte	0x1B
	.align	2

l_08e8:
	move.b	player_gripping_handle_602A,d0  	| [$08e8: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$08eb: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$08ed: ret  nz] [...]
0:
	jbsr	test_pickup_flag_F4E3             	| [$08ee: call test_pickup_flag_F4E3]
	move.b	d1,d0                           	| [$08f1: ld   a,b]
	                         	| [$08f2: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$08f4: ret  z] [...]
0:
	                               	| [$08f5: xor  a]
	clr.b	player_gripping_handle_602A  	| [$08f6: ld   (player_gripping_handle_602A),a]
	clr.b	player_controls_frozen_6028  	| [$08f9: ld   (player_controls_frozen_6028),a]
	clr.b	player_in_wagon_flag_6029    	| [$08fc: ld   (player_in_wagon_flag_6029),a]
	clr.b	unknown_602B                 	| [$08ff: ld   (unknown_602B),a]
	clr.b	pickup_flag_6160             	| [$0902: ld   (pickup_flag_6160),a]
	move.b	#0x19,d0                        	| [$0905: ld   a,$19]
	move.b	d0,player_struct_6580           	| [$0907: ld   (player_struct_6580),a]
	move.b	#0x01,d0                        	| [$090a: ld   a,$01]
	move.b	d0,unknown_602C                 	| [$090c: ld   (unknown_602C),a]
	rts                                    	| [$090f: ret]
l_0910:
	move.b	player_gripping_handle_602A,d0  	| [$0910: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$0913: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$0915: ret  z] [...]
0:
	move.b	player_death_flag_6025,d0       	| [$0916: ld   a,(player_death_flag_6025)]
	cmp.b	#0x01,d0                         	| [$0919: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$091b: ret  z] [...]
0:
	move.b	player_y_6583,d0                	| [$091c: ld   a,(player_y_6583)]
	addq.b	#1,d0                           	| [$091f: inc  a]
	lea	wagon_data_658A,a2             	| [$0920: ld   ix,wagon_data_658A]
	lea	player_in_wagon_1_601C,a3      	| [$0924: ld   iy,player_in_wagon_1_601C]
	move.w	#0x0004,d3                      	| [$0928: ld   de,$0004] 4
	jbsr	l_092f                            	| [$092b: call $092F]
	rts                                    	| [$092e: ret]
l_092f:
	cmp.b	(0x01,a2),d0                     	| [$092f: cp   (ix+$01)]
	jne	l_097b                             	| [$0932: jr   nz,$097B]
	move.w	d0,-(sp)                        	| [$0934: push af]
	move.b	#0x08,d1                        	| [$0935: ld   b,$08]
	move.b	player_x_6582,d0                	| [$0937: ld   a,(player_x_6582)]
	subq.b	#0x05,d0                        	| [$093a: sub  $05]
l_093c:
	addq.b	#1,d0                           	| [$093c: inc  a]
	move.w	d0,-(sp)                        	| [$093d: push af]
	cmp.b	(A2),d0                     	| [$093e: cp   (ix+$00)]
	jeq	l_0972                             	| [$0941: jr   z,$0972]
	move.w	(sp)+,d0                        	| [$0943: pop  af]
	subq.b	#1,d1                           	| [...]
	jne	l_093c                             	| [$0944: djnz $093C]
	jra	l_0975                             	| [$0946: jr   $0975]
l_0948:
	move.b	(A3),d0                    	| [$0948: ld   a,(iy+$00)]
	                         	| [$094b: cp   $00]
	jne	l_0966                             	| [$094d: jr   nz,$0966]
	* not in wagon, just dropped in the wagon
	move.l	a0,-(sp)                        	| [$094f: push hl]

	move.l	a2,-(sp)                        	| [$0950: push ix]
	* add 100 points when player lands in wagon
	move.w	#0x0100,d6                      	| [$0952: ld   hl,$0100]
	jbsr	add_to_score_5C90                 	| [$0955: call add_to_score_5C90]
	move.w	#FALL_IN_WAGON_SND,d0                      	| [$0958: ld   hl,$D969]
	jbsr	start_a_sound                  	| [$095b: call play_sample_EC84]
	move.b	#0x01,d0                        	| [$095e: ld   a,$01]
	move.b	d0,unknown_6275                 	| [$0960: ld   (unknown_6275),a]
	move.l	(sp)+,a2                        	| [$0963: pop  ix]
	move.l	(sp)+,a0                        	| [$0965: pop  hl]
l_0966:
	* player in wagon
	move.b	#0x01,d0                        	| [$0966: ld   a,$01]
	move.b	d0,(A3)                    	| [$0968: ld   (iy+$00),a]
	move.b	#0x1A,d0                        	| [$096b: ld   a,$1A]
	move.b	d0,player_struct_6580           	| [$096d: ld   (player_struct_6580),a]
	move.w	(sp)+,d0                        	| [$0970: pop  af]
	rts                                    	| [$0971: ret]
l_0972:
	move.w	(sp)+,d0                        	| [$0972: pop  af]
	jra	l_0948                             	| [$0973: jr   $0948]
l_0975:
	                               	| [$0975: xor  a]
	clr.b	(A3)                    	| [$0976: ld   (iy+$00),a]
	move.w	(sp)+,d0                        	| [$0979: pop  af]
	rts                                    	| [$097a: ret]
l_097b:
	                        	| [$097b: push af]
	                               	| [$097c: xor  a]
	clr.b	(A3)                    	| [$097d: ld   (iy+$00),a]
	                        	| [$0980: pop  af]
	rts                                    	| [$0981: ret]
compute_wagon_start_values_0982:
	lea	unknown_6019,a2                	| [$0982: ld   ix,unknown_6019]
	lea	unknown_658B,a3                	| [$0986: ld   iy,unknown_658B]
	move.b	#0xC1,d0                        	| [$098a: ld   a,$C1]
	exg	d0,d7                              	| [$098c: ex   af,af']

	jbsr	l_0991                            	| [$098d: call $0991]
	rts                                    	| [$0990: ret]
l_0991:
	move.b	player_screen_600D,d0           	| [$0991: ld   a,(player_screen_600D)]
	subq.b	#1,d0                           	| [$0994: dec  a]
	cmp.b	(A2),d0                     	| [$0995: cp   (ix+$00)]
	jne	l_09a0                             	| [$0998: jp   nz,$09A0]
	exg	d0,d7                              	| [$099b: ex   af,af']

	move.b	d0,(A3)                    	| [$099c: ld   (iy+$00),a]
	rts                                    	| [$099f: ret]
 * not in current player screen: set coords to 255
l_09a0:
	st.b	d0                                	| [$09a0: ld   a,$FF]
	move.b	d0,(A3)                    	| [$09a2: ld   (iy+$00),a]
	rts                                    	| [$09a5: ret]

* move the only wagon of the game!
* bagman has 3 wagons, the follow up only has one! maybe because
* of lack of available sprites introduced by shot sprite?
move_wagon_09A6:
	lea	wagon_direction_array_6016,a2  	| [$09a6: ld   ix,wagon_direction_array_6016]
	LEA_ROM	       0x0A3C,a3                      	| [$09aa: ld   iy,$0A3C]
	lea	wagon_data_658A,a0             	| [$09ae: ld   hl,wagon_data_658A]
	jbsr	l_09b5                            	| [$09b1: call $09B5]
	rts                                    	| [$09b4: ret]
l_09b5:
	tst.b	(A2)                    	| [$09b5: ld   a,(ix+$00)]
	                         	| [$09b8: cp   $00]
	jne	l_09fd                             	| [$09ba: jp   nz,$09FD]
	* 0: to the left
	* don't optimize into subq.b	#1,(a0) we need the value!
	move.b	(a0),d0                         	| [$09bd: ld   a,(hl)]
	subq.b	#1,d0                           	| [$09be: dec  a]
	move.b	d0,(a0)                         	| [$09bf: ld   (hl),a]
	move.w	d0,-(sp)                        	| [$09c0: push af]
	* check if this wagon carries player
	tst.b	(0x06,a2)                    	| [$09c1: ld   a,(ix+$06)]
	                         	| [$09c4: cp   $00]
	jeq	l_09db                             	| [$09c6: jr   z,$09DB]
                	| [$09c8: ld   a,(player_x_6582)]
	* carries player: move player left too!
	subq.b	#1,player_x_6582                           	| [$09cb: dec  a]
	                	| [$09cc: ld   (player_x_6582),a]
	move.b	unknown_6295,d0                 	| [$09cf: ld   a,(unknown_6295)]
	                         	| [$09d2: cp   $00]
	jne	l_09db                             	| [$09d4: jr   nz,$09DB]
	move.b	#0x1A,d0                        	| [$09d6: ld   a,$1A]
	move.b	d0,player_struct_6580           	| [$09d8: ld   (player_struct_6580),a]
l_09db:
	move.w	(sp)+,d0                        	| [$09db: pop  af]
	* check against limits
	cmp.b	(0x02,a3),d0                     	| [$09dc: cp   (iy+$02)]
	jeq	l_09e8                             	| [$09df: jp   z,$09E8]
	tst.b	d0                         	| [$09e2: cp   $00]
	jeq	l_09f5                             	| [$09e4: jp   z,$09F5]
	rts                                    	| [$09e7: ret]
l_09e8:
	move.b	(0x03,a2),d0                    	| [$09e8: ld   a,(ix+$03)]
	cmp.b	(0x03,a3),d0                     	| [$09eb: cp   (iy+$03)]
	beq.b	0f                               	| [...]
	rts                                    	| [$09ee: ret  nz] [...]
0:
	move.b	#0x01,d0                        	| [$09ef: ld   a,$01]
	move.b	d0,(A2)                    	| [$09f1: ld   (ix+$00),a]
	rts                                    	| [$09f4: ret]
l_09f5:
	                    	| [$09f5: ld   a,(ix+$03)]
	subq.b	#1,(0x03,a2)                           	| [$09f8: dec  a]
	                    	| [$09f9: ld   (ix+$03),a]
	rts                                    	| [$09fc: ret]
l_09fd:
	* to the right
	* don't optimize into addq.b	#1,(a0) we need the value!
	move.b	(a0),d0                         	| [$09fd: ld   a,(hl)]
	addq.b	#1,d0                           	| [$09fe: inc  a]
	move.b	d0,(a0)                         	| [$09ff: ld   (hl),a]
	move.w	d0,-(sp)                        	| [$0a00: push af]
	move.b	(0x06,a2),d0                    	| [$0a01: ld   a,(ix+$06)]
	                         	| [$0a04: cp   $00]
	jeq	l_0a1b                             	| [$0a06: jr   z,$0A1B]
	addq.b	#1,player_x_6582                	| [$0a08: ld   a,(player_x_6582)]
	                          	| [$0a0b: inc  a]
	               	| [$0a0c: ld   (player_x_6582),a]
	move.b	unknown_6295,d0                 	| [$0a0f: ld   a,(unknown_6295)]
	                         	| [$0a12: cp   $00]
	jne	l_0a1b                             	| [$0a14: jr   nz,$0A1B]
	move.b	#0x1A,d0                        	| [$0a16: ld   a,$1A]
	move.b	d0,player_struct_6580           	| [$0a18: ld   (player_struct_6580),a]
l_0a1b:
	move.w	(sp)+,d0                        	| [$0a1b: pop  af]
	cmp.b	(A3),d0                     	| [$0a1c: cp   (iy+$00)]
	jeq	l_0a27                             	| [$0a1f: jp   z,$0A27]
	cmp.b	#0xFF,d0                         	| [$0a22: cp   $FF]
	jeq	l_0a34                             	| [$0a24: jr   z,$0A34]
	rts                                    	| [$0a26: ret]
l_0a27:
	move.b	(0x03,a2),d0                    	| [$0a27: ld   a,(ix+$03)]
	cmp.b	(0x01,a3),d0                     	| [$0a2a: cp   (iy+$01)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0a2d: ret  nz] [...]
0:
	* change direction
	clr.b	(A2)                              	| [$0a2e: ld   a,$00]
	                    	| [$0a30: ld   (ix+$00),a]
	rts                                    	| [$0a33: ret]
l_0a34:
	addq.b	#1,(0x03,a2)                     	| [$0a34: ld   a,(ix+$03)]
	                           	| [$0a37: inc  a]
	                   	| [$0a38: ld   (ix+$03),a]
	rts                                    	| [$0a3b: ret]

* < A0: player_in_elevator_4_6014
* < A2: player structure
handle_elevator_stops_0A40:
	tst.b	elevator_not_moving_screen_4_6012     	| [$0a40: ld   a,(elevator_not_moving_screen_4_6012)]
	                         	| [$0a43: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$0a45: ret  z] [...]
0:
	* do NOT optimize the add, we need the value
	move.b	elevator_timer_screen_4_6011,d0	| [$0a46: ld   a,(elevator_timer_screen_4_6011)]
	addq.b	#1,d0                           	| [$0a49: inc  a]
	move.b	d0,elevator_timer_screen_4_6011	| [$0a4a: ld   (elevator_timer_screen_4_6011),a]
	cmp.b	#0x5F,d0                         	| [$0a4d: cp   $5F]  < $5F:	 don't move the elevator
	beq.b	0f                               	| [...]
	rts                                    	| [$0a4f: ret  nz] [...]
0:
 * move the elevator down
	                               	| [$0a50: xor  a]
	clr.b	elevator_timer_screen_4_6011	| [$0a51: ld   (elevator_timer_screen_4_6011),a]
	clr.b	elevator_not_moving_screen_4_6012     	| [$0a54: ld   (elevator_not_moving_screen_4_6012),a]
	                           	| [$0a57: inc  a]
	move.b	#1,elevator_4_going_down_6015                 	| [$0a58: ld   (elevator_4_going_down_6015),a]
	LEA_ROM	       0x0A72,a3                      	| [$0a5b: ld   iy,$0A72]
	move.b	#0x09,d1                        	| [$0a5f: ld   b,$09]
	* test player X against elevator X (0xC4 <= PX <= 0xCC)
	* (would have been faster with 2 cmps...)
* < A3: range of X values to test, larger when character is on a floor
* (which will kill the character if not inside enough)
test_against_x_range_0a61:
	move.b	(0x02,a2),d0                    	| [$0a61: ld   a,(ix+$02)]
	cmp.b	(A3)+,d0                     	| [$0a64: cp   (iy+$00)]
	jeq	handle_player_in_elevator_0a7b                             	| [$0a67: jr   z,$0A7B]
	                           	| [$0a69: inc  iy]
 
	subq.b	#1,d1                           	| [...]
	jne	test_against_x_range_0a61                             	| [$0a6b: djnz $0A61]
player_not_in_elevator_0a6d:
	clr.b	d0                               	| [$0a6d: xor  a]
	move.b	d0,(a0)                         	| [$0a6e: ld   (hl),a]
	                          	| [$0a6f: dec  hl]
	* clears player_almost_in_elevator_4_6013 too
	move.b	d0,-(a0)                         	| [$0a70: ld   (hl),a]
	rts                                    	| [$0a71: ret]


* player entering/is inside in the elevator
* < A2: character structure
* < A0: player_in_elevator_4_6014
handle_player_in_elevator_0a7b:
	move.b	elevator_y_screen_4_6587,d0	| [$0a7b: ld   a,(elevator_y_screen_4_6587)]
	* no effect : removed								| [$09f4: sub  $00]	
	* elevator same Y as character?
	
	cmp.b	(0x03,a2),d0                     	| [$0a80: cp   (ix+$03)]
	jeq	l_0a93                             	| [$0a83: jr   z,$0A93]
	* small tolerance +1/-1
	subq.b	#0x01,d0                        	| [$0a85: sub  $01]
	cmp.b	(0x03,a2),d0                     	| [$0a87: cp   (ix+$03)]
	jeq	l_0a93                             	| [$0a8a: jr   z,$0A93]
	addq.b	#0x02,d0                        	| [$0a8c: add  a,$02]
	cmp.b	(0x03,a2),d0                     	| [$0a8e: cp   (ix+$03)]
	jne	player_not_in_elevator_0a6d                             	| [$0a91: jr   nz,$0A6D]
l_0a93:
	move.b	current_character_screen_index_6098,d0	| [$0a93: ld   a,(current_character_screen_index_6098)]
	cmp.b	#0x04,d0                         	| [$0a96: cp   $04]
	jne	player_not_in_elevator_0a6d                             	| [$0a98: jr   nz,$0A6D]
	tst.b	fatal_fall_height_reached_604E	| [$0a9a: ld   a,(fatal_fall_height_reached_604E)]
	                         	| [$0a9d: cp   $00]
	jeq	l_0aab                             	| [$0a9f: jr   z,$0AAB]
* player just fell into the elevator
* check if hl is still pointing on player_in_elevator_4_6014, if it does (which seems
* to be always true as routine called with this value in a0), kill player
	                           	| [$0aa1: ld   a,l]
*	cmp.l	#player_in_elevator_4_6014,a0                         	| [$0aa2: cp   $14]
*	jne	l_0aab                             	| [$0aa4: jr   nz,$0AAB]
	jbsr		is_invincible
	bne.b	l_0aab
	move.b	#0x01,d0                        	| [$0aa6: ld   a,$01]
	move.b	d0,player_death_flag_6025       	| [$0aa8: ld   (player_death_flag_6025),a]
l_0aab:
	* validate player in the elevator (why 2 flags??)
	move.b	#0x01,d0                        	| [$0aab: ld   a,$01]
	move.b	d0,(a0)                         	| [$0aad: ld   (hl),a]
	                           	| [$0aae: dec  hl]

	move.b	d0,-(a0)                         	| [$0aaf: ld   (hl),a]
	rts                                    	| [$0ab0: ret]

* < A0: character in elevator flag
is_character_sufficiently_aligned_with_elevator_0ab1:
	move.b	current_character_screen_index_6098,d0	| [$0ab1: ld   a,(current_character_screen_index_6098)]
	cmp.b	#0x04,d0                         	| [$0ab4: cp   $04]
	jne	l_0ac6                             	| [$0ab6: jr   nz,$0AC6]
	* wide range of X values to compare to
	LEA_ROM	       0x0AC9,a3                      	| [$0ab8: ld   iy,$0AC9]
	move.b	#0x12,d1                        	| [$0abc: ld   b,$12]
	* save/restore "character in elevator" flag so test_against_x_range_0a61
	* has no effect on it
	move.b	(a0),d0                         	| [$0abe: ld   a,(hl)]
	move.w	d0,-(sp)                        	| [$0abf: push af]
	jbsr	test_against_x_range_0a61                            	| [$0ac0: call $0A61]
	move.w	(sp)+,d0                        	| [$0ac3: pop  af]
	move.b	d0,(a0)                         	| [$0ac4: ld   (hl),a]
	rts                                    	| [$0ac5: ret]
l_0ac6:
	clr.b	d0                               	| [$0ac6: xor  a]
	move.b	d0,(a0)                         	| [$0ac7: ld   (hl),a]
	rts                                    	| [$0ac8: ret]


* < a2: player struct (6580)
* < a3: player_in_elevator_4_6014
handle_elevator_screen_4_0ADB:
	tst.b	elevator_not_moving_screen_4_6012     	| [$0adb: ld   a,(elevator_not_moving_screen_4_6012)]
	                         	| [$0ade: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$0ae0: ret  nz] [...]
0:
	lea	elevator_y_screen_4_6587,a0	| [$0ae1: ld   hl,elevator_y_screen_4_6587]
	move.b	elevator_dir_screen_4_6010,d0	| [$0ae4: ld   a,(elevator_dir_screen_4_6010)]
	cmp.b	#0x01,d0                         	| [$0ae7: cp   $01]
	jne	l_0b44                             	| [$0ae9: jr   nz,$0B44]
	move.b	(a0),d0                         	| [$0aeb: ld   a,(hl)]
	cmp.b	#0x1A,d0                         	| [$0aec: cp   $1A]
	jcs	elevator_4_at_the_top_0b3a                             	| [$0aee: jr   c,$0B3A]
	move.b	elevator_4_going_down_6015,d0                 	| [$0af0: ld   a,(elevator_4_going_down_6015)]
	cmp.b	#0x01,d0                         	| [$0af3: cp   $01]
	jeq	l_0b03                             	| [$0af5: jp   z,$0B03]
	* 2 stops in the middle
	move.b	(a0),d0                         	| [$0af8: ld   a,(hl)]
	cmp.b	#0x72,d0                         	| [$0af9: cp   $72]
	jeq	elevator_4_stop_0b7c                             	| [$0afb: jp   z,$0B7C]
	cmp.b	#0xC2,d0                         	| [$0afe: cp   $C2]
	jeq	elevator_4_stop_0b7c                             	| [$0b00: jp   z,$0B7C]
l_0b03:
	subq.b	#1,(a0)                         	| [$0b03: dec  (hl)]
	clr.b	d0                               	| [$0b04: xor  a]
	move.b	d0,elevator_4_going_down_6015                 	| [$0b05: ld   (elevator_4_going_down_6015),a]
	move.b	(A3),d0                    	| [$0b08: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$0b0b: cp   $01]
	jne	l_0b1e                             	| [$0b0d: jr   nz,$0B1E]
	* player is in elevator 4: "elevate" player
	subq.b	#1,(0x03,a2)                    	| [$0b0f: ld   a,(ix+$03)]	                           	| [$0b12: dec  a]
	                    	| [$0b13: ld   (ix+$03),a]
	move.b	holds_barrow_61C7,d0            	| [$0b16: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$0b19: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	lose_barrow_eb9e                            	| [$0b1b: call z,$EB9E]
0:
l_0b1e:
* elevator lifts guard 1 (bad programming practice, offsetting
* guard struct from player struct!!) better to use absolute addresses
* as code for guard 1 and guard 2 is copy/pasted anyway :)
	move.b	guard_1_in_elevator_603B,d0                    	| [$0b1e: ld   a,(iy+$27)]
	cmp.b	#0x01,d0                         	| [$0b21: cp   $01]
	jne	l_0b2c                             	| [$0b23: jr   nz,$0B2C]
	
	subq.b	#1,guard_1_y_6597                    	| [$0b25: ld   a,(ix+$17)]
                           	| [$0b28: dec  a]
                    	| [$0b29: ld   (ix+$17),a]
l_0b2c:
	move.b	guard_2_in_elevator_607B,d0                    	| [$0b2c: ld   a,(iy+$67)]
	cmp.b	#0x01,d0                         	| [$0b2f: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$0b31: ret  nz] [...]
0:
* elevator lifts guard 2
	                    	| [$0b32: ld   a,(ix+$1b)]
	subq.b	#1,guard_2_y_659B                           	| [$0b35: dec  a]
	                    	| [$0b36: ld   (ix+$1b),a]
	rts                                    	| [$0b39: ret]
elevator_4_at_the_top_0b3a:
	                              	| [$0b3a: ld   a,$00]
	clr.b	elevator_dir_screen_4_6010	| [$0b3c: ld   (elevator_dir_screen_4_6010),a]
	                           	| [$0b3f: inc  a]
	move.b	#1,elevator_not_moving_screen_4_6012     	| [$0b40: ld   (elevator_not_moving_screen_4_6012),a]
	rts                                    	| [$0b43: ret]
l_0b44:
	move.b	(a0),d0                         	| [$0b44: ld   a,(hl)]
	cmp.b	#0xE1,d0                         	| [$0b45: cp   $E1]
	jcc	l_0b77                             	| [$0b47: jr   nc,$0B77]
	addq.b	#1,(a0)                         	| [$0b49: inc  (hl)]
	move.b	(A3),d0                    	| [$0b4a: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$0b4d: cp   $01]
	jne	l_0b5b                             	| [$0b4f: jr   nz,$0B5B]
	addq.b	#1,(0x03,a2)                    	| [$0b51: ld   a,(ix+$03)]
		                           	| [$0b54: inc  a]
	                    	| [$0b55: ld   (ix+$03),a]
	jbsr	lose_barrow_eb9e                            	| [$0b58: call $EB9E]
l_0b5b:
	move.b	guard_1_in_elevator_603B,d0                    	| [$0b5b: ld   a,(iy+$27)]
	cmp.b	#0x01,d0                         	| [$0b5e: cp   $01]
	jne	l_0b69                             	| [$0b60: jr   nz,$0B69]
	                    	| [$0b62: ld   a,(ix+$17)]
	addq.b	#1,guard_1_y_6597                           	| [$0b65: inc  a]
	                    	| [$0b66: ld   (ix+$17),a]
l_0b69:
	move.b	guard_2_in_elevator_607B,d0                    	| [$0b69: ld   a,(iy+$67)]
	cmp.b	#0x01,d0                         	| [$0b6c: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$0b6e: ret  nz] [...]
0:
	                    	| [$0b6f: ld   a,(ix+$1b)]
	addq.b	#1,guard_2_y_659B                           	| [$0b72: inc  a]
	                    	| [$0b73: ld   (ix+$1b),a]
	rts                                    	| [$0b76: ret]
l_0b77:
	move.b	#0x01,d0                        	| [$0b77: ld   a,$01]
	move.b	d0,elevator_dir_screen_4_6010	| [$0b79: ld   (elevator_dir_screen_4_6010),a]
elevator_4_stop_0b7c:
	move.b	#0x01,d0                        	| [$0b7c: ld   a,$01]
	move.b	d0,elevator_not_moving_screen_4_6012     	| [$0b7e: ld   (elevator_not_moving_screen_4_6012),a]
	rts                                    	| [$0b81: ret]
l_0b82:
	cmp.b	#0x01,d0                         	| [$0b82: cp   $01]
	jeq	l_0bb8                             	| [$0b84: jr   z,$0BB8]
	move.b	(a0),d0                         	| [$0b86: ld   a,(hl)]
	                         	| [$0b87: cp   $00]
	jeq	l_0bb8                             	| [$0b89: jr   z,$0BB8]
	move.b	d2,d0                           	| [$0b8b: ld   a,c]
	                         	| [$0b8c: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$0b8e: ret  nz] [...]
0:
	* new to sbagman
	move.b	(A2),d0                    	| [$0b8f: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$0b92: and  $80]
	or.b	d1,d0                             	| [$0b94: or   b]
	move.b	d0,(A2)                    	| [$0b95: ld   (ix+$00),a]
	addq.b	#1,(0x03,a2)                    	| [$0b98: inc  (ix+$03)]
	addq.b	#1,(A3)                    	| [$0b9b: inc  (iy+$00)]
	move.b	unknown_61F5,d0                 	| [$0b9e: ld   a,(unknown_61F5)]
	                         	| [$0ba1: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$0ba3: ret  nz] [...]
0:
	move.b	#0x0D,d0                        	| [$0ba4: ld   a,$0D]
	move.b	d0,d1                           	| [$0ba6: ld   b,a]
	move.b	current_character_screen_index_6098,d0	| [$0ba7: ld   a,(current_character_screen_index_6098)]
	cmp.b	d1,d0                            	| [$0baa: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$0bab: ret  nz] [...]
0:
	move.b	#0x01,d0                        	| [$0bac: ld   a,$01]
	move.b	d0,unknown_61F5                 	| [$0bae: ld   (unknown_61F5),a]
	** TODO sound play which sound????
	*LEA_ROM	       0xD9AB,a0                      	| [$0bb1: ld   hl,$D9AB]
	*jbsr	play_sample_EC84                  	| [$0bb4: call play_sample_EC84]
	rts                                    	| [$0bb7: ret]
l_0bb8:
	clr.b	d0                               	| [$0bb8: xor  a]
	move.b	d0,(A3)                    	| [$0bb9: ld   (iy+$00),a]
	rts                                    	| [$0bbc: ret]
cant_walk_in_current_direction_0BBD:
	move.w	(sp)+,d0                        	| [$0bbd: pop  af]
l_0bbe:
	clr.b	d0                               	| [$0bbe: xor  a]
	move.b	d0,unknown_609B                 	| [$0bbf: ld   (unknown_609B),a]
	move.b	d0,(A3)                    	| [$0bc2: ld   (iy+$00),a]
	rts                                    	| [$0bc5: ret]
player_movement_0BC6:
	cmp.b	#1,player_death_flag_6025       	| [$0bc6: ld   a,(player_death_flag_6025)]
	                         	| [$0bc9: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$0bcb: ret  z] [...]
0:
	* player is alive, check if in wagon
	move.b	player_controls_frozen_6028,d0  	| [$0bcc: ld   a,(player_controls_frozen_6028)]
	cmp.b	#0x01,d0                         	| [$0bcf: cp   $01]
	jeq	l_0bbe                             	| [$0bd1: jp   z,$0BBE]
	* new to sbagman
	move.b	player_inertia_after_slide_62D3,d0                 	| [$0bd4: ld   a,(player_inertia_after_slide_62D3)]
	                        	| [$0bd7: cp   $00]
	jeq	l_0be1                             	| [$0bd9: jr   z,$0BE1]
	subq.b	#1,d0                           	| [$0bdb: dec  a]
	move.b	d0,player_inertia_after_slide_62D3                 	| [$0bdc: ld   (player_inertia_after_slide_62D3),a]
	jra	l_0bea                             	| [$0bdf: jr   $0BEA]
l_0be1:
	move.b	player_input_6026,d0            	| [$0be1: ld   a,(player_input_6026)]
	and.b	#0x10,d0                         	| [$0be4: and  $10]
	cmp.b	#0x10,d0                         	| [$0be6: cp   $10]
	jne	l_0bfc                             	| [$0be8: jr   nz,$0BFC]
l_0bea:
	move.w	player_logical_address_6009,d6	| [$0bea: ld   hl,(player_logical_address_6009)]

	jbsr	l_d11c                            	| [$0bed: call $D11C]
	jeq	l_0bfc                             	| [$0bf0: jr   z,$0BFC]
	jbsr	character_can_walk_right_0D71     	| [$0bf2: call character_can_walk_right_0D71]
	move.b	way_clear_flag_600B,d0          	| [$0bf5: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$0bf8: cp   $02]
	jeq	l_0c18                             	| [$0bfa: jr   z,$0C18]
l_0bfc:
	move.b	player_input_6026,d0            	| [$0bfc: ld   a,(player_input_6026)]
	and.b	#0x08,d0                         	| [$0bff: and  $08]
	cmp.b	#0x08,d0                         	| [$0c01: cp   $08]
	jne	l_0bbe                             	| [$0c03: jp   nz,$0BBE]
 * try to move left
	move.w	player_logical_address_6009,d6	| [$0c06: ld   hl,(player_logical_address_6009)]

	jbsr	character_can_walk_left_0DCC      	| [$0c09: call character_can_walk_left_0DCC]
	move.b	way_clear_flag_600B,d0          	| [$0c0c: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$0c0f: cp   $02]
	jne	l_0bbe                             	| [$0c11: jp   nz,$0BBE]
	move.b	#0x80,d1                        	| [$0c14: ld   b,$80]
	jra	l_0c1a                             	| [$0c16: jr   z,$0C1A]

l_0c18:
	clr.b	d1                               	| [$0c18: ld   b,$00]
l_0c1a:
	* new to sbagman
	move.b	unknown_62C1,d0                 	| [$0c1a: ld   a,(unknown_62C1)]
	cmp.b	#0x16,d0                         	| [$0c1d: cp   $16]
	jcc	l_0c26                             	| [$0c1f: jr   nc,$0C26]
	addq.b	#2,d0                           	| [$0c21: inc  a] * 2
	move.b	d0,unknown_62C1                 	| [$0c23: ld   (unknown_62C1),a]
l_0c26:
	move.b	player_animation_frame_6006,d0  	| [$0c26: ld   a,(player_animation_frame_6006)]
	cmp.b	#0x0B,d0                         	| [$0c29: cp   $0B]
	jne	animate_player_1_frame_0C47        	| [$0c2b: jr   nz,animate_player_1_frame_0C47]
	move.b	#0x01,d0                        	| [$0c2d: ld   a,$01]
	move.b	d0,player_animation_frame_6006  	| [$0c2f: ld   (player_animation_frame_6006),a]
	movem.w	d1/d2,-(sp)                    	| [$0c32: push bc]
	jbsr	l_10c2                            	| [$0c33: call $10C2]

	move.w	d6,-(sp)                        	| [$0c36: push hl]

	move.l	a2,-(sp)                        	| [$0c37: push ix]
	movem.w	d3/d4,-(sp)                    	| [$0c39: push de]
	                        	| [$0c39: push de]
	move.w	#0x0010,d6                      	| [$0c3a: ld   hl,$0010] 16
	jbsr	add_to_score_5C90                 	| [$0c3d: call add_to_score_5C90]
                        	| [$0c40: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$0c40: pop  de]
	move.l	(sp)+,a2                        	| [$0c41: pop  ix]
	move.w	(sp)+,d6                        	| [$0c43: pop  hl]

	movem.w	(sp)+,d1/d2                    	| [$0c44: pop  bc]
	jra	l_0c5b                             	| [$0c45: jr   $0C5B]
animate_player_1_frame_0C47:
	addq.b	#1,d0                           	| [$0c47: inc  a]
	move.w	d0,-(sp)                        	| [$0c48: push af]
	move.b	has_bag_6158,d0                 	| [$0c49: ld   a,(has_bag_6158)]
	                         	| [$0c4c: cp   $00]
	jeq	l_0c57                             	| [$0c4e: jr   z,$0C57]
	jbsr	l_0d50                            	| [$0c50: call $0D50]
	tst.b	d0                         	| [$0c53: cp   $00]
	jeq	l_0c90                             	| [$0c55: jr   z,$0C90] skip animation because player has bag
l_0c57:
	move.w	(sp)+,d0                        	| [$0c57: pop  af]
	move.b	d0,player_animation_frame_6006  	| [$0c58: ld   (player_animation_frame_6006),a]
l_0c5b:
	move.b	player_animation_frame_6006,d0  	| [$0c5b: ld   a,(player_animation_frame_6006)]
	lea	player_struct_6580,a0          	| [$0c5e: ld   hl,player_struct_6580]
	cmp.b	#0x02,d0                         	| [$0c61: cp   $02]
	bne.b	0f                               	| [...]
	jbsr	player_tries_to_move_laterally_0CAD	| [$0c63: call z,player_tries_to_move_laterally_0CAD]
0:
	cmp.b	#0x05,d0                         	| [$0c66: cp   $05]
	bne.b	0f                               	| [...]
	jbsr	player_tries_to_move_laterally_0CAD	| [$0c68: call z,player_tries_to_move_laterally_0CAD]
0:
	cmp.b	#0x09,d0                         	| [$0c6b: cp   $09]
	bne.b	0f                               	| [...]
	jbsr	player_tries_to_move_laterally_0CAD	| [$0c6d: call z,player_tries_to_move_laterally_0CAD]
0:
	cmp.b	#0xFF,d0                         	| [$0c70: cp   $FF]
	bne.b	0f                               	| [...]
	rts                                    	| [$0c72: ret  z] [...]
0:
	cmp.b	#0x04,d0                         	| [$0c73: cp   $04]
	bne.b	0f                               	| [...]
	jbsr	player_tries_to_move_laterally_0CAD	| [$0c75: call z,player_tries_to_move_laterally_0CAD]
0:
	cmp.b	#0x06,d0                         	| [$0c78: cp   $06]
	bne.b	0f                               	| [...]
	jbsr	player_tries_to_move_laterally_0CAD	| [$0c7a: call z,player_tries_to_move_laterally_0CAD]
0:
	cmp.b	#0x08,d0                         	| [$0c7d: cp   $08]
	bne.b	0f                               	| [...]
	jbsr	player_tries_to_move_laterally_0CAD	| [$0c7f: call z,player_tries_to_move_laterally_0CAD]
0:
	cmp.b	#0x0A,d0                         	| [$0c82: cp   $0A]
	bne.b	0f                               	| [...]
	jbsr	player_tries_to_move_laterally_0CAD	| [$0c84: call z,player_tries_to_move_laterally_0CAD]
0:
	cmp.b	#0x01,d0                         	| [$0c87: cp   $01]
	jne	l_0c92                             	| [$0c89: jr   nz,$0C92]
	move.b	#0x20,d0                        	| [$0c8b: ld   a,$20]  player sprite index
	or.b	d1,d0                             	| [$0c8d: or   b]
	move.b	d0,(a0)                         	| [$0c8e: ld   (hl),a]
	rts                                    	| [$0c8f: ret]
l_0c90:
	move.w	(sp)+,d0                        	| [$0c90: pop  af]
	rts                                    	| [$0c91: ret]
 * player lateral move
l_0c92:
	cmp.b	#0x03,d0                         	| [$0c92: cp   $03]
	jne	l_0c9b                             	| [$0c94: jr   nz,$0C9B]
	move.b	#0x1F,d0                        	| [$0c96: ld   a,$1F]
	or.b	d1,d0                             	| [$0c98: or   b]
	move.b	d0,(a0)                         	| [$0c99: ld   (hl),a]
	rts                                    	| [$0c9a: ret]
l_0c9b:
	cmp.b	#0x07,d0                         	| [$0c9b: cp   $07]
	jne	l_0ca4                             	| [$0c9d: jr   nz,$0CA4]
	move.b	#0x1E,d0                        	| [$0c9f: ld   a,$1E]
	or.b	d1,d0                             	| [$0ca1: or   b]
	move.b	d0,(a0)                         	| [$0ca2: ld   (hl),a]
	rts                                    	| [$0ca3: ret]
l_0ca4:
	cmp.b	#0xFF,d0                         	| [$0ca4: cp   $FF]
	jne	l_0cac                             	| [$0ca6: jr   nz,$0CAC]
	move.b	#0x80,d0                        	| [$0ca8: ld   a,$80]
	move.b	d0,(a0)                         	| [$0caa: ld   (hl),a]
	rts                                    	| [$0cab: ret]
l_0cac:
	rts                                    	| [$0cac: ret]
player_tries_to_move_laterally_0CAD:
	move.w	d0,-(sp)                        	| [$0cad: push af]
	move.b	d1,d0                           	| [$0cae: ld   a,b]
	cmp.b	#0x80,d0                         	| [$0caf: cp   $80]
	jeq	l_0d0d                             	| [$0cb1: jr   z,$0D0D]
	move.w	player_logical_address_6009,d6	| [$0cb3: ld   hl,(player_logical_address_6009)]
	jbsr	character_can_walk_right_0D71     	| [$0cb6: call character_can_walk_right_0D71]
	move.b	way_clear_flag_600B,d0          	| [$0cb9: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$0cbc: cp   $02]
	jne	cant_walk_in_current_direction_0BBD	| [$0cbe: jp   nz,cant_walk_in_current_direction_0BBD]
	addq.b	#1,player_x_6582                	| [$0cc1: ld   a,(player_x_6582)]
	                           	| [$0cc4: inc  a]
	                	| [$0cc5: ld   (player_x_6582),a]
	move.b	unknown_61F3,d0                 	| [$0cc8: ld   a,(unknown_61F3)]
	                         	| [$0ccb: cp   $00]
	jne	l_0ce9                             	| [$0ccd: jr   nz,$0CE9]
	jbsr	l_0cf3                            	| [$0ccf: call $0CF3]
	move.b	unknown_61F3,d0                 	| [$0cd2: ld   a,(unknown_61F3)]
	                         	| [$0cd5: cp   $00]
	jne	l_0ce9                             	| [$0cd7: jr   nz,$0CE9]
	jbsr	l_0d00                            	| [$0cd9: call $0D00]
	move.b	unknown_61F3,d0                 	| [$0cdc: ld   a,(unknown_61F3)]
	                         	| [$0cdf: cp   $00]
	jne	l_0ce9                             	| [$0ce1: jr   nz,$0CE9]
	move.w	#PLAYER_WALK_SND,d0                      	| [$0ce3: ld   hl,$D999]
	jbsr	start_a_sound                  	| [$0ce6: call play_sample_EC84]
l_0ce9:
	move.b	#0x01,d0                        	| [$0ce9: ld   a,$01]
	move.b	d0,(A3)                    	| [$0ceb: ld   (iy+$00),a]
	move.b	d0,unknown_609B                 	| [$0cee: ld   (unknown_609B),a]
	move.w	(sp)+,d0                        	| [$0cf1: pop  af]
	rts                                    	| [$0cf2: ret]
l_0cf3:
	move.b	has_pick_61CF,d0                	| [$0cf3: ld   a,(has_pick_61CF)]
	                         	| [$0cf6: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$0cf8: ret  z] [...]
0:
	move.w	#PICKAXE_SND,d0                      	| [$0cf9: ld   hl,$D993]
	jbsr	start_a_sound                  	| [$0cfc: call play_sample_EC84]
	rts                                    	| [$0cff: ret]
l_0d00:
	move.b	holds_barrow_61C7,d0            	| [$0d00: ld   a,(holds_barrow_61C7)]
	                         	| [$0d03: cp   $00]
	rts                                    	| [$0d05: ret]
	
l_0d0d:
	move.w	player_logical_address_6009,d6	| [$0d0d: ld   hl,(player_logical_address_6009)]
	jbsr	character_can_walk_left_0DCC      	| [$0d10: call character_can_walk_left_0DCC]
	move.b	way_clear_flag_600B,d0          	| [$0d13: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$0d16: cp   $02]
	jne	cant_walk_in_current_direction_0BBD	| [$0d18: jp   nz,cant_walk_in_current_direction_0BBD]
	subq.b	#1,player_x_6582                	| [$0d1b: ld   a,(player_x_6582)]
	                           	| [$0d1e: dec  a]
	                	| [$0d1f: ld   (player_x_6582),a]
	jbsr	handle_player_destroying_wall_EA55	| [$0d22: call handle_player_destroying_wall_EA55]
	move.b	unknown_61F3,d0                 	| [$0d25: ld   a,(unknown_61F3)]
	                         	| [$0d28: cp   $00]
	jne	l_0d46                             	| [$0d2a: jr   nz,$0D46]
	jbsr	l_0cf3                            	| [$0d2c: call $0CF3]
	move.b	unknown_61F3,d0                 	| [$0d2f: ld   a,(unknown_61F3)]
	                         	| [$0d32: cp   $00]
	jne	l_0d46                             	| [$0d34: jr   nz,$0D46]
	jbsr	l_0d00                            	| [$0d36: call $0D00]
	move.b	unknown_61F3,d0                 	| [$0d39: ld   a,(unknown_61F3)]
	                         	| [$0d3c: cp   $00]
	jne	l_0d46                             	| [$0d3e: jr   nz,$0D46]
	move.w	#PLAYER_WALK_SND,d0                      	| [$0d40: ld   hl,$D999]
	jbsr	start_a_sound                  	| [$0d43: call play_sample_EC84]
l_0d46:
	move.b	#0x01,d0                        	| [$0d46: ld   a,$01]
	move.b	d0,(A3)                    	| [$0d48: ld   (iy+$00),a]
	move.b	d0,unknown_609B                 	| [$0d4b: ld   (unknown_609B),a]
	move.w	(sp)+,d0                        	| [$0d4e: pop  af]
	rts                                    	| [$0d4f: ret]
l_0d50:
	movem.w	d1/d2,-(sp)                    	| [$0d50: push bc]
	move.b	#0x02,d1                        	| [$0d51: ld   b,$02]
	move.b	player_has_blue_bag_flag_627C,d0	| [$0d53: ld   a,(player_has_blue_bag_flag_627C)]
	                         	| [$0d56: cp   $00]
	jeq	l_0d5c                             	| [$0d58: jr   z,$0D5C]
 * player has blue bag
 * toggle 615F value (related to player speed)
	move.b	#0x01,d1                        	| [$0d5a: ld   b,$01]
l_0d5c:
	move.b	unknown_615F,d0                 	| [$0d5c: ld   a,(unknown_615F)]
	cmp.b	d1,d0                            	| [$0d5f: cp   b]

	movem.w	(sp)+,d1/d2                    	| [$0d60: pop  bc]
	jcs	l_0d6a                             	| [$0d61: jr   c,$0D6A]
	clr.b	d0                               	| [$0d63: xor  a]
	move.b	d0,unknown_615F                 	| [$0d64: ld   (unknown_615F),a]
	clr.b	d0                               	| [$0d67: ld   a,$00]
	rts                                    	| [$0d69: ret]
l_0d6a:
	addq.b	#1,d0                           	| [$0d6a: inc  a]
	move.b	d0,unknown_615F                 	| [$0d6b: ld   (unknown_615F),a]
	move.b	#0x01,d0                        	| [$0d6e: ld   a,$01]
	rts                                    	| [$0d70: ret]

* < D6 character logical address
* > updates way_clear_flag_600B
*   2: way clear
*   1: blocked 
character_can_walk_right_0D71:
	cmp.b	#1,check_scenery_disabled_61ED  	| [$0d71: ld   a,(check_scenery_disabled_61ED)]
	                         	| [$0d74: cp   $01]
	jne	l_0d7e                             	| [$0d76: jr   nz,$0D7E]
l_0d78:
	* scenery disabled: always OK
	move.b	#0x02,d0                        	| [$0d78: ld   a,$02]
	move.b	d0,way_clear_flag_600B          	| [$0d7a: ld   (way_clear_flag_600B),a]
	rts                                    	| [$0d7d: ret]
l_0d7e:
	move.b	player_controls_blocked_61F2,d0 	| [$0d7e: ld   a,(player_controls_blocked_61F2)]
	cmp.b	#0x01,d0                         	| [$0d81: cp   $01]
	jeq	l_0d78                             	| [$0d83: jr   z,$0D78]
	jbsr	check_breakable_wall_C0C0         	| [$0d85: call check_breakable_wall_C0C0]
	move.b	way_clear_flag_600B,d0          	| [$0d88: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$0d8b: cp   $02]
	bne.b	0f                               	| [...]
	* wall encountered: can't move: return
	rts                                    	| [$0d8d: ret  z] [...]
0:
	sub.w	#0x21,d6                           	| [$0d8e: ld   a,l]
	                         	| [$0d8f: sub  $21]
	                           	| [$0d91: ld   l,a]
	                           	| [$0d92: ld   a,h]
	                        	| [$0d93: sbc  a,$00]
                           	| [$0d95: ld   h,a]
	jbsr	read_rom                         	| [$0d96: ld   a,(hl)]
	jbsr	check_against_space_tiles_0E05    	| [$0d97: call check_against_space_tiles_0E05]
	move.b	way_clear_flag_600B,d0          	| [$0d9a: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$0d9d: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$0d9f: ret  nz] [...]
0:
	subq.w	#1,d6                           	| [$0da0: dec  hl]
	jbsr	read_rom                         	| [$0da1: ld   a,(hl)]
	jbsr	check_against_space_tiles_0E05    	| [$0da2: call check_against_space_tiles_0E05]
	addq.w	#2,d6                           	| [$0da5: inc  hl] * 2
	jbsr	check_edge_tiles_0DAB             	| [$0da7: call check_edge_tiles_0DAB]
	rts                                    	| [$0daa: ret]
check_edge_tiles_0DAB:
	jbsr	read_rom                         	| [$0dab: ld   a,(hl)]
	cmp.b	#0xFB,d0                         	| [$0dac: cp   $FB]
	jeq	l_0db5                             	| [$0dae: jr   z,$0DB5]
	cmp.b	#0xFA,d0                         	| [$0db0: cp   $FA]
	jeq	l_0db5                             	| [$0db2: jr   z,$0DB5]
	rts                                    	| [$0db4: ret]
l_0db5:

	                        	| [$0db5: push ix]
	jbsr	get_y_8_modulus_c16d                            	| [$0db7: call $C16D]
	                        	| [$0dba: pop  ix]
	move.b	d1,d0                           	| [$0dbc: ld   a,b]
	cmp.b	#0x05,d0                         	| [$0dbd: cp   $05]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0dbf: ret  c] [...]
0:
	                       	| [$0dc0: ld   a,$01]
	         	| [$0dc2: ld   (way_clear_flag_600B),a]
	                                    	| [$0dc5: ret]
l_0dc6:
	move.b	#0x01,way_clear_flag_600B                        	| [$0dc6: ld   a,$01]
	          	| [$0dc8: ld   (way_clear_flag_600B),a]
	rts                                    	| [$0dcb: ret]

character_can_walk_left_0DCC:
	move.b	check_scenery_disabled_61ED,d0  	| [$0dcc: ld   a,(check_scenery_disabled_61ED)]
	cmp.b	#0x01,d0                         	| [$0dcf: cp   $01]
	jne	l_0dd9                             	| [$0dd1: jr   nz,$0DD9]
	move.b	#0x02,d0                        	| [$0dd3: ld   a,$02]
	move.b	d0,way_clear_flag_600B          	| [$0dd5: ld   (way_clear_flag_600B),a]
	rts                                    	| [$0dd8: ret]
l_0dd9:
	* special test needed when walking to the left: breakable wall
	jbsr	check_blocked_by_breakable_wall_C0A4                            	| [$0dd9: call $C0A4]
	move.b	way_clear_flag_600B,d0          	| [$0ddc: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$0ddf: cp   $02]
	bne.b	0f                               	| [...]
	rts                                    	| [$0de1: ret  z] [...]
0:
	add.w	#0x1F,d6                           	| [$0de2: ld   a,l]
	                         	| [$0de3: add  a,$1F]
	                           	| [$0de5: ld   l,a]
	                           	| [$0de6: ld   a,h]
	                           	| [$0de9: ld   h,a]
	bsr	read_rom                         	| [$0dea: ld   a,(hl)]
	jbsr	check_against_space_tiles_0E05    	| [$0deb: call check_against_space_tiles_0E05]
	move.b	way_clear_flag_600B,d0          	| [$0dee: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$0df1: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$0df3: ret  nz] [...]
0:
	subq.w	#1,d6                           	| [$0df4: dec  hl]
	bsr	read_rom                         	| [$0df5: ld   a,(hl)]
	jbsr	check_against_space_tiles_0E05    	| [$0df6: call check_against_space_tiles_0E05]
	addq.w	#2,d6                           	| [$0df9: inc  hl] * 2
	jbsr	check_edge_tiles_0DAB             	| [$0dfb: call check_edge_tiles_0DAB]
	rts                                    	| [$0dfe: ret]

check_against_space_tiles_0E05:
	move.b	d0,d2                           	| [$0e05: ld   c,a]
	LEA_ROM	       0x1BA7,a1                      	| [$0e06: ld   de,$1BA7]
	move.b	#0x24-1,d1                        	| [$0e09: ld   b,$24]
l_0e0b:
	cmp.b	(a1)+,d0                         	| [$0e0b: ld   a,(de)]
                            	| [$0e0c: cp   c]
	jeq	l_0dff                             	| [$0e0d: jr   z,$0DFF]
	                           	| [$0e0f: inc  de]
	                           	| [...]
	dbf	d1,l_0e0b                             	| [$0e10: djnz $0E0B]
	jra	l_0dc6                             	| [$0e12: jr   $0DC6]
* moved that code below, it's clearer
l_0dff:
	                        	| [$0dff: ld   a,$02]
	move.b	#2,way_clear_flag_600B          	| [$0e01: ld   (way_clear_flag_600B),a]
	rts                                    	| [$0e04: ret]
l_0e14:
	move.b	unknown_609B,d0                 	| [$0e14: ld   a,(unknown_609B)]
	cmp.b	#0x01,d0                         	| [$0e17: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$0e19: ret  z] [...]
0:
	move.b	player_input_6026,d0            	| [$0e1a: ld   a,(player_input_6026)]
	and.b	#0x20,d0                         	| [$0e1d: and  $20]
	cmp.b	#0x20,d0                         	| [$0e1f: cp   $20]
	jeq	can_player_climb_up_0E36                             	| [$0e21: jr   z,$0E36]
	move.b	player_input_6026,d0            	| [$0e23: ld   a,(player_input_6026)]
	and.b	#0x40,d0                         	| [$0e26: and  $40]
	cmp.b	#0x40,d0                         	| [$0e28: cp   $40]
	beq.b	0f                               	| [...]
	rts                                    	| [$0e2a: ret  nz] [...]
0:
can_player_climb_down_0E2B:
	move.w	player_logical_address_6009,d6	| [$0e2b: ld   hl,(player_logical_address_6009)]

	jbsr	read_rom                         	| [$0e2e: ld   a,(hl)]
	* ladder tile on the left is 0xFF, way simpler than testing walk
	cmp.b	#0xFF,d0                         	| [$0e2f: cp   $FF]
	beq.b	0f                               	| [...]
	rts                                    	| [$0e31: ret  nz] [...]
0:
	clr.b	d1                               	| [$0e32: ld   b,$00]
	jra	l_0e40                             	| [$0e34: jr   $0E40]
can_player_climb_up_0E36:
	move.w	player_logical_address_6009,d6	| [$0e36: ld   hl,(player_logical_address_6009)]
 	subq.w	#1,d6                           	| [$0e39: dec  hl]
	jbsr	read_rom                         	| [$0e3a: ld   a,(hl)]
 * ladder tile on the left is 0xFF, way simpler than testing walk
	cmp.b	#0xFF,d0                         	| [$0e3b: cp   $FF]
	beq.b	0f                               	| [...]
	rts                                    	| [$0e3d: ret  nz] [...]
0:
	move.b	#0x80,d1                        	| [$0e3e: ld   b,$80]
l_0e40:
	move.b	player_climb_frame_counter_6007,d0	| [$0e40: ld   a,(player_climb_frame_counter_6007)]
	cmp.b	#0x0B,d0                         	| [$0e43: cp   $0B]
	jne	l_0e4e                             	| [$0e45: jr   nz,$0E4E]
	move.b	#0x01,d0                        	| [$0e47: ld   a,$01]
	move.b	d0,player_climb_frame_counter_6007	| [$0e49: ld   (player_climb_frame_counter_6007),a]
	jra	l_0e63                             	| [$0e4c: jr   $0E63]
l_0e4e:
	addq.b	#1,d0                           	| [$0e4e: inc  a]
	move.w	d0,-(sp)                        	| [$0e4f: push af]
	move.b	has_bag_6158,d0                 	| [$0e50: ld   a,(has_bag_6158)]
	                         	| [$0e53: cp   $00]
	jeq	l_0e5f                             	| [$0e55: jr   z,$0E5F]
	jbsr	l_0d50                            	| [$0e57: call $0D50] drop 1 move out of 2 if blue bag, 1 out of 3 if yellow bag
	tst.b	d0                         	| [$0e5a: cp   $00]
	jeq	l_0c90                             	| [$0e5c: jp   z,$0C90]
l_0e5f:
	move.w	(sp)+,d0                        	| [$0e5f: pop  af]
	move.b	d0,player_climb_frame_counter_6007	| [$0e60: ld   (player_climb_frame_counter_6007),a]
l_0e63:
	move.b	player_climb_frame_counter_6007,d0	| [$0e63: ld   a,(player_climb_frame_counter_6007)]
 * vertical player movement
	cmp.b	#0x01,d0                         	| [$0e66: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$0e68: ret  z] [...]
0:
	cmp.b	#0x03,d0                         	| [$0e69: cp   $03]
	bne.b	0f                               	| [...]
	jbsr	l_0edf                            	| [$0e6b: call z,$0EDF]
0:
	cmp.b	#0x05,d0                         	| [$0e6e: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$0e70: ret  z] [...]
0:
	cmp.b	#0x08,d0                         	| [$0e71: cp   $08]
	bne.b	0f                               	| [...]
	jbsr	l_0edf                            	| [$0e73: call z,$0EDF]
0:
	cmp.b	#0x0A,d0                         	| [$0e76: cp   $0A]
	bne.b	0f                               	| [...]
	rts                                    	| [$0e78: ret  z] [...]
0:
	cmp.b	#0x02,d0                         	| [$0e79: cp   $02]
	bne.b	0f                               	| [...]
	jbsr	l_0edf                            	| [$0e7b: call z,$0EDF]
0:
	cmp.b	#0x04,d0                         	| [$0e7e: cp   $04]
	bne.b	0f                               	| [...]
	jbsr	l_0edf                            	| [$0e80: call z,$0EDF]
0:
	cmp.b	#0x07,d0                         	| [$0e83: cp   $07]
	bne.b	0f                               	| [...]
	jbsr	l_0edf                            	| [$0e85: call z,$0EDF]
0:
	cmp.b	#0x09,d0                         	| [$0e88: cp   $09]
	bne.b	0f                               	| [...]
	jbsr	l_0edf                            	| [$0e8a: call z,$0EDF]
0:
	cmp.b	#0x06,d0                         	| [$0e8d: cp   $06]
	jne	l_0e9d                             	| [$0e8f: jr   nz,$0E9D]
	move.b	#0x12,d0                        	| [$0e91: ld   a,$12]
	move.b	d0,player_struct_6580           	| [$0e93: ld   (player_struct_6580),a]
	jbsr	l_0edf                            	| [$0e96: call $0EDF]
	jbsr	l_0ead                            	| [$0e99: call $0EAD]
	rts                                    	| [$0e9c: ret]
l_0e9d:
	cmp.b	#0x0B,d0                         	| [$0e9d: cp   $0B]
	jne	l_0eac                             	| [$0e9f: jr   nz,$0EAC]
	move.b	#0x92,d0                        	| [$0ea1: ld   a,$92]
	move.b	d0,player_struct_6580           	| [$0ea3: ld   (player_struct_6580),a]
	jbsr	l_0edf                            	| [$0ea6: call $0EDF]
	jbsr	l_0ead                            	| [$0ea9: call $0EAD]
l_0eac:
	rts                                    	| [$0eac: ret]
l_0ead:
	move.b	unknown_61F3,d0                 	| [$0ead: ld   a,(unknown_61F3)]
	                         	| [$0eb0: cp   $00]
	jne	l_0eba                             	| [$0eb2: jr   nz,$0EBA]
	move.w	#PLAYER_CLIMB_SND,d0                      	| [$0eb4: ld   hl,$D98D]
	jbsr	start_a_sound                  	| [$0eb7: call play_sample_EC84]
l_0eba:
	tst.b	has_bag_6158                 	| [$0eba: ld   a,(has_bag_6158)]
	                         	| [$0ebd: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$0ebf: ret  z] [...]
0:
	move.b	is_key_hunt_phase_6341,d0                 	| [$0ec0: ld   a,(is_key_hunt_phase_6341)]
	cmp.b	#0x01,d0                         	| [$0ec3: cp   $01]
	jeq	l_0ed3                             	| [$0ec5: jr   z,$0ED3]
	move.b	#0x3F,d0                        	| [$0ec7: ld   a,$3F]
	move.b	d0,object_held_struct_659C      	| [$0ec9: ld   (object_held_struct_659C),a]
	move.b	player_x_6582,d0                	| [$0ecc: ld   a,(player_x_6582)]
	move.b	d0,sprite_object_x_659E         	| [$0ecf: ld   (sprite_object_x_659E),a]
	rts                                    	| [$0ed2: ret]
l_0ed3:
	* bomb? gun?
	move.b	#0x31,d0                        	| [$0ed3: ld   a,$31]
	move.b	d0,object_held_struct_659C      	| [$0ed5: ld   (object_held_struct_659C),a]
	move.b	player_x_6582,d0                	| [$0ed8: ld   a,(player_x_6582)]
	move.b	d0,sprite_object_x_659E         	| [$0edb: ld   (sprite_object_x_659E),a]
	rts                                    	| [$0ede: ret]
l_0edf:
	move.w	d0,-(sp)                        	| [$0edf: push af]
	                               	| [$0ee0: xor  a]
	* exit from all wagons if any
	clr.b	player_in_wagon_1_601C       	| [$0ee1: ld   (player_in_wagon_1_601C),a]
	clr.b	player_in_wagon_2_601D       	| [$0ee4: ld   (player_in_wagon_2_601D),a]
	clr.b	player_in_wagon_3_601E       	| [$0ee7: ld   (player_in_wagon_3_601E),a]
	move.b	d1,d0                           	| [$0eea: ld   a,b]
	cmp.b	#0x80,d0                         	| [$0eeb: cp   $80]
	jne	l_0f02                             	| [$0eed: jr   nz,$0F02]
	subq.b	#1,player_y_6583                	| [$0eef: ld   a,(player_y_6583)]
	                           	| [$0ef2: dec  a]
	                	| [$0ef3: ld   (player_y_6583),a]
	lea	player_struct_6580,a2          	| [$0ef6: ld   ix,player_struct_6580]
	jbsr	align_character_x_0fc9            	| [$0efa: call align_character_x_0fc9]
	jbsr	l_0ead                            	| [$0efd: call $0EAD]
	move.w	(sp)+,d0                        	| [$0f00: pop  af]
	rts                                    	| [$0f01: ret]
l_0f02:
	addq.b	#1,player_y_6583                	| [$0f02: ld   a,(player_y_6583)]
	                           	| [$0f05: inc  a]
	                	| [$0f06: ld   (player_y_6583),a]
	lea	player_struct_6580,a2          	| [$0f09: ld   ix,player_struct_6580]
	jbsr	align_character_x_0fc9            	| [$0f0d: call align_character_x_0fc9]
	jbsr	l_0ead                            	| [$0f10: call $0EAD]
	move.w	(sp)+,d0                        	| [$0f13: pop  af]
	rts                                    	| [$0f14: ret]
	
start_a_game_0F15:
	move.w	#0x910F,d6                       	| [$0f15: ld   a,($910F)]
        jbsr	osd_r_videoram
	cmp.b	#0x1E,d0                         	| [$0f18: cp   $1E]
	jeq	l_0f22                             	| [$0f1a: jr   z,$0F22]
	move.w	#0x912F,d6                       	| [$0f1c: ld   a,($912F)]
	jbsr	osd_r_videoram
	cmp.b	#0x1E,d0                         	| [$0f1f: cp   $1E]
	beq.b	0f                               	| [...]
	rts                                    	| [$0f21: ret  nz] [...]
0:
l_0f22:
	move.b	number_of_credits_6000,d0       	| [$0f22: ld   a,(number_of_credits_6000)]
	                         	| [$0f25: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$0f27: ret  z] [...]
0:
	move.b	gameplay_allowed_6054,d0        	| [$0f28: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$0f2b: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$0f2d: ret  z] [...]
0:
	move.b	player_input_6026,d0            	| [$0f2e: ld   a,(player_input_6026)]
	and.b	#0x04,d0                         	| [$0f31: and  $04]
	cmp.b	#0x04,d0                         	| [$0f33: cp   $04]
	jeq	l_0f54                             	| [$0f35: jr   z,$0F54]
	move.b	number_of_credits_6000,d0       	| [$0f37: ld   a,(number_of_credits_6000)]
	cmp.b	#0x02,d0                         	| [$0f3a: cp   $02]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0f3c: ret  c] [...]
0:
	move.b	coin_start_inputs_6051,d0       	| [$0f3d: ld   a,(coin_start_inputs_6051)]
	and.b	#0x04,d0                         	| [$0f40: and  $04]
	cmp.b	#0x04,d0                         	| [$0f42: cp   $04]
	beq.b	0f                               	| [...]
	rts                                    	| [$0f44: ret  nz] [...]
0:
* two players mode
	CLEAR_XC_FLAG
	move.b	number_of_credits_6000,d0       	| [$0f45: ld   a,(number_of_credits_6000)]
	moveq	#1,d7
	sbcd	d7,d0                           	| [$0eef: dec  a + daa]

	move.b	d0,number_of_credits_6000       	| [$0f4a: ld   (number_of_credits_6000),a]
	move.b	#0x02,d0                        	| [$0f4d: ld   a,$02]
	move.b	d0,number_of_players_617D       	| [$0f4f: ld   (number_of_players_617D),a]
	jra	l_0f59                             	| [$0f52: jr   $0F59]
l_0f54:
	move.b	#0x01,d0                        	| [$0f54: ld   a,$01]
	move.b	d0,number_of_players_617D       	| [$0f56: ld   (number_of_players_617D),a]
l_0f59:
	clr.b	d0                               	| [$0f59: xor  a]
	move.b	d0,current_player_617C          	| [$0f5a: ld   (current_player_617C),a]
 * remove 1 credit
	CLEAR_XC_FLAG
	move.b	number_of_credits_6000,d0       	| [$0f5d: ld   a,(number_of_credits_6000)]
	moveq	#1,d7
	sbcd	d7,d0                           	| [$0f07: dec  a + daa]

	move.b	d0,number_of_credits_6000       	| [$0f62: ld   (number_of_credits_6000),a]
	move.b	#0x0A,d0                        	| [$0f65: ld   a,$0A]
	move.b	d0,tile_at_the_destroyable_wall_location_627D                 	| [$0f67: ld   (tile_at_the_destroyable_wall_location_627D),a]
	move.b	d0,unknown_6290                 	| [$0f6a: ld   (unknown_6290),a]
	jbsr	current_player_start_screen_d017                            	| [$0f6d: call $D017]
	move.b	#0x01,d0                        	| [$0f70: ld   a,$01]
	move.b	d0,must_play_music_6210         	| [$0f72: ld   (must_play_music_6210),a]
	jbsr	init_new_game_F951                	| [$0f75: call init_new_game_F951]
	jbsr	init_guard_directions_and_wagons_C314	| [$0f78: call init_guard_directions_and_wagons_C314]
* put one guard on screen 1
	move.b	#0x01,d0                        	| [$0f7b: ld   a,$01]
	move.b	d0,guard_2_screen_609A          	| [$0f7d: ld   (guard_2_screen_609A),a]
	clr.b	d0                               	| [$0f80: xor  a]
	move.b	d0,game_locked_6053             	| [$0f81: ld   (game_locked_6053),a]
	move.b	d0,unknown_6055                 	| [$0f84: ld   (unknown_6055),a]
	addq.b	#1,d0                           	| [$0f87: inc  a]
	move.b	d0,gameplay_allowed_6054        	| [$0f88: ld   (gameplay_allowed_6054),a]
	clr.b	d0                               	| [$0f8b: xor  a]
	lea	player_1_score_6176,a0         	| [$0f8c: ld   hl,player_1_score_6176]
	move.b	#0x06,d1                        	| [$0f8f: ld   b,$06]
l_0f91:
	clr.b	(a0)+                         	| [$0f91: ld   (hl),a]
                          	| [$0f92: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0f91                             	| [$0f93: djnz $0F91]
	.ifne	OPT_START_SCORE
	lea	player_1_score_6176,a0                	| [$0f33: ld   hl,player_1_score_6176]
	move.l	#OPT_START_SCORE,d0
	move.b	d0,(a0)+
	lsr.l	#8,d0
	move.b	d0,(a0)+
	lsr.l	#8,d0
	move.b	d0,(a0)+
	lsr.l	#8,d0
	.endif
	move.b	flipped_dip_switches_copy_6163,d0	| [$0f95: ld   a,(flipped_dip_switches_copy_6163)]
	and.b	#0x03,d0                         	| [$0f98: and  $03]
	addq.b	#0x01,d0                        	| [$0f9a: add  a,$01]
	move.b	d0,lives_6056                   	| [$0f9c: ld   (lives_6056),a]
	addq.b	#1,d0                           	| [$0f9f: inc  a]
	move.b	d0,unknown_617E                 	| [$0fa0: ld   (unknown_617E),a]
	move.w  #0X91C3,d6                      	| [$0fa3: ld   hl,$91C3]
	move.w	d6,barrow_screen_params_61C4    	| [$0fa6: ld   (barrow_screen_params_61C4),hl]
	move.w	d6,unknown_screen_address_61FA  	| [$0fa9: ld   (unknown_screen_address_61FA),hl]
	move.b	#0x01,d0                        	| [$0fac: ld   a,$01]
	move.b	d0,barrow_screen_61C6           	| [$0fae: ld   (barrow_screen_61C6),a]
	move.b	d0,unknown_61FC                 	| [$0fb1: ld   (unknown_61FC),a]
	jbsr	clear_misc_variables_d7c9                            	| [$0fb4: call $D7C9]
	jbsr	set_bags_coordinates_easy_level_CFDB	| [$0fb7: call set_bags_coordinates_easy_level_CFDB]
	jbsr	set_bags_coordinates_player_2_CFE7         	| [$0fba: call set_bags_coordinates_player_2_CFE7]
	clr.b	d0                               	| [$0fbd: xor  a]
	move.b	d0,current_tune_6353                 	| [$0fbe: ld   (current_tune_6353),a]
	jbsr	play_next_tune_d0f7                            	| [$0fc1: call $D0F7]
	clr.b	d0                               	| [$0fc4: xor  a]
	move.b	d0,unknown_6348                 	| [$0fc5: ld   (unknown_6348),a]
	rts                                    	| [$0fc8: ret]

align_character_x_0fc9:
	move.b	(0x02,a2),d0                    	| [$0fc9: ld   a,(ix+$02)]
	subq.b	#0x01,d0                        	| [$0fcc: sub  $01]
	and.b	#0xF8,d0                         	| [$0fce: and  $F8]
	addq.b	#0x04,d0                        	| [$0fd0: add  a,$04]
	move.b	d0,(0x02,a2)                    	| [$0fd2: ld   (ix+$02),a]
	rts                                    	| [$0fd5: ret]


l_10c2:
	move.b	unknown_6143,d0                 	| [$10c2: ld   a,(unknown_6143)]
	rts                                    	| [$10c5: ret]

handle_player_object_carry_10C6:
	tst.b	has_bag_6158                 	| [$10c6: ld   a,(has_bag_6158)]
	                         	| [$10c9: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$10cb: ret  z] [...]
0:
	* probably jail key
	move.b	is_key_hunt_phase_6341,d0                 	| [$10cc: ld   a,(is_key_hunt_phase_6341)]
	cmp.b	#0x01,d0                         	| [$10cf: cp   $01]
	jne	l_10d7                             	| [$10d1: jr   nz,$10D7]
	jbsr	l_ec37                            	| [$10d3: call $EC37]
	rts                                    	| [$10d6: ret]
l_10d7:
	move.b	player_y_6583,d0                	| [$10d7: ld   a,(player_y_6583)]
	subq.b	#0x02,d0                        	| [$10da: sub  $02]
	move.b	d0,sprite_object_y_659F         	| [$10dc: ld   (sprite_object_y_659F),a]
	move.b	player_struct_6580,d0           	| [$10df: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$10e2: and  $7F]
	cmp.b	#0x12,d0                         	| [$10e4: cp   $12]
	bne.b	0f                               	| [...]
	rts                                    	| [$10e6: ret  z] [...]
0:
	move.b	player_struct_6580,d0           	| [$10e7: ld   a,(player_struct_6580)]
	and.b	#0x80,d0                         	| [$10ea: and  $80]
	cmp.b	#0x80,d0                         	| [$10ec: cp   $80]
	jne	l_10fe                             	| [$10ee: jr   nz,$10FE]
	move.b	player_x_6582,d0                	| [$10f0: ld   a,(player_x_6582)]
	add.b	#0x08,d0                         	| [$10f3: add  a,$08]
	move.b	d0,sprite_object_x_659E         	| [$10f5: ld   (sprite_object_x_659E),a]
	move.b	#0xBF,d0                        	| [$10f8: ld   a,$BF]
	move.b	d0,object_held_struct_659C      	| [$10fa: ld   (object_held_struct_659C),a]
	rts                                    	| [$10fd: ret]
l_10fe:
	move.b	player_x_6582,d0                	| [$10fe: ld   a,(player_x_6582)]
	sub.b	#0x08,d0                         	| [$1101: sub  $08]
	move.b	d0,sprite_object_x_659E         	| [$1103: ld   (sprite_object_x_659E),a]
	move.b	#0x3F,d0                        	| [$1106: ld   a,$3F]
	move.b	d0,object_held_struct_659C      	| [$1108: ld   (object_held_struct_659C),a]
	rts                                    	| [$110b: ret]
	
attach_pick_sprite_to_player_110c:
	tst.b	has_pick_61CF                	| [$110c: ld   a,(has_pick_61CF)]
	                         	| [$110f: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$1111: ret  z] [...]
0:
	move.b	player_struct_6580,d0           	| [$1112: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$1115: and  $7F]
	move.b	#0x37,d1                        	| [$1119: ld   b,$37]
	cmp.b	#0x1F,d0                         	| [$1117: cp   $1F]
	jeq	l_112a                             	| [$111b: jr   z,$112A]
	*move.b	player_struct_6580,d0           	| [$111d: ld   a,(player_struct_6580)]
	*and.b	#0x7F,d0                         	| [$1120: and  $7F]
	*move.b	#0x37,d1                        	| [$1124: ld   b,$37]
	cmp.b	#0x12,d0                         	| [$1122: cp   $12]
	jeq	l_112a                             	| [$1126: jr   z,$112A]
	move.b	#0x38,d1                        	| [$1128: ld   b,$38]
l_112a:
	move.b	player_y_6583,sprite_object_y_659F                	| [$112a: ld   a,(player_y_6583)]
	         	| [$112d: ld   (sprite_object_y_659F),a]
	*move.b	player_struct_6580,d0           	| [$1130: ld   a,(player_struct_6580)]
	*and.b	#0x7F,d0                         	| [$1133: and  $7F]
	cmp.b	#0x12,d0                         	| [$1135: cp   $12]
	jeq	l_114f                             	| [$1137: jr   z,$114F]
	* direction
	move.b	player_struct_6580,d0           	| [$1139: ld   a,(player_struct_6580)]
	and.b	#0x80,d0                         	| [$113c: and  $80]
	cmp.b	#0x80,d0                         	| [$113e: cp   $80]
	jeq	l_114f                             	| [$1140: jr   z,$114F]
	move.b	player_x_6582,d0                	| [$1142: ld   a,(player_x_6582)]
	* to right: add offset to sprite (vs player)
	add.b	#0x0C,d0                         	| [$1145: add  a,$0C]
	move.b	d0,sprite_object_x_659E         	| [$1147: ld   (sprite_object_x_659E),a]
	move.b	d1,d0                           	| [$114a: ld   a,b]
	move.b	d0,object_held_struct_659C      	| [$114b: ld   (object_held_struct_659C),a]
	rts                                    	| [$114e: ret]
l_114f:
	move.b	player_x_6582,d0                	| [$114f: ld   a,(player_x_6582)]
	* to left: sub offset to sprite (vs player)
	sub.b	#0x0C,d0                         	| [$1152: sub  $0C]
	move.b	d0,sprite_object_x_659E         	| [$1154: ld   (sprite_object_x_659E),a]
	move.b	d1,d0                           	| [$1157: ld   a,b]
	or.b	#0x80,d0                          	| [$1158: or   $80]
	* sprite type
	move.b	d0,object_held_struct_659C      	| [$115a: ld   (object_held_struct_659C),a]
	rts                                    	| [$115d: ret]

handle_player_object_pickup_115E:
	move.b	gameplay_allowed_6054,d0        	| [$115e: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$1161: cp   $01]
	jeq	object_pickup_test_116F                             	| [$1163: jr   z,$116F]
	move.b	player_previous_input_6050,d0   	| [$1165: ld   a,(player_previous_input_6050)]
	and.b	#0x80,d0                         	| [$1168: and  $80]
	cmp.b	#0x80,d0                         	| [$116a: cp   $80]
	jeq	set_object_pickup_flag_1180                             	| [$116c: jr   z,$1180]
	rts                                    	| [$116e: ret]

object_pickup_test_116F:
	move.b	player_input_6026,d0            	| [$116f: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$1172: and  $80]
	cmp.b	#0x80,d0                         	| [$1174: cp   $80]
	jne	clear_object_pickup_flag_1186                             	| [$1176: jr   nz,$1186]
* fire pressed
	move.b	player_previous_input_6050,d0   	| [$1178: ld   a,(player_previous_input_6050)]
	and.b	#0x80,d0                         	| [$117b: and  $80]
	cmp.b	#0x80,d0                         	| [$117d: cp   $80] just leaving the wagon handle
	bne.b	0f                               	| [...]
	rts                                    	| [$117f: ret  z]  don't pick up anything! [...]
0:
 *  actual pickup of an object
set_object_pickup_flag_1180:
	move.b	#0x01,pickup_flag_6160                        	| [$1180: ld   a,$01]
	             	| [$1182: ld   (pickup_flag_6160),a]
	rts                                    	| [$1185: ret]

* called at every cycle, not just when dropped
clear_object_pickup_flag_1186:
                              	| [$1186: ld   a,$00]
	clr.b	pickup_flag_6160             	| [$1188: ld   (pickup_flag_6160),a]
	rts                                    	| [$118b: ret]

set_previous_guard_y_255_118C:
	                                	| [$118c: ld   a,$FF]
	st.b	(0x03,a3)                    	| [$118e: ld   (iy+$03),a]
	rts                                    	| [$1191: ret]



guard_1_walk_movement_11C0:
	.ifne	OPT_BLOCK_GUARD_TWO
	rts
	.endif
	tst.b	guard_2_inactive
	beq.b	0f
	rts
0:
	move.b	guard_1_screen_6099,d0          	| [$11c0: ld   a,(guard_1_screen_6099)]
	move.b	d0,current_character_screen_index_6098	| [$11c3: ld   (current_character_screen_index_6098),a]
	move.w	guard_1_logical_address_6038,stored_logical_address_6044	| [$11c6: ld   hl,(guard_1_logical_address_6038)]
	  	| [$11c9: ld   (stored_logical_address_6044),hl]
	move.l	#guard_1_not_moving_timeout_counter_6057,guard_struct_pointer_6093	| [$11cc: ld   iy,guard_1_not_moving_timeout_counter_6057]
	   	| [$11d0: ld   (guard_struct_pointer_6093),iy]
	* reads ROM to set address of guard 1 struct
	lea	guard_1_struct_6594,a2                   	| [$11d4: ld   ix,($05B7)]
 	lea	unknown_6034,a0                	| [$11d8: ld   hl,unknown_6034]
	lea	guard_1_direction_6027,a3      	| [$11db: ld   iy,guard_1_direction_6027]
	jbsr	guard_walk_movement_067E          	| [$11df: call guard_walk_movement_067E]
	            	| [$11e2: ld   a,(io_read_shit_B800)] kick watchdog
	move.b	current_character_screen_index_6098,d0	| [$11e5: ld   a,(current_character_screen_index_6098)]
	move.b	d0,guard_1_screen_6099          	| [$11e8: ld   (guard_1_screen_6099),a]
	rts                                    	| [$11eb: ret]
guard_2_walk_movement_11EC:
	.ifne	OPT_BLOCK_GUARD_ONE
	rts
	.endif
	tst.b	guard_1_inactive
	beq.b	0f
	rts
0:	
	move.b	guard_2_screen_609A,d0          	| [$11ec: ld   a,(guard_2_screen_609A)]
	move.b	d0,current_character_screen_index_6098	| [$11ef: ld   (current_character_screen_index_6098),a]
	move.w	guard_2_logical_address_6078,stored_logical_address_6044	| [$11f2: ld   hl,(guard_2_logical_address_6078)]
	  	| [$11f5: ld   (stored_logical_address_6044),hl]
	move.l	#guard_2_not_moving_timeout_counter_6097,guard_struct_pointer_6093	| [$11f8: ld   iy,guard_2_not_moving_timeout_counter_6097]
	   	| [$11fc: ld   (guard_struct_pointer_6093),iy]
	lea	guard_2_struct_6598,a2                   	| [$1200: ld   ix,($05B9)]

	lea	unknown_6074,a0                	| [$1204: ld   hl,unknown_6074]
	lea	guard_2_direction_6067,a3      	| [$1207: ld   iy,guard_2_direction_6067]
	jbsr	guard_walk_movement_067E          	| [$120b: call guard_walk_movement_067E]
	            	| [$120e: ld   a,(io_read_shit_B800)]
	move.b	current_character_screen_index_6098,d0	| [$1211: ld   a,(current_character_screen_index_6098)]
	move.b	d0,guard_2_screen_609A          	| [$1214: ld   (guard_2_screen_609A),a]
	rts                                    	| [$1217: ret]

play_intro_1218:
	
	jbsr	osd_disable_vblank_interrupt
	jbsr	osd_disable_display                               	| [$1219: ld   a,$00]
	                       	| [$121b: ld   ($A003),a]
 	jbsr	clear_screen_C3B7                 	| [$121e: call clear_screen_C3B7]
	move.b	#0x3F,d0                        	| [$1221: ld   a,$3F]
	jbsr	change_attribute_everywhere_C3A3  	| [$1223: call change_attribute_everywhere_C3A3]
	jbsr	display_player_ids_and_credit_F8A4	| [$1226: call display_player_ids_and_credit_F8A4]
	move.b	#0x01,d0                        	| [$1229: ld   a,$01]
	move.b	d0,player_screen_600D           	| [$122b: ld   (player_screen_600D),a]
	jbsr	osd_enable_display                       	| [$122e: ld   ($A003),a]
	move.b	d0,current_character_screen_index_6098	| [$1231: ld   (current_character_screen_index_6098),a]
	move.b	d0,guard_1_screen_6099          	| [$1234: ld   (guard_1_screen_6099),a]
	move.b	d0,guard_2_screen_609A          	| [$1237: ld   (guard_2_screen_609A),a]
                              	| [$123a: xor  a]
	clr.b	unknown_6008                 	| [$123b: ld   (unknown_6008),a]
	clr.b	guard_1_in_elevator_6037     	| [$123e: ld   (guard_1_in_elevator_6037),a]
	clr.b	fatal_fall_height_reached_604E	| [$1241: ld   (fatal_fall_height_reached_604E),a]
	clr.b	guard_2_in_elevator_6077     	| [$1244: ld   (guard_2_in_elevator_6077),a]
	clr.b	elevator_y_screen_4_6587	| [$1247: ld   (elevator_y_screen_4_6587),a]
	clr.b	guard_2_x_659A               	| [$124a: ld   (guard_2_x_659A),a]
	clr.b	guard_2_y_659B               	| [$124d: ld   (guard_2_y_659B),a]
	clr.b	bag_falling_6159             	| [$1250: ld   (bag_falling_6159),a]
	clr.b	has_pick_61CF                	| [$1253: ld   (has_pick_61CF),a]
	clr.w	pickaxe_timer_duration_61E0  	| [$1256: ld   (pickaxe_timer_duration_61E0),a]
											| [$1259: ld   (unknown_61E1),a]
	move.b	#0x01,d0                        	| [$125c: ld   a,$01]
	move.b	d0,check_scenery_disabled_61ED  	| [$125e: ld   (check_scenery_disabled_61ED),a]
	jbsr	compute_guard_speed_from_dipsw_C5EE	| [$1261: call compute_guard_speed_from_dipsw_C5EE]
	move.w	#0x901D,d6                      	| [$1264: ld   hl,$901D]
	move.w	#0x0020,d3                      	| [$1267: ld   de,$0020] 32
	move.b	#0xF0,d0                        	| [$126a: ld   a,$F0]
	move.b	#0x20,d1                        	| [$126c: ld   b,$20]
l_126e:
	jbsr	osd_w_videoram                         	| [$126e: ld   (hl),a]

	                       	| [$126f: push hl]
	movem.w	d0/d6,-(sp)                        	| [$1270: push af]
	add.w	#0x800,d6                           	| [$1271: ld   a,h]
	                         	| [$1272: add  a,$08]
	                          	| [$1274: ld   h,a]
	move.b	#4,d0                        	| [$1275: ld   a,$04]
	jbsr	osd_w_colorram                         	| [$1277: ld   (hl),a]
	movem.w	(sp)+,d0/d6                        	| [$1278: pop  af]
	                        	| [$1279: pop  hl]
	add.w	d3,d6                            	| [$127a: add  hl,de]

	subq.b	#1,d1                           	| [...]
	jne	l_126e                             	| [$127b: djnz $126E]
	                      	| [$127d: ld   hl,$0000] 0
	clr.w	picked_up_object_screen_address_61F6	| [$1280: ld   (picked_up_object_screen_address_61F6),hl]
	jbsr	check_if_credit_inserted_1542                            	| [$1283: call $1542]
	move.b	#0x01,d0                        	| [$1286: ld   a,$01]
	move.b	d0,gameplay_allowed_6054        	| [$1288: ld   (gameplay_allowed_6054),a]
	lea	player_struct_6580,a1          	| [$128b: ld   de,player_struct_6580]
	LEA_ROM	       0x1559,a0                      	| [$128e: ld   hl,$1559]
	move.w	#0x04,d1                        	| [$1291: ld   bc,$0004] 4
	jbsr	ldir                              	| [$1294: ldir]

	lea	guard_1_struct_6594,a1         	| [$1296: ld   de,guard_1_struct_6594]
	LEA_ROM	       0x1561,a0                      	| [$1299: ld   hl,$1561]
	move.w	#0x04,d1                        	| [$129c: ld   bc,$0004] 4
	jbsr	ldir                              	| [$129f: ldir]
	move.b	is_intermission_6274,d0         	| [$12a1: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$12a4: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$12a6: ret  z] [...]
	
	* VA presente
0:
	LEA_ROM	       0x4C00,a1                      	| [$12a7: ld   de,$4C00]
	move.w	#0x91A5,d6                      	| [$12aa: ld   hl,$91A5]
	move.b	#0x16,d0                        	| [$12ad: ld   a,$16]
	exg	d0,d7                              	| [$12af: ex   af,af']
	jbsr	write_text_55f0                            	| [$12b0: call $55F0]
	LEA_ROM	       0x4C0B,a1                      	| [$12b3: ld   de,$4C0B]
	move.w	#0x91A6,d6                      	| [$12b6: ld   hl,$91A6]
	move.b	#0x16,d0                        	| [$12b9: ld   a,$16]
	exg	d0,d7                              	| [$12bb: ex   af,af']
	jbsr	write_text_55f0                            	| [$12bc: call $55F0]
	LEA_ROM	       0x4C16,a1                      	| [$12bf: ld   de,$4C16]
	move.w	#0x91A7,d6                      	| [$12c2: ld   hl,$91A7]
	move.b	#0x16,d0                        	| [$12c5: ld   a,$16]
	exg	d0,d7                              	| [$12c7: ex   af,af']
	jbsr	write_text_55f0                            	| [$12c8: call $55F0]
	LEA_ROM	       0x4C21,a1                      	| [$12cb: ld   de,$4C21]
	move.w	#0x91AA,d6                      	| [$12ce: ld   hl,$91AA]
	move.b	#0x13,d0                        	| [$12d1: ld   a,$13]
	exg	d0,d7                              	| [$12d3: ex   af,af']
	jbsr	write_text_55f0                            	| [$12d4: call $55F0]
	                       	| [$12d7: ld   a,($B000)]

	jbsr	osd_read_dipswitches
	* change PRESENTE into PRESENTS
	and.b	#0x20,d0                         	| [$12da: and  $20]
	cmp.b	#0x20,d0                         	| [$12dc: cp   $20]
	jne	l_12ea                             	| [$12de: jr   nz,$12EA]
	move.b	#0xE1,d0                        	| [$12e0: ld   a,$E1]
	move.w	#0x90CA,d6                       	| [$12e2: ld   ($90CA),a]
	jbsr	osd_w_videoram
	move.b	#0x13,d0                        	| [$12e5: ld   a,$13]
	move.w	#0x98CA,d6                       	| [$12e7: ld   ($98CA),a]
	jbsr	osd_w_colorram
l_12ea:
	move.w	#0x936B,d6                      	| [$12ea: ld   hl,$936B]
	move.b	#0x1A,d2                        	| [$12ed: ld   c,$1A]
	jbsr	draw_big_bagman_23dd                            	| [$12ef: call $23DD]
	jbsr	osd_enable_vblank_interrupt 				| ei
	| im   1
	**jbsr	rst_38                            	| [$12f5: rst  $38]
	move.b	#0x02,d1                        	| [$12f6: ld   b,$02]
l_12f8:
	move.w	#0x4000,d7		| [$12f8: ld   de,$4000]
	bsr		credit_inserted_loop
 	

                            	| [$12fb: call $1542]
   	| [$12fe: dec  de]
      	| [$12ff: ld   a,d]
	                         	| [$1300: cp   $00]
	                             	| [$1302: jr   nz,$12FB]
	jbsr	osd_read_dipswitches                       	| [$1304: ld   a,($B000)]
	and.b	#0x40,d0                         	| [$1307: and  $40]
	cmp.b	#0x40,d0                         	| [$1309: cp   $40]
	jne	l_131e                             	| [$130b: jr   nz,$131E]

	move.l	a0,-(sp)                        	| [$130d: push hl]
	* starts a tune (which one?)
	*LEA_ROM	       0x3800,a0                      	| [$130e: ld   hl,$3800]
	*move.b	a0,ay_sound_pointer_6140        	| [$1311: ld   (ay_sound_pointer_6140),hl]
	*clr.b	d0                               	| [$1314: xor  a]
	*move.b	d0,ay_sound_start_6142          	| [$1315: ld   (ay_sound_start_6142),a]
	move.b	#0x01,d0                        	| [$1318: ld   a,$01]
	move.b	d0,unknown_634A                 	| [$131a: ld   (unknown_634A),a]
	move.l	(sp)+,a0                        	| [$131d: pop  hl]
l_131e:
	subq.b	#1,d1                           	| [...]
	jne	l_12f8                             	| [$131e: djnz $12F8]
	move.b	#0x05,d1                        	| [$1320: ld   b,$05]
l_1322:
	* foot stomping
	move.w	#0x925B,d6                      	| [$1322: ld   ix,$925B]
	move.b	#0x18,d0
	WRITE_VIDEORAM	0                 	| [$1326: ld   (ix+$00),$18]
	move.b	#0x17,d0
	WRITE_VIDEORAM	0x01                 	| [$132a: ld   (ix+$01),$17]
	move.b	#0x19,d0
	WRITE_VIDEORAM	0x20                 	| [$132e: ld   (ix+$20),$19]
	move.b	#0x16,d0
	WRITE_VIDEORAM	0x21                 	| [$1332: ld   (ix+$21),$16]
	move.b	#0x1A,d0
	WRITE_VIDEORAM	0x40                 	| [$1336: ld   (ix+$40),$1A]
	move.b	#0x15,d0
	WRITE_VIDEORAM	0x41                 	| [$133a: ld   (ix+$41),$15]
	move.w	#0x600,d7		 	| [$133e: ld   de,$0600]
	bsr		credit_inserted_loop
										| [$1341: call $1542]
									| [$1344: dec  de]
									| [$1345: ld   a,d]
						| [$1346: cp   $00]
									| [$1348: jr   nz,$1341]
	* foot position reset
	move.b	#0xB7,d0
	WRITE_VIDEORAM	0                 	| [$134a: ld   (ix+$00),$B7]
	move.b	#0x1C,d0
	WRITE_VIDEORAM	0x01                 	| [$134e: ld   (ix+$01),$1C]
	move.b	#0xB6,d0
	WRITE_VIDEORAM	0x20                 	| [$1352: ld   (ix+$20),$B6]
	move.b	#0x1B,d0
	WRITE_VIDEORAM	0x21                 	| [$1356: ld   (ix+$21),$1B]
	move.b	#0xB2,d0
	WRITE_VIDEORAM	0x40                 	| [$135a: ld   (ix+$40),$B2]
	move.b	#0xB5,d0
	WRITE_VIDEORAM	0x41                 	| [$135e: ld   (ix+$41),$B5]

	move.w	#0x600,d7
	bsr		credit_inserted_loop

l_1365:
	jbsr	check_if_credit_inserted_1542                            	| [$1365: call $1542]
	                          	| [$1368: dec  de]
 	                          	| [$1369: ld   a,d]
								| [$136a: cp   $00]
	                         	| [$136c: jr   nz,$1365]
	                          	| [...]
	dbf	d1,l_1322                             	| [$136e: djnz $1322]
                  	| [$1370: ld   de,$4000]

                           	| [$1373: call $1542]
              	| [$1376: dec  de]
              	| [$1377: ld   a,d]
	| [$1378: cp   $00]
             	| [$137a: jr   nz,$1373]
	* bagman inner face tiles: bagman winks
	move.w	#0x926E,d6                      	| [$137c: ld   ix,$926E]
	move.b	#0x16,d0                 	| [$1380: ld   (ix+$00),$16]
	jbsr	osd_w_videoram
	move.b	#0x21,d0
	WRITE_VIDEORAM	0x01                 	| [$1384: ld   (ix+$01),$21]
	move.b	#0x0E,d0
	WRITE_VIDEORAM	0x1f                 	| [$1388: ld   (ix+$1f),$0E]
	move.b	#0x15,d0
	WRITE_VIDEORAM	0x20                 	| [$138c: ld   (ix+$20),$15]
	move.b	#0x20,d0
	WRITE_VIDEORAM	0x21                 	| [$1390: ld   (ix+$21),$20]
	move.b	#0x14,d0
	WRITE_VIDEORAM	0x40                 	| [$1394: ld   (ix+$40),$14]
	move.b	#0x1F,d0
	WRITE_VIDEORAM	0x41                 	| [$1398: ld   (ix+$41),$1F]
	move.b	#0x1E,d0
	WRITE_VIDEORAM	0x61                 	| [$139c: ld   (ix+$61),$1E]
	move.w	#0x1400,d7			| [$13a0: ld   de,$1400]
	bsr		credit_inserted_loop

                           	| [$13a3: call $1542]
  	| [$13a6: dec  de]
  	| [$13a7: ld   a,d]
	                         	| [$13a8: cp   $00]
	                             	| [$13aa: jr   nz,$13A3]
	move.w	#0x926E,d6                      	| [$13ac: ld   ix,$926E]
	moveq	#0,d0
	jbsr	osd_w_videoram                        	| [$13b0: ld   (ix+$00),$00]
	move.b	#0xB2,d0
	WRITE_VIDEORAM	0x01                 	| [$13b4: ld   (ix+$01),$B2]
	move.b	#0x6A,d0
	WRITE_VIDEORAM	0x1f                 	| [$13b8: ld   (ix+$1f),$6A]
	move.b	#0x6B,d0
	WRITE_VIDEORAM	0x20                 	| [$13bc: ld   (ix+$20),$6B]
	move.b	#0xAD,d0
	WRITE_VIDEORAM	0x21                 	| [$13c0: ld   (ix+$21),$AD]
	move.b	#0x6C,d0
	WRITE_VIDEORAM	0x40                 	| [$13c4: ld   (ix+$40),$6C]
	move.b	#0x9B,d0
	WRITE_VIDEORAM	0x41                 	| [$13c8: ld   (ix+$41),$9B]
	move.b	#0x72,d0
	WRITE_VIDEORAM	0x61                 	| [$13cc: ld   (ix+$61),$72]
	
	move.w	#0x4000,d7
	bsr		credit_inserted_loop
      	| [$13d0: ld   de,$4000]

                           	| [$13d3: call $1542]
  	| [$13d6: dec  de]
  	| [$13d7: ld   a,d]
	                         	| [$13d8: cp   $00]
										| [$13da: jr   nz,$13D3]
	move.w	#0x926E,d6                      	| [$13dc: ld   ix,$926E]
	move.b	#0x16,d0                 	| [$13e0: ld   (ix+$00),$16]
	WRITE_VIDEORAM	0
	move.b	#0x21,d0                 	| [$13e4: ld   (ix+$01),$21]
	WRITE_VIDEORAM	1
	move.b	#0x0E,d0                 	| [$13e8: ld   (ix+$1f),$0E]
	WRITE_VIDEORAM	0x1f                 	| [$13e8: ld   (ix+$1f),$0E]
	move.b	#0x15,d0                 	| [$13ec: ld   (ix+$20),$15]
	WRITE_VIDEORAM	0x20                 	| [$13ec: ld   (ix+$20),$15]
	move.b	#0x20,d0                 	| [$13f0: ld   (ix+$21),$20]
	WRITE_VIDEORAM	0x21                 	| [$13f0: ld   (ix+$21),$20]
	move.b	#0x14,d0                 	| [$13f4: ld   (ix+$40),$14]
	WRITE_VIDEORAM	0x40                 	| [$13f4: ld   (ix+$40),$14]
	move.b	#0x1F,d0                 	| [$13f8: ld   (ix+$41),$1F]
	WRITE_VIDEORAM	0x41                 	| [$13f8: ld   (ix+$41),$1F]
	move.b	#0x1E,d0                 	| [$13fc: ld   (ix+$61),$1E]
	WRITE_VIDEORAM	0x61                 	| [$13fc: ld   (ix+$61),$1E]
	move.w	#0x924D,d6                      	| [$1400: ld   ix,$924D]
	move.b	#0x10,d0                 	| [$1404: ld   (ix+$00),$10]
	WRITE_VIDEORAM	0
	move.w	#0x08-1,d1                        	| [$1408: ld   b,$08]
	move.w	#0x9191,d6                      	| [$140a: ld   ix,$9191]
l_140e:
	* bagman fingers move
	move.b	#0xB8,d0
	WRITE_VIDEORAM	0x40                 	| [$140e: ld   (ix+$40),$B8]
	                      	| [$1412: ld   de,$0700]
	move.w	#0x700,d7
	bsr		credit_inserted_loop
	
	                          	| [$1418: dec  de]
	                          	| [$1419: ld   a,d]
	                         	| [$141a: cp   $00]
	                             	| [$141c: jr   nz,$1415]
	move.b	#0xBD,d0                 	| [$141e: ld   (ix+$00),$BD]
	WRITE_VIDEORAM	0
	move.b	#0xBA,d0
	WRITE_VIDEORAM	0x20                 	| [$1422: ld   (ix+$20),$BA]

	move.w	#0x700,d7
	bsr		credit_inserted_loop

                  	| [$1426: ld   de,$0700]

                           	| [$1429: call $1542]
              	| [$142c: dec  de]
              	| [$142d: ld   a,d]
	                         	| [$142e: cp   $00]
	                            	| [$1430: jr   nz,$1429]
	* big bagman fingers
	move.b	#0x43,d0
	WRITE_VIDEORAM	0x40                 	| [$1432: ld   (ix+$40),$43]
								| [$1436: ld   de,$0700]
	move.w	#0x700,d7
	bsr		credit_inserted_loop

                            	| [$1439: call $1542]
    	| [$143c: dec  de]
    	| [$143d: ld   a,d]
	                         	| [$143e: cp   $00]
                             	| [$1440: jr   nz,$1439]
	* big bagman fingers
	
	move.b	#0x45,d0
	WRITE_VIDEORAM	0                 	| [$1442: ld   (ix+$00),$45]
	move.b	#0x44,d0
	WRITE_VIDEORAM	0x20                 	| [$1446: ld   (ix+$20),$44]
	move.b	#0x43,d0
	WRITE_VIDEORAM	0x40                 	| [$144a: ld   (ix+$40),$43]
            	| [$144e: ld   de,$0700]

	move.w	#0x700,d7
	bsr		credit_inserted_loop
                           	| [$1451: call $1542]
                 	| [$1454: dec  de]
                 	| [$1455: ld   a,d]
  	| [$1456: cp   $00]
                	| [$1458: jr   nz,$1451]
                 	| [...]
    dbf	d1,l_140e                        	| [$145a: djnz $140E]
	move.w	#0x2000,d7
	bsr		credit_inserted_loop
					| [$145c: ld   de,$2000]
			
										| [$145f: call $1542]
				| [$1462: dec  de]
				| [$1463: ld   a,d]
	                         	| [$1464: cp   $00]
	                            	| [$1466: jr   nz,$145F]

	* bagman face changes
	move.w	#0x926E,d6                      	| [$1468: ld   ix,$926E]
	move	#0,d0
	WRITE_VIDEORAM	0                        	| [$146c: ld   (ix+$00),$00]
	move.b	#0xB2,d0
	WRITE_VIDEORAM	0x01                 	| [$1470: ld   (ix+$01),$B2]
	move.b	#0x6A,d0
	WRITE_VIDEORAM	0x1f                 	| [$1474: ld   (ix+$1f),$6A]
	move.b	#0x6B,d0
	WRITE_VIDEORAM	0x20                 	| [$1478: ld   (ix+$20),$6B]
	move.b	#0xAD,d0
	WRITE_VIDEORAM	0x21                 	| [$147c: ld   (ix+$21),$AD]
	move.b	#0x6C,d0
	WRITE_VIDEORAM	0x40                 	| [$1480: ld   (ix+$40),$6C]
	move.b	#0x9B,d0
	WRITE_VIDEORAM	0x41                 	| [$1484: ld   (ix+$41),$9B]
	move.b	#0x72,d0
	WRITE_VIDEORAM	0x61                 	| [$1488: ld   (ix+$61),$72]
	move.w	#0x924D,d6                      	| [$148c: ld   ix,$924D]
	move.b	#0x62,d0                 	| [$1490: ld   (ix+$00),$62]
	WRITE_VIDEORAM	0
	move.w	#0x936B,d6                      	| [$1494: ld   hl,$936B]
	move.b	#0x1A,d2                        	| [$1497: ld   c,$1A]
	jbsr	draw_big_bagman_23dd                            	| [$1499: call $23DD]
	move.b	#0x30,d0                        	| [$149c: ld   a,$30]
	move.b	d0,guard_1_struct_6594          	| [$149e: ld   (guard_1_struct_6594),a]
	move.b	#0x0C,d0                        	| [$14a1: ld   a,$0C]
	move.b	d0,unknown_6595                 	| [$14a3: ld   (unknown_6595),a]
	clr.b	d0                               	| [$14a6: ld   a,$00]
	move.b	d0,guard_1_x_6596               	| [$14a8: ld   (guard_1_x_6596),a]
	move.b	#0xD8,d0                        	| [$14ab: ld   a,$D8]
	move.b	d0,guard_1_y_6597               	| [$14ad: ld   (guard_1_y_6597),a]
	move.b	#0x80,d0                        	| [$14b0: ld   a,$80]
	move.b	d0,guard_1_direction_6027       	| [$14b2: ld   (guard_1_direction_6027),a]
	move.w	#0x2000,d7		| [$14b5: ld   de,$2000]
	bsr		credit_inserted_loop
      	

                           	| [$14b8: call $1542]
  	| [$14bb: dec  de]
  	| [$14bc: ld   a,d]
	* big bagman scrolls to the right and disapppears
	                         	| [$14bd: cp   $00]
	                             	| [$14bf: jr   nz,$14B8]
	move.w	#0x936B,d6                      	| [$14c1: ld   hl,$936B]
	move.b	#0x19,d2                        	| [$14c4: ld   c,$19]
l_14c6:
	jbsr	osd_disable_vblank_interrupt			| di

	move.w	d6,-(sp)                        	| [$14c7: push hl]
	movem.w	d1/d2,-(sp)                    	| [$14c8: push bc]
	jbsr	draw_big_bagman_23dd                            	| [$14c9: call $23DD]

	movem.w	(sp)+,d1/d2                    	| [$14cc: pop  bc]
	move.w	(sp)+,d6                        	| [$14cd: pop  hl]
	jbsr	osd_enable_vblank_interrupt						| ei
							| im   1
	*jbsr	rst_38                            	| [$14d1: rst  $38]
    move.w	#0x0800,d7	| [$14d2: ld   de,$0800]
	bsr		credit_inserted_loop
   	

                            	| [$14d5: call $1542]
   	| [$14d8: dec  de]
   	| [$14d9: ld   a,d]
	                         	| [$14da: cp   $00]
	                             	| [$14dc: jr   nz,$14D5]
	                      	| [$14de: ld   de,$FFE0]
	sub.w	#0x20,d6                            	| [$14e1: add  hl,de]

	subq.b	#1,d2                           	| [$14e2: dec  c]
	move.b	d2,d0                           	| [$14e3: ld   a,c]
	cmp.b	#0xFF,d0                         	| [$14e4: cp   $FF]
	jne	l_14c6                             	| [$14e6: jr   nz,$14C6]
	clr.b	d0                               	| [$14e8: xor  a]
	move.b	d0,guard_1_direction_6027       	| [$14e9: ld   (guard_1_direction_6027),a]
	move.b	#0x2C,d0                        	| [$14ec: ld   a,$2C]
	move.b	d0,guard_1_struct_6594          	| [$14ee: ld   (guard_1_struct_6594),a]

   	move.w	#0x4000,d7	| [$14f1: ld   de,$4000]
	bsr		credit_inserted_loop
       	                          	| [$14f4: call $1542]
  	| [$14f7: dec  de]
  	| [$14f8: ld   a,d]
	                         	| [$14f9: cp   $00]
	                             	| [$14fb: jr   nz,$14F4]
l_14fd:
	clr.b	d0                               	| [$14fd: ld   a,$00]
	move.b	d0,check_scenery_disabled_61ED  	| [$14ff: ld   (check_scenery_disabled_61ED),a]
	move.b	#0x01,d1                        	| [$1502: ld   b,$01]
	lea	player_struct_6580,a0          	| [$1504: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$1507: ld   a,$00]
	move.b	d0,gameplay_allowed_6054        	| [$1509: ld   (gameplay_allowed_6054),a]
	tst.b	number_of_credits_6000       	| [$150c: ld   a,(number_of_credits_6000)]
	                         	| [$150f: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$1511: ret  nz] [...]
0:
 	clr.b	d0                               	| [$1512: ld   a,$00]
	jbsr	l_c3a8                            	| [$1514: call $C3A8]
	move.b	#0x01,d0                        	| [$1517: ld   a,$01]
	move.b	d0,unknown_6332                 	| [$1519: ld   (unknown_6332),a]
	                      	| [$151c: ld   a,$00]
	jbsr	osd_disable_display                     	| [$151e: ld   ($A003),a]
	jbsr	clear_screen_C3B7                 	| [$1521: call clear_screen_C3B7]
	move.b	#0x04,d0                        	| [$1524: ld   a,$04]
	jbsr	change_attribute_everywhere_C3A3  	| [$1526: call change_attribute_everywhere_C3A3]
	LEA_ROM	       0x1FA1,a2                      	| [$1529: ld   ix,$1FA1]
	jbsr	osd_read_dipswitches                       	| [$152d: ld   a,($B000)]
 	and.b	#0x20,d0                         	| [$1530: and  $20]
	cmp.b	#0x20,d0                         	| [$1532: cp   $20]
	jne	l_153a                             	| [$1534: jr   nz,$153A]
	* "ALCATRAZ PRISON ..."
	LEA_ROM	       0x1DA5,a2                      	| [$1536: ld   ix,$1DA5]
l_153a:
	jbsr	tell_the_story_d82a                            	| [$153a: call $D82A]
	clr.b	d0                               	| [$153d: xor  a]
	move.b	d0,unknown_6332                 	| [$153e: ld   (unknown_6332),a]
	rts                                    	| [$1541: ret]

credit_inserted_loop:
	* save d1. Without that, if credit is inserted when
	* Bagman is moving his fingers a strange bug occurs and game locks up
	* because d1 is tampered with and the loop never ends
	* also we save then jsr to original routine, as it pops up the stack
	* so saving D1 in original routine would crash the game!
	move.w	d1,-(a7)
	bsr.b	1f
	move.w	(a7)+,d1
	rts
1:
	lsr.w	#8,d7
	lsr.w	#1,d7
0:
	bsr		check_if_credit_inserted_1542
	move	#1,d0
	jbsr	osd_wait
	dbf	d7,0b
	rts
	
check_if_credit_inserted_1542:
	tst.b	number_of_credits_6000       	| [$1542: ld   a,(number_of_credits_6000)]
	                         	| [$1545: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$1547: ret  z] [...]
0:
	move.b	is_intermission_6274,d0         	| [$1548: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$154b: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$154d: ret  z] [...]
0:
	                               	| [$154e: ld   a,$00]
	clr.b	check_scenery_disabled_61ED  	| [$1550: ld   (check_scenery_disabled_61ED),a]
	            	| [$1553: ld   a,(io_read_shit_B800)]
	* pops up the stack if not intermission: interrupt loop and return
	addq.l	#4,a7                        	| [$1556: pop  hl]
	jra	l_14fd                             	| [$1557: jr   $14FD]

l_1565:
	jbsr	check_coin_input_1572                            	| [$1565: call $1572]
	jbsr	l_158f                            	| [$1568: call $158F]
	jbsr	check_coin_input_15ac                            	| [$156b: call $15AC]
	jbsr	l_15c9                            	| [$156e: call $15C9]
	rts                                    	| [$1571: ret]
check_coin_input_1572:
	move.b	player_input_6026,d0            	| [$1572: ld   a,(player_input_6026)]
	and.b	#0x01,d0                         	| [$1575: and  $01]
	move.b	d0,d1                           	| [$1577: ld   b,a]
	move.b	player_previous_input_6050,d0   	| [$1578: ld   a,(player_previous_input_6050)]
	and.b	#0x01,d0                         	| [$157b: and  $01]
	cmp.b	d1,d0                            	| [$157d: cp   b]
	bne.b	0f                               	| [...]
	rts                                    	| [$157e: ret  z] [...]
0:
	move.b	player_previous_input_6050,d0   	| [$157f: ld   a,(player_previous_input_6050)]
	and.b	#0x01,d0                         	| [$1582: and  $01]
	cmp.b	#0x01,d0                         	| [$1584: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$1586: ret  nz] [...]
0:
	* coin inserted
	move.b	#0x01,d0                        	| [$1587: ld   a,$01]
	move.b	#0x01,d2                        	| [$1589: ld   c,$01]
	jbsr	l_15e6                            	| [$158b: call $15E6]
	rts                                    	| [$158e: ret]
l_158f:
	move.b	player_input_6026,d0            	| [$158f: ld   a,(player_input_6026)]
	and.b	#0x02,d0                         	| [$1592: and  $02]
	move.b	d0,d1                           	| [$1594: ld   b,a]
	move.b	player_previous_input_6050,d0   	| [$1595: ld   a,(player_previous_input_6050)]
	and.b	#0x02,d0                         	| [$1598: and  $02]
	cmp.b	d1,d0                            	| [$159a: cp   b]
	bne.b	0f                               	| [...]
	rts                                    	| [$159b: ret  z] [...]
0:
	move.b	player_previous_input_6050,d0   	| [$159c: ld   a,(player_previous_input_6050)]
	and.b	#0x02,d0                         	| [$159f: and  $02]
	cmp.b	#0x02,d0                         	| [$15a1: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$15a3: ret  nz] [...]
0:
	move.b	#0x02,d0                        	| [$15a4: ld   a,$02]
	move.b	#0x02,d2                        	| [$15a6: ld   c,$02]
	jbsr	l_15e6                            	| [$15a8: call $15E6]
	rts                                    	| [$15ab: ret]
check_coin_input_15ac:
	move.b	coin_start_inputs_6051,d0       	| [$15ac: ld   a,(coin_start_inputs_6051)]
	and.b	#0x01,d0                         	| [$15af: and  $01]
	move.b	d0,d1                           	| [$15b1: ld   b,a]
	move.b	coin_start_prev_inputs_6052,d0  	| [$15b2: ld   a,(coin_start_prev_inputs_6052)]
	and.b	#0x01,d0                         	| [$15b5: and  $01]
	cmp.b	d1,d0                            	| [$15b7: cp   b]
	bne.b	0f                               	| [...]
	rts                                    	| [$15b8: ret  z] [...]
0:
	move.b	coin_start_prev_inputs_6052,d0  	| [$15b9: ld   a,(coin_start_prev_inputs_6052)]
	and.b	#0x01,d0                         	| [$15bc: and  $01]
	cmp.b	#0x01,d0                         	| [$15be: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$15c0: ret  nz] [...]
0:
	move.b	#0x06,d0                        	| [$15c1: ld   a,$06]
	move.b	#0x05,d2                        	| [$15c3: ld   c,$05]
	jbsr	l_15e6                            	| [$15c5: call $15E6]
	rts                                    	| [$15c8: ret]
l_15c9:
	move.b	coin_start_inputs_6051,d0       	| [$15c9: ld   a,(coin_start_inputs_6051)]
	and.b	#0x02,d0                         	| [$15cc: and  $02]
	move.b	d0,d1                           	| [$15ce: ld   b,a]
	move.b	coin_start_prev_inputs_6052,d0  	| [$15cf: ld   a,(coin_start_prev_inputs_6052)]
	and.b	#0x02,d0                         	| [$15d2: and  $02]
	cmp.b	d1,d0                            	| [$15d4: cp   b]
	bne.b	0f                               	| [...]
	rts                                    	| [$15d5: ret  z] [...]
0:
	move.b	coin_start_prev_inputs_6052,d0  	| [$15d6: ld   a,(coin_start_prev_inputs_6052)]
	and.b	#0x02,d0                         	| [$15d9: and  $02]
	cmp.b	#0x02,d0                         	| [$15db: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$15dd: ret  nz] [...]
0:
	move.b	#0x0E,d0                        	| [$15de: ld   a,$0E]
	move.b	#0x0A,d2                        	| [$15e0: ld   c,$0A]
	jbsr	l_15e6                            	| [$15e2: call $15E6]
	rts                                    	| [$15e5: ret]
l_15e6:
	move.w	d0,-(sp)                        	| [$15e6: push af]
	jbsr	l_1682                            	| [$15e7: call $1682]
	move.w	(sp)+,d0                        	| [$15ea: pop  af]
	move.b	d0,d1                           	| [$15eb: ld   b,a]
	move.b	flipped_dip_switches_copy_6163,d5	| [$15ec: ld   a,(flipped_dip_switches_copy_6163)]
	move.b	d1,d0                           	| [$15f3: ld   a,b]
	and.b	#0x04,d5                         	| [$15ef: and  $04]
	cmp.b	#0x04,d5                         	| [$15f1: cp   $04]
	jeq	l_15f7                             	| [$15f4: jr   z,$15F7]
	add.b	d0,d0                            	| [$15f6: add  a,a]
l_15f7:
	lea	unknown_61E4,a0                	| [$15f7: ld   hl,unknown_61E4]
	add.b	(a0),d0                          	| [$15fa: add  a,(hl)]
	move.b	d0,(a0)                         	| [$15fb: ld   (hl),a]
	cmp.b	#0x02,d0                         	| [$15fc: cp   $02]
	bcs.b	0f                               	| [...]
	jbsr	l_1602                            	| [$15fe: call nc,$1602]
0:
	rts                                    	| [$1601: ret]
l_1602:
	lea	unknown_61E4,a0                	| [$1602: ld   hl,unknown_61E4]
	move.b	(a0),d0                         	| [$1605: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$1606: cp   $02]
	bcc.b	0f                               	| [...]
	rts                                    	| [$1608: ret  c] [...]
0:
	move.b	number_of_credits_6000,d0       	| [$1609: ld   a,(number_of_credits_6000)]
	cmp.b	#0x90,d0                         	| [$160c: cp   $90]
	bne.b	0f                               	| [...]
	rts                                    	| [$160e: ret  z] [...]
0:
	* add one credit
	moveq	#1,d7
	abcd	d7,d0                        	| [$39a4: add  a,$01 + daa]

	move.b	d0,number_of_credits_6000       	| [$1612: ld   (number_of_credits_6000),a]
	lea	unknown_61E4,a0                	| [$1615: ld   hl,unknown_61E4]
	subq.b	#2,(a0)                         	| [$1618: dec  (hl)] * 2
	move.w	#CREDIT_SND,d0
	jbsr	start_a_sound

	        	| [$161a: call is_ay_sound_playing_D4D9]
	     	| [$161d: jr   nz,$1629]
	          	| [$161f: ld   hl,$5B68]
	      	| [$1622: ld   (ay_sound_pointer_6140),hl]
	       	| [$1625: xor  a]
	      	| [$1626: ld   (ay_sound_start_6142),a]
l_1629:
	jbsr	write_credits_and_lives_162e                            	| [$1629: call $162E]
	jra	l_1602                             	| [$162c: jr   $1602]
write_credits_and_lives_162e:
	move.b	number_of_credits_6000,d0       	| [$162e: ld   a,(number_of_credits_6000)]
	and.b	#0x0F,d0                         	| [$1631: and  $0F]
	move.w	#0x909F,d6                       	| [$1633: ld   ($909F),a]
	jbsr	osd_w_videoram
	move.b	number_of_credits_6000,d0       	| [$1636: ld   a,(number_of_credits_6000)]
	ror.b	#4,d0                            	| [$1639: rrc  a] * 4
	and.b	#0x0F,d0                         	| [$1641: and  $0F]
	move.w	#0x90BF,d6                       	| [$1643: ld   ($90BF),a]
	jbsr	osd_w_videoram
	* first erase the space where lives are drawn
	* we're going to be smarter than the original to avoid flickering
	move.b	#0xE0,d0                        	| [$1646: ld   a,$E0]
	move.b	#0x06,d1                        	| [$1648: ld   b,$06]
	moveq	#0,d2
	move.b	lives_6056,d2
	* only erase the end
	sub.b	d2,d1
	move.w	#0x93BF,d6                      	| [$164a: ld   hl,$93BF]
	lsl.w	#5,d2		| times 0x20 to advance cursor
	sub.w	d2,d6
	jbsr	draw_repeated_char_c373                            	| [$164d: call $C373]
	move.b	lives_6056,d0                   	| [$1650: ld   a,(lives_6056)]
	                         	| [$1653: cp   $00]
	jeq	l_1660                             	| [$1655: jr   z,$1660]
	move.w	#0x93BF,d6                      	| [$1657: ld   hl,$93BF]
	move.b	d0,d1                           	| [$165a: ld   b,a]
	move.b	#0xCA,d0                        	| [$165b: ld   a,$CA]
	jbsr	draw_repeated_char_c373                            	| [$165d: call $C373]
l_1660:
	move.b	must_play_music_6210,d0         	| [$1660: ld   a,(must_play_music_6210)]
	cmp.b	#0x01,d0                         	| [$1663: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$1665: ret  nz] [...]
0:
	move.b	#0x11,d0                        	| [$1666: ld   a,$11]
	move.w	#0x92DF,d6                       	| [$1668: ld   ($92DF),a]
	jbsr	osd_w_videoram
	move.b	#0x13,d0                        	| [$166b: ld   a,$13]
	move.w	#0x92BF,d6                       	| [$166d: ld   ($92BF),a]
	jbsr	osd_w_videoram
	move.b	#0x24,d0                        	| [$1670: ld   a,$24]
	move.w	#0x929F,d6                       	| [$1672: ld   ($929F),a]
	jbsr	osd_w_videoram
	move.b	act_number_60D3,d0                 	| [$1675: ld   a,(act_number_60D3)]
	move.w	#0x925F,d6                       	| [$1678: ld   ($925F),a]
	jbsr	osd_w_videoram
	rts                                    	| [$167b: ret]

l_1682:
	move.b	d2,d0                           	| [$1682: ld   a,c]
	lea	unknown_61E5,a0                	| [$1683: ld   hl,unknown_61E5]
	add.b	(a0),d0                          	| [$1686: add  a,(hl)]
	move.b	d0,(a0)                         	| [$1687: ld   (hl),a]
	rts                                    	| [$1688: ret]
	
read_player_controls_1689:
	move.b	player_input_6026,d0            	| [$1689: ld   a,(player_input_6026)]
	move.b	d0,player_previous_input_6050   	| [$168c: ld   (player_previous_input_6050),a]
*	clr.b	d0                               	| [$168f: xor  a]
*	move.b	d0,0xA007                       	| [$1690: ld   ($A007),a]

* disabled that bug-avoiding code (hardware related?)
* not present in Bagman read_player_controls_xxxx
* seems that the program reads inputs twice, and compares if 
* they're different, loops until they're the same...
*l_1693:
*	jbsr	l_16d9                            	| [$1693: call $16D9]
*	move.b	d0,d1                           	| [$1696: ld   b,a]
*	jbsr	l_16d9                            	| [$1697: call $16D9]
*	cmp.b	d1,d0                            	| [$169a: cp   b]
*	jeq	l_16a2                             	| [$169b: jr   z,$16A2]
*	move.b	d0,unknown_6360                 	| [$169d: ld   (unknown_6360),a]
*	jra	l_1693                             	| [$16a0: jr   $1693]

* actually read the controls
	jbsr	osd_read_inputs

l_16a2:
	not.b	d0                               	| [$16a2: cpl]
	jbsr	restrict_controls_if_not_playing_16f0                            	| [$16a3: call $16F0]
	**jbsr	handle_cocktail_1705                            	| [$16a6: call $1705]
	move.b	d0,player_input_6026            	| [$16a9: ld   (player_input_6026),a]
	move.b	coin_start_inputs_6051,d0       	| [$16ac: ld   a,(coin_start_inputs_6051)]
	move.b	d0,coin_start_prev_inputs_6052  	| [$16af: ld   (coin_start_prev_inputs_6052),a]
l_16b2:
	jbsr	l_16e9                            	| [$16b2: call $16E9]
	move.b	d0,d1                           	| [$16b5: ld   b,a]
	jbsr	l_16e9                            	| [$16b6: call $16E9]
	cmp.b	d1,d0                            	| [$16b9: cp   b]
	jeq	l_16c1                             	| [$16ba: jr   z,$16C1]
	move.b	d0,unknown_6360                 	| [$16bc: ld   (unknown_6360),a]
	jra	l_16b2                             	| [$16bf: jr   $16B2]
l_16c1:
	not.b	d0                               	| [$16c1: cpl]
	jbsr	restrict_controls_if_not_playing_16f0                            	| [$16c2: call $16F0]
	move.b	d0,coin_start_inputs_6051       	| [$16c5: ld   (coin_start_inputs_6051),a]
	jbsr	osd_read_dipswitches                       	| [$16c8: ld   a,($B000)]
	not.b	d0                               	| [$16cb: cpl]
	move.b	d0,flipped_dip_switches_copy_6163	| [$16cc: ld   (flipped_dip_switches_copy_6163),a]
	*move.b	#0x01,d0                        	| [$16cf: ld   a,$01]
	*move.b	d0,0xA007                       	| [$16d1: ld   ($A007),a]
	*move.b	#0x63,d0                        	| [$16d4: ld   a,$63]
*out  ($56),a
	rts                                    	| [$16d8: ret]
l_16d9:
	move.b	#0x07,d0                        	| [$16d9: ld   a,$07]
*out  ($08),a
	move.b	unknown_634D,d0                 	| [$16dd: ld   a,(unknown_634D)]
*out  ($09),a
	move.b	#0x0E,d0                        	| [$16e2: ld   a,$0E]
*out  ($08),a
*in   a,($0C)
	rts                                    	| [$16e8: ret]
l_16e9:
	move.b	#0x0F,d0                        	| [$16e9: ld   a,$0F]
*out  ($08),a
*in   a,($0C)
	rts                                    	| [$16ef: ret]
restrict_controls_if_not_playing_16f0:
	move.w	d0,-(sp)                        	| [$16f0: push af]
	move.b	check_scenery_disabled_61ED,d0  	| [$16f1: ld   a,(check_scenery_disabled_61ED)]
	cmp.b	#0x01,d0                         	| [$16f4: cp   $01]
	jeq	l_1701                             	| [$16f6: jr   z,$1701]
	move.b	player_controls_blocked_61F2,d0 	| [$16f8: ld   a,(player_controls_blocked_61F2)]
	cmp.b	#0x01,d0                         	| [$16fb: cp   $01]
	jeq	l_1701                             	| [$16fd: jr   z,$1701]
	move.w	(sp)+,d0                        	| [$16ff: pop  af]
	rts                                    	| [$1700: ret]
l_1701:
	move.w	(sp)+,d0                        	| [$1701: pop  af]
	* keep only coin inputs
	and.b	#0x03,d0                         	| [$1702: and  $03]
	rts                                    	| [$1704: ret]
handle_cocktail_1705:
	move.b	d0,d1                           	| [$1705: ld   b,a]
	jbsr	osd_read_dipswitches                       	| [$1706: ld   a,($B000)]
	not.b	d0                               	| [$1709: cpl]
	rol.b	#1,d0                            	| [$170a: rlc  a]
	and.b	#0x01,d0                         	| [$170c: and  $01]
	move.b	d0,d2                           	| [$170e: ld   c,a]
	move.b	current_player_617C,d0          	| [$170f: ld   a,(current_player_617C)]
	and.b	d2,d0                            	| [$1712: and  c]
	move.b	d0,unknown_61FD                 	| [$1713: ld   (unknown_61FD),a]
	cmp.b	#0x01,d0                         	| [$1716: cp   $01]
	jeq	l_171c                             	| [$1718: jr   z,$171C]
	move.b	d1,d0                           	| [$171a: ld   a,b]
	rts                                    	| [$171b: ret]
l_171c:
	move.b	coin_start_inputs_6051,d0       	| [$171c: ld   a,(coin_start_inputs_6051)]
	and.b	#0xF8,d0                         	| [$171f: and  $F8]
	move.b	d0,d2                           	| [$1721: ld   c,a]
	move.b	d1,d0                           	| [$1722: ld   a,b]
	and.b	#0x07,d0                         	| [$1723: and  $07]
	or.b	d2,d0                             	| [$1725: or   c]
	rts                                    	| [$1726: ret]
	

l_1731:
	move.b	gameplay_allowed_6054,d0        	| [$1731: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$1734: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$1736: ret  z] [...]
0:
	move.b	player_input_6026,d0            	| [$1737: ld   a,(player_input_6026)]
	and.b	#0x03,d0                         	| [$173a: and  $03]
	move.b	d0,player_input_6026            	| [$173c: ld   (player_input_6026),a]
	LEA_ROM	       0x1820,a2                      	| [$173f: ld   ix,$1820]
	move.b	is_key_hunt_phase_6341,d0                 	| [$1743: ld   a,(is_key_hunt_phase_6341)]
	cmp.b	#0x01,d0                         	| [$1746: cp   $01]
	jeq	l_174e                             	| [$1748: jr   z,$174E]
	LEA_ROM	       0x1848,a2                      	| [$174a: ld   ix,$1848]
l_174e:
	lea	player_struct_6580,a3          	| [$174e: ld   iy,player_struct_6580]
	move.w	#0x0004,d3                      	| [$1752: ld   de,$0004] 4
	move.b	unknown_6288,d0                 	| [$1755: ld   a,(unknown_6288)]
	                         	| [$1758: cp   $00]
	bne.b	0f                               	| [...]
	jbsr	l_17f1                            	| [$175a: call z,$17F1]
0:
	move.b	unknown_6288,d0                 	| [$175d: ld   a,(unknown_6288)]
l_1760:
	                         	| [$1760: cp   $00]
	jeq	l_1769                             	| [$1762: jr   z,$1769]
	add.w	d3,a2                            	| [$1764: add  ix,de]
	subq.b	#1,d0                           	| [$1766: dec  a]
	jra	l_1760                             	| [$1767: jr   $1760]
l_1769:
	move.b	unknown_635D,d0                 	| [$1769: ld   a,(unknown_635D)]
	cmp.b	#0x01,d0                         	| [$176c: cp   $01]
	jeq	l_17c3                             	| [$176e: jr   z,$17C3]
	move.b	(0x03,a2),d0                    	| [$1770: ld   a,(ix+$03)]
	cmp.b	#0xFF,d0                         	| [$1773: cp   $FF]
	jeq	l_17c9                             	| [$1775: jr   z,$17C9]
	cmp.b	#0xFE,d0                         	| [$1777: cp   $FE]
	jeq	l_17e3                             	| [$1779: jp   z,$17E3]
	and.b	#0x80,d0                         	| [$177c: and  $80]
	cmp.b	#0x80,d0                         	| [$177e: cp   $80]
	bne.b	0f                               	| [...]
	jbsr	l_17bd                            	| [$1780: call z,$17BD]
0:
	move.b	(0x03,a2),d0                    	| [$1783: ld   a,(ix+$03)]
	move.b	d0,d1                           	| [$1786: ld   b,a]
	move.b	player_input_6026,d0            	| [$1787: ld   a,(player_input_6026)]
	and.b	#0x07,d0                         	| [$178a: and  $07]
	or.b	d1,d0                             	| [$178c: or   b]
	move.b	d0,player_input_6026            	| [$178d: ld   (player_input_6026),a]
	move.b	(0x02,a3),d0                    	| [$1790: ld   a,(iy+$02)]
	cmp.b	(A2),d0                     	| [$1793: cp   (ix+$00)]
	beq.b	0f                               	| [...]
	rts                                    	| [$1796: ret  nz] [...]
0:
	move.b	(0x03,a3),d0                    	| [$1797: ld   a,(iy+$03)]
	cmp.b	(0x01,a2),d0                     	| [$179a: cp   (ix+$01)]
	beq.b	0f                               	| [...]
	rts                                    	| [$179d: ret  nz] [...]
0:
	move.b	player_screen_600D,d0           	| [$179e: ld   a,(player_screen_600D)]
	cmp.b	(0x02,a2),d0                     	| [$17a1: cp   (ix+$02)]
	beq.b	0f                               	| [...]
	rts                                    	| [$17a4: ret  nz] [...]
0:
l_17a5:
	move.b	unknown_6288,d0                 	| [$17a5: ld   a,(unknown_6288)]
	addq.b	#1,d0                           	| [$17a8: inc  a]
	move.b	d0,unknown_6288                 	| [$17a9: ld   (unknown_6288),a]
	move.b	player_input_6026,d0            	| [$17ac: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$17af: and  $80]
	cmp.b	#0x80,d0                         	| [$17b1: cp   $80]
	bne.b	0f                               	| [...]
	rts                                    	| [$17b3: ret  z] [...]
0:
	move.b	player_input_6026,d0            	| [$17b4: ld   a,(player_input_6026)]
	and.b	#0x07,d0                         	| [$17b7: and  $07]
	move.b	d0,player_input_6026            	| [$17b9: ld   (player_input_6026),a]
	rts                                    	| [$17bc: ret]
l_17bd:
	move.b	#0x01,d0                        	| [$17bd: ld   a,$01]
	move.b	d0,unknown_635D                 	| [$17bf: ld   (unknown_635D),a]
	rts                                    	| [$17c2: ret]
l_17c3:
	clr.b	d0                               	| [$17c3: xor  a]
	move.b	d0,unknown_635D                 	| [$17c4: ld   (unknown_635D),a]
	jra	l_17a5                             	| [$17c7: jr   $17A5]
l_17c9:
	move.b	#0x10,d0                        	| [$17c9: ld   a,$10]
	move.b	d0,guard_1_y_6597               	| [$17cb: ld   (guard_1_y_6597),a]
	move.b	d0,guard_2_y_659B               	| [$17ce: ld   (guard_2_y_659B),a]
	move.b	#0xD0,d0                        	| [$17d1: ld   a,$D0]
	move.b	d0,guard_1_x_6596               	| [$17d3: ld   (guard_1_x_6596),a]
	move.b	#0xE0,d0                        	| [$17d6: ld   a,$E0]
	move.b	d0,guard_2_x_659A               	| [$17d8: ld   (guard_2_x_659A),a]
	move.b	elevator_y_screen_4_6587,d0	| [$17db: ld   a,(elevator_y_screen_4_6587)]
	cmp.b	#0x11,d0                         	| [$17de: cp   $11]
	beq.b	0f                               	| [...]
	rts                                    	| [$17e0: ret  nz] [...]
0:
	jra	l_17a5                             	| [$17e1: jr   $17A5]
l_17e3:
	move.b	wagon_data_658A,d0              	| [$17e3: ld   a,(wagon_data_658A)]
	cmp.b	#0x60,d0                         	| [$17e6: cp   $60]
	beq.b	0f                               	| [...]
	rts                                    	| [$17e8: ret  nz] [...]
0:
	move.b	unknown_6019,d0                 	| [$17e9: ld   a,(unknown_6019)]
	cmp.b	#0x02,d0                         	| [$17ec: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$17ee: ret  nz] [...]
0:
	jra	l_17a5                             	| [$17ef: jr   $17A5]
l_17f1:
	move.w	#0x91C3,d6                      	| [$17f1: ld   hl,$91C3]
	move.w	d6,barrow_screen_params_61C4    	| [$17f4: ld   (barrow_screen_params_61C4),hl]
	move.w	d6,unknown_screen_address_61FA  	| [$17f7: ld   (unknown_screen_address_61FA),hl]
	move.b	#0x01,d0                        	| [$17fa: ld   a,$01]
	move.b	d0,barrow_screen_61C6           	| [$17fc: ld   (barrow_screen_61C6),a]
	move.b	d0,unknown_61FC                 	| [$17ff: ld   (unknown_61FC),a]
	move.b	#0x05,d0                        	| [$1802: ld   a,$05]
	move.b	d0,guard_1_screen_6099          	| [$1804: ld   (guard_1_screen_6099),a]
	move.b	d0,guard_2_screen_609A          	| [$1807: ld   (guard_2_screen_609A),a]
	move.b	#0x20,d0                        	| [$180a: ld   a,$20]
	move.b	d0,guard_1_x_6596               	| [$180c: ld   (guard_1_x_6596),a]
	move.b	d0,guard_2_x_659A               	| [$180f: ld   (guard_2_x_659A),a]
	move.b	#0xA0,d0                        	| [$1812: ld   a,$A0]
	move.b	d0,guard_1_y_6597               	| [$1814: ld   (guard_1_y_6597),a]
	move.b	d0,guard_2_y_659B               	| [$1817: ld   (guard_2_y_659B),a]
	move.b	#0x0C,d0                        	| [$181a: ld   a,$0C]
	move.b	d0,tile_at_the_destroyable_wall_location_627D                 	| [$181c: ld   (tile_at_the_destroyable_wall_location_627D),a]
	rts                                    	| [$181f: ret]

* < D3: guard logical address
* > A3: relevant table
choose_screen_intersections_table_1918:
	move.w	d3,d0				| [$1918] ld   a,d
	lsr.w	#8,d0				| get MSB
	LEA_ROM	       0x224E,a3                      	| [$1919: ld   iy,$224E]
	cmp.b	#0x34,d0                         	| [$191d: cp   $34]
	bcc.b	0f                               	| [...]
	rts                                    	| [$191f: ret  c] [...]
0:
	LEA_ROM	       0x225D,a3                      	| [$1920: ld   iy,$225D]
	cmp.b	#0x38,d0                         	| [$1924: cp   $38]
	bcc.b	0f                               	| [...]
	rts                                    	| [$1926: ret  c] [...]
0:
	LEA_ROM	       0x21E8,a3                      	| [$1927: ld   iy,$21E8]
	cmp.b	#0x44,d0                         	| [$192b: cp   $44]
	bcc.b	0f                               	| [...]
	rts                                    	| [$192d: ret  c] [...]
0:
	LEA_ROM	       0x2209,a3                      	| [$192e: ld   iy,$2209]
	cmp.b	#0x48,d0                         	| [$1932: cp   $48]
	bcc.b	0f                               	| [...]
	rts                                    	| [$1934: ret  c] [...]
0:
	LEA_ROM	       0x2230,a3                      	| [$1935: ld   iy,$2230]
	rts                                    	| [$1939: ret]

 * not the same screen as player:	 decide something?
 * < D1:	guard screen
 * < D3: guard screen address

guide_guard_on_hidden_screen_193A:

	move.l	a2,-(sp)                        	| [$193a: push ix]

	move.l	a3,-(sp)                        	| [$193c: push iy]

	move.l	a0,-(sp)                        	| [$193e: push hl]
	movem.w	d1/d2,-(sp)                    	| [$193f: push bc]
	movem.w	d3/d4,-(sp)                    	| [$1940: push de]
	move.b	d1,d0                           	| [$1941: ld   a,b]
	cmp.b	#0x01,d0                         	| [$1942: cp   $01]
	jne	l_194c                             	| [$1944: jr   nz,$194C]
	LEA_ROM	       0x2275,a3                      	| [$1946: ld   iy,$2275]
	jra	l_1995                             	| [$194a: jr   $1995]
l_194c:
	cmp.b	#0x02,d0                         	| [$194c: cp   $02]
	jne	l_1963                             	| [$194e: jr   nz,$1963]
	move.b	d0,d1                           	| [$1950: ld   b,a]
	move.b	player_screen_600D,d0           	| [$1951: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$1954: cp   b]
	jcc	l_195d                             	| [$1955: jr   nc,$195D]
	LEA_ROM	       0x2293,a3                      	| [$1957: ld   iy,$2293]
	jra	l_1995                             	| [$195b: jr   $1995]
l_195d:
	LEA_ROM	       0x22BA,a3                      	| [$195d: ld   iy,$22BA]
	jra	l_1995                             	| [$1961: jr   $1995]
l_1963:
	cmp.b	#0x03,d0                         	| [$1963: cp   $03]
	jne	l_197a                             	| [$1965: jr   nz,$197A]
	move.b	d0,d1                           	| [$1967: ld   b,a]
	move.b	player_screen_600D,d0           	| [$1968: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$196b: cp   b]
	jcc	l_1974                             	| [$196c: jr   nc,$1974]
	LEA_ROM	       0x22E1,a3                      	| [$196e: ld   iy,$22E1]
	jra	l_1995                             	| [$1972: jr   $1995]
l_1974:
	LEA_ROM	       0x22FF,a3                      	| [$1974: ld   iy,$22FF]
	jra	l_1995                             	| [$1978: jr   $1995]
l_197a:
	cmp.b	#0x04,d0                         	| [$197a: cp   $04]
	jne	l_1991                             	| [$197c: jr   nz,$1991]
	move.b	d0,d1                           	| [$197e: ld   b,a]
	move.b	player_screen_600D,d0           	| [$197f: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$1982: cp   b]
	jcc	l_198b                             	| [$1983: jr   nc,$198B]
	LEA_ROM	       0x231D,a3                      	| [$1985: ld   iy,$231D]
	jra	l_1995                             	| [$1989: jr   $1995]
l_198b:
	LEA_ROM	       0x232C,a3                      	| [$198b: ld   iy,$232C]
	jra	l_1995                             	| [$198f: jr   $1995]
l_1991:
	LEA_ROM	       0x233B,a3                      	| [$1991: ld   iy,$233B]
l_1995:
	movem.w	(sp)+,d3/d4                    	| [$1995: pop  de]
l_1996:
	* read address (big endian, even in original ROM!!)
	LOAD_AX_BE_WORD_DY	a3,d6
					| [$1996: ld   a,(iy+$00)]
                  	| [$1999: ld   h,a]
                  	| [$199a: ld   a,(iy+$01)]
                  	| [$199d: ld   l,a]
                   	| [$199e: xor  a]
     cmp.w	d3,d6              	| [$199f: sbc  hl,de]
	jeq	l_19b3                             	| [$19a1: jr   z,$19B3]
	addq.w	#3,a3                           	| [$19a3: inc  iy] * 3
	move.b	(0x02,a3),d0                    	| [$19a9: ld   a,(iy+$02)]
	cmp.b	#0xFF,d0                         	| [$19ac: cp   $FF]
	jne	l_1996                             	| [$19ae: jr   nz,$1996]
	jra	l_19d1                             	| [$19b0: jp   $19D1]
 * special location found
l_19b3:
	move.b	(0x02,a3),d0                    	| [$19b3: ld   a,(iy+$02)]
	cmp.b	#0x80,d0                         	| [$19b6: cp   $80]
	jne	l_19c0                             	| [$19b8: jr   nz,$19C0]
	jbsr	set_guard_direction_right_F6A2    	| [$19ba: call set_guard_direction_right_F6A2]
	jra	l_19d1                             	| [$19bd: jp   $19D1]
l_19c0:
	cmp.b	#0x40,d0                         	| [$19c0: cp   $40]
	jne	l_19ca                             	| [$19c2: jr   nz,$19CA]
	jbsr	set_guard_direction_left_F6C0     	| [$19c4: call set_guard_direction_left_F6C0]
	jra	l_19d1                             	| [$19c7: jp   $19D1]
l_19ca:
	move.l	guard_direction_pointer_6095,a2	| [$19ca: ld   ix,(guard_direction_pointer_6095)]
	move.b	d0,(A2)                    	| [$19ce: ld   (ix+$00),a]
l_19d1:

	movem.w	(sp)+,d1/d2                    	| [$19d1: pop  bc]
	move.l	(sp)+,a0                        	| [$19d2: pop  hl]
	move.l	(sp)+,a3                        	| [$19d3: pop  iy]
	move.l	(sp)+,a2                        	| [$19d5: pop  ix]
	move.l	(sp)+,a0                        	| [$19d7: pop  hl]
	jra	l_f644                             	| [$19d8: jp   $F644]

* < HL: screen address
draw_big_bagman_23dd:
	move.b	#0x01,d0                        	| [$23dd: ld   a,$01]
	jbsr	hw_video_shit_d8e2                            	| [$23df: call $D8E2]
	move.b	#0x12,d1                        	| [$23e2: ld   b,$12]

	move.w	d6,d3                        	| [$23e4: push hl]
	                        	| [$23e5: pop  de]
	                           	| [$23e6: ld   a,d]
	add.w	#0x0800,d3                         	| [$23e7: add  a,$08]
	                           	| [$23e9: ld   d,a]
	move.b	#0x2C,d0                        	| [$23ea: ld   a,$2C]

	move.w	d6,-(sp)                        	| [$23ec: push hl]
l_23ed:
	exg	d3,d6
	jbsr	osd_w_colorram
	addq.w	#1,d6
	exg	d3,d6
	                         	| [$23ed: ld   (de),a]
	move.b	#0xE0,d0                      	| [$23ee: ld   (hl),$E0]
	jbsr	osd_w_videoram
	addq.w	#1,d6
                           	| [$23f0: inc  de]
	                           	| [$23f1: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_23ed                             	| [$23f2: djnz $23ED]
	move.w	(sp)+,d6                        	| [$23f4: pop  hl]
	LEA_ROM	       0x254E,a2                      	| [$23f5: ld   ix,$254E]
	* set D3 as it's used in 250F
	move.w	#-0x20,d3                      	| [$23f9: ld   de,$FFE0]
	add.w	d3,d6                            	| [$23fc: add  hl,de]
	move.b	#0x2C,d0                        	| [$23fd: ld   a,$2C]
	exg	d0,d7                              	| [$23ff: ex   af,af']
	jbsr	draw_big_bagman_row_250f                            	| [$2400: call $250F]
	LEA_ROM	       0x2557,a2                      	| [$2403: ld   ix,$2557]
	jbsr	draw_big_bagman_row_250f                            	| [$2407: call $250F]
	LEA_ROM	       0x2561,a2                      	| [$240a: ld   ix,$2561]
	jbsr	draw_big_bagman_row_250f                            	| [$240e: call $250F]
	LEA_ROM	       0x256B,a2                      	| [$2411: ld   ix,$256B]
	jbsr	draw_big_bagman_row_250f                            	| [$2415: call $250F]
	LEA_ROM	       0x2577,a2                      	| [$2418: ld   ix,$2577]
	jbsr	draw_big_bagman_row_250f                            	| [$241c: call $250F]
	LEA_ROM	       0x2586,a2                      	| [$241f: ld   ix,$2586]
	jbsr	draw_big_bagman_row_250f                            	| [$2423: call $250F]
	LEA_ROM	       0x2597,a2                      	| [$2426: ld   ix,$2597]
	jbsr	draw_big_bagman_row_250f                            	| [$242a: call $250F]
	move.b	#0x28,d0                        	| [$242d: ld   a,$28]
	exg	d0,d7                              	| [$242f: ex   af,af']
	LEA_ROM	       0x25A8,a2                      	| [$2430: ld   ix,$25A8]
	jbsr	draw_big_bagman_row_250f                            	| [$2434: call $250F]
	LEA_ROM	       0x25B9,a2                      	| [$2437: ld   ix,$25B9]
	jbsr	draw_big_bagman_row_250f                            	| [$243b: call $250F]
	LEA_ROM	       0x25CA,a2                      	| [$243e: ld   ix,$25CA]
	jbsr	draw_big_bagman_row_250f                            	| [$2442: call $250F]
	LEA_ROM	       0x25DB,a2                      	| [$2445: ld   ix,$25DB]
	jbsr	draw_big_bagman_row_250f                            	| [$2449: call $250F]
	LEA_ROM	       0x25F0,a2                      	| [$244c: ld   ix,$25F0]
	jbsr	draw_big_bagman_row_250f                            	| [$2450: call $250F]
	LEA_ROM	       0x2605,a2                      	| [$2453: ld   ix,$2605]
	jbsr	draw_big_bagman_row_250f                            	| [$2457: call $250F]
	LEA_ROM	       0x261A,a2                      	| [$245a: ld   ix,$261A]
	jbsr	draw_big_bagman_row_250f                            	| [$245e: call $250F]
	move.b	#0x18,d0                        	| [$2461: ld   a,$18]
	exg	d0,d7                              	| [$2463: ex   af,af']
	LEA_ROM	       0x262F,a2                      	| [$2464: ld   ix,$262F]
	jbsr	draw_big_bagman_row_250f                            	| [$2468: call $250F]
	move.b	#0x1C,d0                        	| [$246b: ld   a,$1C]
	exg	d0,d7                              	| [$246d: ex   af,af']
	LEA_ROM	       0x2533,a3                      	| [$246e: ld   iy,$2533]
	
	and.w	#0x00FF,d2                               	| [$2472: ld   b,$00]
	add.w	d2,a3                            	| [$2474: add  iy,bc]
	move.b	(A3),d0                    	| [$2476: ld   a,(iy+$00)]
	                         	| [$2479: cp   $00]
	jeq	l_2497                             	| [$247b: jr   z,$2497]
	cmp.b	#0x01,d0                         	| [$247d: cp   $01]
	jeq	l_24ad                             	| [$247f: jr   z,$24AD]
	cmp.b	#0x02,d0                         	| [$2481: cp   $02]
	jeq	l_24c3                             	| [$2483: jr   z,$24C3]
	cmp.b	#0x03,d0                         	| [$2485: cp   $03]
	jeq	l_24d9                             	| [$2487: jr   z,$24D9]
	cmp.b	#0x10,d0                         	| [$2489: cp   $10]
	jeq	l_24ef                             	| [$248b: jr   z,$24EF]
	cmp.b	#0x11,d0                         	| [$248d: cp   $11]
	jeq	l_24f7                             	| [$248f: jr   z,$24F7]
	cmp.b	#0x12,d0                         	| [$2491: cp   $12]
	jeq	l_24ff                             	| [$2493: jr   z,$24FF]
	jra	l_2507                             	| [$2495: jr   $2507]
l_2497:
	LEA_ROM	       0x2644,a2                      	| [$2497: ld   ix,$2644]
	jbsr	draw_big_bagman_row_250f                            	| [$249b: call $250F]
	LEA_ROM	       0x2659,a2                      	| [$249e: ld   ix,$2659]
	jbsr	draw_big_bagman_row_250f                            	| [$24a2: call $250F]
	LEA_ROM	       0x2663,a2                      	| [$24a5: ld   ix,$2663]
	jbsr	draw_big_bagman_row_250f                            	| [$24a9: call $250F]
	rts                                    	| [$24ac: ret]
l_24ad:
	LEA_ROM	       0x2682,a2                      	| [$24ad: ld   ix,$2682]
	jbsr	draw_big_bagman_row_250f                            	| [$24b1: call $250F]
	LEA_ROM	       0x2697,a2                      	| [$24b4: ld   ix,$2697]
	jbsr	draw_big_bagman_row_250f                            	| [$24b8: call $250F]
	LEA_ROM	       0x26A3,a2                      	| [$24bb: ld   ix,$26A3]
	jbsr	draw_big_bagman_row_250f                            	| [$24bf: call $250F]
	rts                                    	| [$24c2: ret]
l_24c3:
	LEA_ROM	       0x26C2,a2                      	| [$24c3: ld   ix,$26C2]
	jbsr	draw_big_bagman_row_250f                            	| [$24c7: call $250F]
	LEA_ROM	       0x26D7,a2                      	| [$24ca: ld   ix,$26D7]
	jbsr	draw_big_bagman_row_250f                            	| [$24ce: call $250F]
	LEA_ROM	       0x26E2,a2                      	| [$24d1: ld   ix,$26E2]
	jbsr	draw_big_bagman_row_250f                            	| [$24d5: call $250F]
	rts                                    	| [$24d8: ret]
l_24d9:
	LEA_ROM	       0x2702,a2                      	| [$24d9: ld   ix,$2702]
	jbsr	draw_big_bagman_row_250f                            	| [$24dd: call $250F]
	LEA_ROM	       0x2717,a2                      	| [$24e0: ld   ix,$2717]
	jbsr	draw_big_bagman_row_250f                            	| [$24e4: call $250F]
	LEA_ROM	       0x2721,a2                      	| [$24e7: ld   ix,$2721]
	jbsr	draw_big_bagman_row_250f                            	| [$24eb: call $250F]
	rts                                    	| [$24ee: ret]
l_24ef:
	LEA_ROM	       0x266D,a2                      	| [$24ef: ld   ix,$266D]
	jbsr	draw_big_bagman_row_250f                            	| [$24f3: call $250F]
	rts                                    	| [$24f6: ret]
l_24f7:
	LEA_ROM	       0x26AD,a2                      	| [$24f7: ld   ix,$26AD]
	jbsr	draw_big_bagman_row_250f                            	| [$24fb: call $250F]
	rts                                    	| [$24fe: ret]
l_24ff:
	LEA_ROM	       0x26ED,a2                      	| [$24ff: ld   ix,$26ED]
	jbsr	draw_big_bagman_row_250f                            	| [$2503: call $250F]
	rts                                    	| [$2506: ret]
l_2507:
	LEA_ROM	       0x272B,a2                      	| [$2507: ld   ix,$272B]
	jbsr	draw_big_bagman_row_250f                            	| [$250b: call $250F]
	rts                                    	| [$250e: ret]
	
draw_big_bagman_row_250f:
	move.w	d6,-(sp)                        	| [$250f: push hl]
	move.b	(A2)+,d0                    	| [$2510: ld   a,(ix+$00)]
	                           	| [$2513: inc  ix]
	move.b	d2,d1                           	| [$2516: ld   b,c]
	cmp.b	d2,d0                            	| [$2515: cp   c]
	jcc	l_251a                             	| [$2517: jr   nc,$251A]
	move.b	d0,d1                           	| [$2519: ld   b,a]
l_251a:
	move.b	d1,d0                           	| [$251a: ld   a,b]
	                         	| [$251b: cp   $00]
	bne.b	0f                               	| [...]
	* this cannot happen, or the game would crash since D6 is on the stack
	* actually it probably happens when big bagman scrolls out of the screen
	* it works to fix d6 pop: no more crashes. I don't know how the original
	* game handles this error, but it doesn't matter.
	move.w	(sp)+,d6
	rts                                    	| [$251d: ret  z] [...]
0:
	move.b	(A2),d0                    	| [$251e: ld   a,(ix+$00)]
	jbsr	osd_w_videoram                         	| [$2521: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$2522: push hl]
	                           	| [$2523: ld   a,h]
	add.w	#0x0800,d6                         	| [$2524: add  a,$08]
	                           	| [$2526: ld   h,a]
	exg	d0,d7                              	| [$2527: ex   af,af']
	jbsr	osd_w_colorram                         	| [$2528: ld   (hl),a]
	exg	d0,d7                              	| [$2529: ex   af,af']
	move.w	(sp)+,d6                        	| [$252a: pop  hl]
	add.w	d3,d6                            	| [$252b: add  hl,de]
	addq.w	#1,a2                           	| [$252c: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_251a                             	| [$252e: djnz $251A]
	move.w	(sp)+,d6                        	| [$2530: pop  hl]
	addq.w	#1,d6                           	| [$2531: inc  hl]
	rts                                    	| [$2532: ret]



 * internal actual add to score routine
 * score is stored from 6176 to 6178 for player 1
 * 6179 to 617B for player 2
really_add_to_score_5500:
	* we don't want to score if moves are guided / intermission
	move.b	check_scenery_disabled_61ED,d0                 	| [$5500: ld   a,(check_scenery_disabled_61ED)]
	cmp.b	#0x01,d0                         	| [$5503: cp   $01]
	bne.b	0f
	rts                                    	| [$5505: ret  z]
0:
	move.b	current_player_617C,d0          	| [$5506: ld   a,(current_player_617C)]
	                         	| [$5509: cp   $00]
	jne	l_5531                             	| [$550b: jp   nz,$5531]
	lea	player_1_score_6176,a2                	| [$550e: ld   ix,player_1_score_6176]
l_5512:
	tst.b	very_easy_flag
	beq.b	0f
	lsr.w	#1,d6		| 1/2th of score in very easy mode
0:
	* pre-shift D6 MSB as it would destroy X flag
	move.w	d6,d5                           	| [$551d: ld   a,h]
	lsr.w	#8,d5
	CLEAR_XC_FLAG                              	| [$5512: xor  a]
	move.b	d6,d0                           	| [$5513: ld   a,l]
	move.b	d0,d1                           	| [$5514: ld   b,a]
	move.b	(A2),d0                    	| [$5515: ld   a,(ix+$00)]
	abcd	d1,d0                            	| [$5518: add  a,b + daa]
	move.b	d0,(A2)                    	| [$551a: ld   (ix+$00),a]
											| [$551e: ld   b,a]
	move.b	(0x01,a2),d0                    	| [$551f: ld   a,(ix+$01)]
	abcd	d5,d0 								| [ adc  a,b+daa ]
	move.b	d0,(0x01,a2)                    	| [$5524: ld   (ix+$01),a]
	move.b	(0x02,a2),d0                    	| [$5527: ld   a,(ix+$02)]
	moveq	#0,d7
	abcd	d7,d0				| [adc  a,$00 + daa]
	move.b	d0,(0x02,a2)                    	| [$552d: ld   (ix+$02),a]
	rts                                    	| [$5530: ret]
l_5531:
	lea	player_2_score_6179,a2                	| [$5531: ld   ix,player_2_score_6179]
	jra	l_5512                             	| [$5535: jr   $5512]

* < in:	 ix:	 player "structure"
* <             iy:	 guard "structure"
guard_collision_5537:
	move.b	(0x02,a3),d0                    	| [$5537: ld   a,(iy+$02)]  guard x
	move.b	d0,d1                           	| [$553a: ld   b,a]
	move.b	(0x02,a2),d0                    	| [$553b: ld   a,(ix+$02)]  player x
	jbsr	within_bounds_554E                	| [$553e: call within_bounds_554E]
	move.b	(0x03,a3),d0                    	| [$5541: ld   a,(iy+$03)] guard y
	move.b	d0,d1                           	| [$5544: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$5545: ld   a,(ix+$03)]  player y
	jbsr	within_bounds_554E                	| [$5548: call within_bounds_554E]
	move.b	#0x01,d0                        	| [$554b: ld   a,$01] set flag to 1: collision with guard
	rts                                    	| [$554d: ret]

* check if a+11 > b and a-8 < b (kind of square collision if applied to both x and y)
* in:	 a,b: values to compare
* out:	 if both conditions are OK, returns, else pops the stack and exits from 5537
within_bounds_554E:
	move.b	d0,d2                           	| [$554e: ld   c,a]
	add.b	#0x0B,d0                         	| [$554f: add  a,$0B]
	cmp.b	d1,d0                            	| [$5551: cp   b]
	jcs	l_555b                             	| [$5552: jr   c,$555B]
	move.b	d2,d0                           	| [$5554: ld   a,c]
	sub.b	#0x08,d0                         	| [$5555: sub  $08]
	cmp.b	d1,d0                            	| [$5557: cp   b]
	jcc	l_555b                             	| [$5558: jr   nc,$555B]
	rts                                    	| [$555a: ret]
* okay:	return from guard_collision_5537 directly (pop)
l_555b:
	addq.l	#4,a7                        	| [$555b: pop  af]
	clr.b	d0                               	| [$555c: xor  a]
	rts                                    	| [$555d: ret]

* display ASCII text on line until code 0x3F is reached
* < a1: pointer on text
* < d6: start address of screen

display_text_55d9:
	move.w	#-0x20,d1                        	| [$55d9: ld   bc,$FFE0] 65504
												| [$55d9: ld   bc,$FFE0] 65504
	move.b	(a1),d0                         	| [$55dc: ld   a,(de)]
	cmp.b	#0x3F,d0                         	| [$55dd: cp   $3F]
	bne.b	0f
	rts                                    	| [$55df: ret  z]
0:
	* subtract 0x30, now numbers are in tiles 0-9, letters follow with
	* a gap in between
	sub.b	#0x30,d0                         	| [$55e0: sub  $30]
	jbsr	osd_w_videoram                         	| [$55e2: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$55e3: push hl]
												| [$55e4: ld   a,h]
	add.w	#0x0800,d6                         	| [$55e5: add  a,$08]
										| [$55e7: ld   h,a]
	* bank 0, lower end of tiles and color table 0
	clr.b	d0                               	| [$55e8: ld   a,$00]
	jbsr	osd_w_colorram                         	| [$55ea: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$55eb: pop  hl]
	addq.w	#1,a1                           	| [$55ec: inc  de]
	add.w	d1,d6                            	| [$55ed: add  hl,bc]
	jra	display_text_55d9                             	| [$55ee: jr   $55D9]


* write text
* < A1: text
* < D6: screen address
* < D7: attribute
write_text_55f0:
	                        	| [$55f0: ld   bc,$FFE0] 65504
										| [$55f0: ld   bc,$FFE0] 65504
	move.b	(a1)+,d0                         	| [$55f3: ld   a,(de)]
	cmp.b	#0x3F,d0                         	| [$55f4: cp   $3F] end of string
	bne.b	0f
	rts                                    	| [$55f6: ret  z]
0:
	jbsr	osd_w_videoram                         	| [$55f7: ld   (hl),a]

	                        	| [$55f8: push hl]
	add.w	#0x0800,d6                           	| [$55f9: ld   a,h]
	                           	| [$55fc: ld   h,a]
	exg	d0,d7                              	| [$55fd: ex   af,af']
	jbsr	osd_w_colorram                         	| [$55fe: ld   (hl),a]
	exg	d0,d7                              	| [$55ff: ex   af,af']
	                        	| [$5600: pop  hl]
											| [$5601: inc  de]
	sub.w	#0x820,d6                            	| [$5602: add  hl,bc] next char
	jra	write_text_55f0                             	| [$5603: jr   $55F0]

write_attribute_on_line_5605:
	move.w	#0x0020,d3                      	| [$5605: ld   de,$0020] 32
	move.b	#0x1C,d1                        	| [$5608: ld   b,$1C]
l_560a:
	jbsr	osd_w_colorram                         	| [$560a: ld   (hl),a]
	add.w	d3,d6                            	| [$560b: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_560a                             	| [$560c: djnz $560A]
	rts                                    	| [$560e: ret]

write_scores_and_time_560f:
	lea	player_1_score_6176,a2                	| [$560f: ld   ix,player_1_score_6176]
	move.w	#0x92E1,d6                      	| [$5613: ld   hl,$92E1]
	jbsr	write_numeric_value_3_bytes_563C                            	| [$5616: call $563C]
	lea	player_2_score_6179,a2                	| [$5619: ld   ix,player_2_score_6179]
	move.w	#0x9061,d6                      	| [$561d: ld   hl,$9061]
	jbsr	write_numeric_value_3_bytes_563C                            	| [$5620: call $563C]
	lea	time_61E8,a2                   	| [$5623: ld   ix,time_61E8]
	move.w	#0x9201,d6                      	| [$5627: ld   hl,$9201]
	moveq	#0x01,d1                        	| [$562a: ld   b,$01]
	jbsr	write_numeric_value_1_byte_5641                            	| [$562c: call $5641]
	lea	unknown_61E9,a2                	| [$562f: ld   ix,unknown_61E9]
	move.w	#0x91C1,d6                     	| [$5633: ld   hl,$91C1]
	moveq	#0x01,d1                        	| [$5636: ld   b,$01]
	jbsr	write_numeric_value_1_byte_5641                            	| [$5638: call $5641]
	rts                                    	| [$563b: ret]

write_numeric_value_3_bytes_563C:
	moveq	#3,d1                        	| [$563c: ld   b,$03]
write_numeric_value_1_byte_5641:
	move.w	#0x0020,d3                      	| [$563e: ld   de,$0020] 32
	subq.w	#1,d1
0:
	move.b	(a2)+,d0                    	| [$5641: ld   a,(ix+$00)]

write_byte_value_564D:
	move.w	d0,-(sp)                        	| [$564d: push af]
	and.b	#0x0F,d0                         	| [$564e: and  $0F]
	jbsr	osd_w_videoram                         	| [$5650: ld   (hl),a]
	add.w	d3,d6                            	| [$5651: add  hl,de]
	move.w	(sp)+,d0                        	| [$5652: pop  af]
	ror.b	#4,d0                            	| [$5653: rrc  a] * 4
	and.b	#0x0F,d0                         	| [$565b: and  $0F]
	jbsr	osd_w_videoram                         	| [$565d: ld   (hl),a]
											| [$5647: inc  ix]
	add.w	d3,d6                            	| [$5649: add  hl,de]
	dbf		d1,0b                             	| [$564a: djnz $5641]
	rts                                    	| [$564c: ret]



 * in:	 d6 contains 16 bit hex value of the points to add
 * $100 for 100 points, $500 for 500 etc...
add_to_score_5C90:
	move.b	gameplay_allowed_6054,d0        	| [$5c90: ld   a,(gameplay_allowed_6054)]
	                         	| [$5c93: cp   $00]
	bne.b	0f
	rts                                    	| [$5c95: ret  z]
0:
	jra	really_add_to_score_5500                            	| [$5c96: call $5500]
	                                    	| [$5c99: ret]

l_5c9a:
	jra	l_5e46                             	| [$5c9a: jp   $5E46]

l_5ca0:
	LEA_ROM	       0x5D44,a2                      	| [$5ca0: ld   ix,$5D44]
	lea	player_struct_6580,a3          	| [$5ca4: ld   iy,player_struct_6580]
	move.w	#0x0004,d3                      	| [$5ca8: ld   de,$0004] 4
	move.b	unknown_6288,d0                 	| [$5cab: ld   a,(unknown_6288)]
	                         	| [$5cae: cp   $00]
	bne.b	0f
	jbsr	l_5d2a                            	| [$5cb0: call z,$5D2A]
0:
	move.b	unknown_6288,d0                 	| [$5cb3: ld   a,(unknown_6288)]
l_5cb6:
	                         	| [$5cb6: cp   $00]
	jeq	l_5cbf                             	| [$5cb8: jr   z,$5CBF]
	add.w	d3,a2                            	| [$5cba: add  ix,de]
	subq.b	#1,d0                           	| [$5cbc: dec  a]
	jra	l_5cb6                             	| [$5cbd: jr   $5CB6]
l_5cbf:
	move.b	(0x03,a2),d0                    	| [$5cbf: ld   a,(ix+$03)]
	cmp.b	#0xFF,d0                         	| [$5cc2: cp   $FF]
	jeq	l_5d02                             	| [$5cc4: jr   z,$5D02]
	cmp.b	#0xFE,d0                         	| [$5cc6: cp   $FE]
	jeq	l_5d1c                             	| [$5cc8: jp   z,$5D1C]
	move.b	d0,d1                           	| [$5ccb: ld   b,a]
	move.b	player_input_6026,d0            	| [$5ccc: ld   a,(player_input_6026)]
	and.b	#0x07,d0                         	| [$5ccf: and  $07]
	or.b	d1,d0                             	| [$5cd1: or   b]
	move.b	d0,player_input_6026            	| [$5cd2: ld   (player_input_6026),a]
	move.b	(0x02,a3),d0                    	| [$5cd5: ld   a,(iy+$02)]
	cmp.b	(A2),d0                     	| [$5cd8: cp   (ix+$00)]
	beq.b	0f                               	| [$5cdb: ret  nz] [...]
	rts                                    	| [$5cdb: ret  nz]
0:
	move.b	(0x03,a3),d0                    	| [$5cdc: ld   a,(iy+$03)]
	cmp.b	(0x01,a2),d0                     	| [$5cdf: cp   (ix+$01)]
	beq.b	0f                               	| [$5ce2: ret  nz] [...]
	rts                                    	| [$5ce2: ret  nz]
0:
	move.b	player_screen_600D,d0           	| [$5ce3: ld   a,(player_screen_600D)]
	cmp.b	(0x02,a2),d0                     	| [$5ce6: cp   (ix+$02)]
	beq.b	0f                               	| [$5ce9: ret  nz] [...]
	rts                                    	| [$5ce9: ret  nz]
0:
l_5cea:
	move.b	unknown_6288,d0                 	| [$5cea: ld   a,(unknown_6288)]
	addq.b	#1,d0                           	| [$5ced: inc  a]
	move.b	d0,unknown_6288                 	| [$5cee: ld   (unknown_6288),a]
	move.b	player_input_6026,d0            	| [$5cf1: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$5cf4: and  $80]
	cmp.b	#0x80,d0                         	| [$5cf6: cp   $80]
	bne.b	0f                               	| [$5cf8: ret  z] [...]
	rts                                    	| [$5cf8: ret  z]
0:
	move.b	player_input_6026,d0            	| [$5cf9: ld   a,(player_input_6026)]
	and.b	#0x07,d0                         	| [$5cfc: and  $07]
	move.b	d0,player_input_6026            	| [$5cfe: ld   (player_input_6026),a]
	rts                                    	| [$5d01: ret]
l_5d02:
	move.b	#0x10,d0                        	| [$5d02: ld   a,$10]
	move.b	d0,guard_1_y_6597               	| [$5d04: ld   (guard_1_y_6597),a]
	move.b	d0,guard_2_y_659B               	| [$5d07: ld   (guard_2_y_659B),a]
	move.b	#0xD0,d0                        	| [$5d0a: ld   a,$D0]
	move.b	d0,guard_1_x_6596               	| [$5d0c: ld   (guard_1_x_6596),a]
	move.b	#0xE0,d0                        	| [$5d0f: ld   a,$E0]
	jra	l_5e38                             	| [$5d11: jp   $5E38]
l_5d14:
	move.b	elevator_y_screen_4_6587,d0	| [$5d14: ld   a,(elevator_y_screen_4_6587)]
	cmp.b	#0x11,d0                         	| [$5d17: cp   $11]  max height for elevator
	beq.b	0f                               	| [$5d19: ret  nz] [...]
	rts                                    	| [$5d19: ret  nz]
0:
	jra	l_5cea                             	| [$5d1a: jr   $5CEA]
l_5d1c:
	move.b	wagon_data_658A,d0              	| [$5d1c: ld   a,(wagon_data_658A)]
	cmp.b	#0x7F,d0                         	| [$5d1f: cp   $7F]
	beq.b	0f                               	| [$5d21: ret  nz] [...]
	rts                                    	| [$5d21: ret  nz]
0:
	move.b	unknown_6019,d0                 	| [$5d22: ld   a,(unknown_6019)]
	cmp.b	#0x01,d0                         	| [$5d25: cp   $01]
	beq.b	0f                               	| [$5d27: ret  nz] [...]
	rts                                    	| [$5d27: ret  nz]
0:
	jra	l_5cea                             	| [$5d28: jr   $5CEA]
l_5d2a:
	move.w	#0x91C2,d6                      	| [$5d2a: ld   hl,$91C2]
	move.w	d6,barrow_screen_params_61C4	| [$5d2d: ld   (barrow_screen_params_61C4),hl]
	move.w	d6,unknown_screen_address_61FA  	| [$5d30: ld   (unknown_screen_address_61FA),hl]
	move.b	#0x01,d0                        	| [$5d33: ld   a,$01]
	move.b	d0,barrow_screen_61C6                 	| [$5d35: ld   (barrow_screen_61C6),a]
	move.b	d0,unknown_61FC                 	| [$5d38: ld   (unknown_61FC),a]
 * make guards start at 3rd screen
	move.b	#0x03,d0                        	| [$5d3b: ld   a,$03]
	move.b	d0,guard_1_screen_6099          	| [$5d3d: ld   (guard_1_screen_6099),a]
	move.b	d0,guard_2_screen_609A          	| [$5d40: ld   (guard_2_screen_609A),a]
	rts                                    	| [$5d43: ret]

l_5e38:
	move.b	d0,guard_2_x_659A                       	| [$5e38: ld   ($659A),a]
	move.b	#0x03,d0                        	| [$5e3b: ld   a,$03]
	move.b	d0,guard_1_screen_6099                       	| [$5e3d: ld   ($6099),a]
	move.b	d0,guard_2_screen_609A                       	| [$5e40: ld   ($609A),a]
	jra	l_5d14                             	| [$5e43: jp   $5D14]


l_5e46:
	move.b	gameplay_allowed_6054,d0        	| [$5e46: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$5e49: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$5e4b: ret  z] [...]
0:
	move.b	player_input_6026,d0            	| [$5e4c: ld   a,(player_input_6026)]
	and.b	#0x07,d0                         	| [$5e4f: and  $07]
	move.b	d0,player_input_6026            	| [$5e51: ld   (player_input_6026),a]
	jra	l_5ca0                             	| [$5e54: jp   $5CA0]


startup_C000:
	jra	l_c382                             	| [$c000: jp   $C382]
l_c003:
	jra	l_c393                             	| [$c003: jp   $C393]
l_c006:
	lea	stack_top_67F0,sp					| ld   sp,stack_top_67F0
	move.b	#0x3F,d0                        	| [$c009: ld   a,$3F]
	jbsr	change_attribute_everywhere_C3A3  	| [$c00b: call change_attribute_everywhere_C3A3]
	jbsr	clear_screen_C3B7                 	| [$c00e: call clear_screen_C3B7]
	jbsr	osd_enable_display                       	| [$c011: ld   a,$01]
		                       	| [$c013: ld   ($A003),a]
	LEA_ROM	       0x1A8C,a0                      	| [$c016: ld   hl,$1A8C]
	lea	high_score_table_6217,a1       	| [$c019: ld   de,high_score_table_6217]
	move.w	#0x50,d1                        	| [$c01c: ld   bc,$0050] 80
	jbsr	ldir                              	| [$c01f: ldir]

	lea	high_score_table_6217,a0
	jbsr	osd_read_high_scores

												| [$c021: ld   hl,$5B68]
											| [$c024: ld   (ay_sound_pointer_6140),hl]
												| [$c027: xor  a]
											| [$c028: ld   (ay_sound_start_6142),a]
	jra	l_ecc1                             	| [$c02b: jp   $ECC1]
l_c02e:
	move.b	must_play_music_6210,d0         	| [$c02e: ld   a,(must_play_music_6210)]
	cmp.b	#0x01,d0                         	| [$c031: cp   $01]
	jne	l_c073                             	| [$c033: jr   nz,$C073]
	move.b	flash_counter_626D,d0           	| [$c035: ld   a,(flash_counter_626D)]
	cmp.b	#0x20,d0                         	| [$c038: cp   $20]
	bcc.b	0f                               	| [...]
	jbsr	l_c047                            	| [$c03a: call c,$C047]
0:
	cmp.b	#0x30,d0                         	| [$c03d: cp   $30]
	bcc.b	0f                               	| [...]
	jbsr	l_c07c                            	| [$c03f: call c,$C07C]
0:
                              	| [$c042: xor  a]
	clr.b	flash_counter_626D           	| [$c043: ld   (flash_counter_626D),a]
	rts                                    	| [$c046: ret]
l_c047:
	move.b	unknown_626E,d0                 	| [$c047: ld   a,(unknown_626E)]
	cmp.b	#0x01,d0                         	| [$c04a: cp   $01]
	jeq	l_c061                             	| [$c04c: jr   z,$C061]
	jbsr	l_c08b                            	| [$c04e: call $C08B]
	jeq	l_c063                             	| [$c051: jr   z,$C063]
	LEA_ROM	       0x575A,a1                      	| [$c053: ld   de,$575A]
	jbsr	display_localized_text_CA67       	| [$c056: call display_localized_text_CA67]
	jbsr	l_c073                            	| [$c059: call $C073]
	move.b	#0x01,d0                        	| [$c05c: ld   a,$01]
	move.b	d0,unknown_626E                 	| [$c05e: ld   (unknown_626E),a]
l_c061:	                        	| [$c061: pop  af]
	addq.w	#4,sp		| 32-bit stack pop
	rts                                    	| [$c062: ret]
l_c063:
	LEA_ROM	       0x5763,a1                      	| [$c063: ld   de,$5763]
	jbsr	display_localized_text_CA67       	| [$c066: call display_localized_text_CA67]
	jbsr	l_c073                            	| [$c069: call $C073]
	move.b	#0x01,d0                        	| [$c06c: ld   a,$01]
	move.b	d0,unknown_626E                 	| [$c06e: ld   (unknown_626E),a]
	move.w	(sp)+,d0                        	| [$c071: pop  af]
	rts                                    	| [$c072: ret]
l_c073:
	move.b	#0x02,d0                        	| [$c073: ld   a,$02]
	move.w	#0x9840,d6                      	| [$c075: ld   hl,$9840]
	jbsr	write_attribute_on_line_5605      	| [$c078: call write_attribute_on_line_5605]
	rts                                    	| [$c07b: ret]
l_c07c:
	jbsr	l_c08b                            	| [$c07c: call $C08B]
	LEA_ROM	       0x576C,a1                      	| [$c07f: ld   de,$576C]
	jbsr	display_localized_text_CA67       	| [$c082: call display_localized_text_CA67]
	clr.b	d0                               	| [$c085: xor  a]
	move.b	d0,unknown_626E                 	| [$c086: ld   (unknown_626E),a]
	move.w	(sp)+,d0                        	| [$c089: pop  af]
	addq	#2,sp
	rts                                    	| [$c08a: ret]
l_c08b:
	move.b	current_player_617C,d0          	| [$c08b: ld   a,(current_player_617C)]
	move.w	#0x93A0,d6                      	| [$c08e: ld   hl,$93A0]
	cmp.b	#0x01,d0                         	| [$c091: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$c093: ret  nz] [...]
0:
	move.w	#0x9120,d6                      	| [$c094: ld   hl,$9120]
	rts                                    	| [$c097: ret]
l_c098:
	subq.w	#1,d6                           	| [$c098: dec  hl]
	jbsr	osd_disable_vblank_interrupt		| di
	jbsr	l_c0f3                            	| [$c09a: call $C0F3]
	addq.w	#1,d6                           	| [$c09d: inc  hl]
	jbsr	l_c0f3                            	| [$c09e: call $C0F3]
	move.b	(a4),d0                         	| [$c0a1: ld   a,(bc)]
	jbsr	osd_enable_vblank_interrupt		| ei
	rts                                    	| [$c0a3: ret]

check_blocked_by_breakable_wall_C0A4:
	movem.w	d1/d2,-(sp)                    	| [$c0a4: push bc]

	movem.w	d3/d4/d6,-(sp)                        	| [$c0a5: push hl]
	                    	| [$c0a6: push de]
	                       	| [$c0a6: push de]
	clr.b	d0                               	| [$c0a7: xor  a]
	move.b	d0,way_clear_flag_600B          	| [$c0a8: ld   (way_clear_flag_600B),a]
	                      	| [$c0ab: ld   de,$35D5]
	cmp.w	#0x35D5,d6                            	| [$c0ae: sbc  hl,de]

	jne	l_c0bc                             	| [$c0b0: jr   nz,$C0BC]
	jbsr	check_breakable_wall_present_c0df                            	| [$c0b2: call $C0DF]
	jeq	l_c0bc                             	| [$c0b5: jr   z,$C0BC]
	move.b	#0x02,d0                        	| [$c0b7: ld   a,$02]
	move.b	d0,way_clear_flag_600B          	| [$c0b9: ld   (way_clear_flag_600B),a]
l_c0bc:
	movem.w	(sp)+,d3/d4/d6                        	| [$c0bc: pop  de]
	                    	| [$c0bc: pop  de]
	                        	| [$c0bd: pop  hl]

	movem.w	(sp)+,d1/d2                    	| [$c0be: pop  bc]
	rts                                    	| [$c0bf: ret]

check_breakable_wall_C0C0:
	movem.w	d1/d2,-(sp)                    	| [$c0c0: push bc]

                        	| [$c0c1: push hl]
	movem.w	d3/d4,-(sp)                    	| [$c0c2: push de]
                        	| [$c0c2: push de]
                              	| [$c0c3: xor  a]
	clr.b	way_clear_flag_600B          	| [$c0c4: ld   (way_clear_flag_600B),a]
                     	| [$c0c7: ld   de,$3615]
* logical address of the breakable wall (the only place
* where wall needs to be checked is there)
	cmp.w	#0x3615,d6                            	| [$c0ca: sbc  hl,de]

	jne	l_c0d8                             	| [$c0cc: jr   nz,$C0D8]
	jbsr	check_breakable_wall_present_c0df                            	| [$c0ce: call $C0DF]
	jeq	l_c0d8                             	| [$c0d1: jr   z,$C0D8]
	move.b	#0x02,d0                        	| [$c0d3: ld   a,$02]
	move.b	d0,way_clear_flag_600B          	| [$c0d5: ld   (way_clear_flag_600B),a]
l_c0d8:
                   	| [$c0d8: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$c0d8: pop  de]
                 	| [$c0d9: pop  hl]

	movem.w	(sp)+,d1/d2                    	| [$c0da: pop  bc]
	rts                                    	| [$c0db: ret]
l_c0dc:
	                        	| [$c0dc: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$c0dc: pop  de]
	jra	l_c0d8                             	| [$c0dd: jr   $C0D8]

* all map walls are checked using ROM
* but this one needs to be checked in RAM
* as this wall can be broken

check_breakable_wall_present_c0df:
	move.b	player_screen_600D,d0           	| [$c0df: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$c0e2: cp   $05]
	jne	l_c0dc                             	| [$c0e4: jr   nz,$C0DC]
	move.w	#0x91F3,d6                      	| [$c0e6: ld   hl,$91F3]
	jbsr	osd_r_videoram                         	| [$c0e9: ld   a,(hl)]
	LEA_ROM	       0x19DB,a0                      	| [$c0ea: ld   hl,$19DB]
	move.w	#0x05,d1                        	| [$c0ed: ld   bc,$0005] 5
	jbsr	cpir                              	| [$c0f0: cpir]
	rts                                    	| [$c0f2: ret]

l_c0f3:
	bsr		read_rom                         	| [$c0f3: ld   a,(hl)]
	cmp.b	#0x51,d0                         	| [$c0f4: cp   $51]
	jeq	l_c10d                             	| [$c0f6: jr   z,$C10D]
	LEA_ROM	       0x1A12,a3                      	| [$c0f8: ld   iy,$1A12]
	LEA_ROM	       0x19E0,a1                      	| [$c0fc: ld   de,$19E0]
	movem.w	d1/d2,-(sp)                    	| [$c0ff: push bc]
	move.b	d0,d2                           	| [$c100: ld   c,a]
	move.b	#0x08,d1                        	| [$c101: ld   b,$08]
l_c103:
	move.b	(a1)+,d0                         	| [$c103: ld   a,(de)]
	cmp.b	d2,d0                            	| [$c104: cp   c]
	jeq	l_c11b                             	| [$c105: jr   z,$C11B]
	                           	| [$c107: inc  de]
	addq.w	#1,a3                           	| [$c108: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_c103                             	| [$c10a: djnz $C103]

	movem.w	(sp)+,d1/d2                    	| [$c10c: pop  bc]
l_c10d:
	* protection against junk values as at startup the game gets here
	* while BC isn't initialized properly at first
	cmp.l	#0,a4
	bne.b	0f
	rts
0:
	* DO NOT OPTIMIZE as D0 is needed         	| [$c10d: inc  bc]
	move.b	(1,a4),d0                         	| [$c10e: ld   a,(bc)]
	addq.b	#1,d0                           	| [$c10f: inc  a]
	move.b	d0,(1,a4)                         	| [$c110: ld   (bc),a]
	                           	| [$c111: dec  bc]
	cmp.b	#0x03,d0                         	| [$c112: cp   $03]
	bcc.b	0f                               	| [...]
	rts                                    	| [$c114: ret  c] [...]
0:
	                               	| [$c115: xor  a]
	                           	| [$c116: inc  bc]
	clr.b	(1,a4)                         	| [$c117: ld   (bc),a]
	                           	| [$c118: dec  bc]
	clr.b	(a4)                         	| [$c119: ld   (bc),a]
	rts                                    	| [$c11a: ret]
l_c11b:

	movem.w	(sp)+,d1/d2                    	| [$c11b: pop  bc]
	move.b	(A3),d0                    	| [$c11c: ld   a,(iy+$00)]
	move.b	d0,(0x03,a2)                    	| [$c11f: ld   (ix+$03),a]
	                        	| [$c122: ld   a,$01]
	move.b	#1,(a4)                         	| [$c124: ld   (bc),a]
	                          	| [$c125: inc  bc]
	                              	| [$c126: xor  a]
	clr.b	(1,a4)                         	| [$c127: ld   (bc),a]
	                           	| [$c128: dec  bc]
	rts                                    	| [$c129: ret]

maybe_align_character_y_on_8_c12a:
	jbsr	read_rom                         	| [$c12a: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$c12b: cp   $FF]
	bne.b	0f                               	| [...]
	rts                                    	| [$c12d: ret  z] [...]
0:
	jbsr	get_y_8_modulus_c16d                            	| [$c12e: call $C16D]
	move.b	d1,d0                           	| [$c131: ld   a,b]
	move.b	d0,player_y_modulus_8_600C                 	| [$c132: ld   (player_y_modulus_8_600C),a]
	                         	| [$c135: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$c137: ret  z] [...]
0:
	move.b	(A3),d0                    	| [$c138: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$c13b: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$c13d: ret  z] [...]
0:
	bsr		read_rom                         	| [$c13e: ld   a,(hl)]
	cmp.b	#0x51,d0                         	| [$c13f: cp   $51]
	jeq	l_c14f                             	| [$c141: jr   z,$C14F]
	move.b	d0,d2                           	| [$c143: ld   c,a]
	LEA_ROM	       0x19E8,a1                      	| [$c144: ld   de,$19E8]
	move.b	#0x30,d1                        	| [$c147: ld   b,$30]
l_c149:
	move.b	(a1)+,d0                         	| [$c149: ld   a,(de)]
	cmp.b	d2,d0                            	| [$c14a: cp   c]
	bne.b	0f                               	| [...]
	rts                                    	| [$c14b: ret  z] [...]
0:
	                           	| [$c14c: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_c149                             	| [$c14d: djnz $C149]
l_c14f:
	move.b	player_y_modulus_8_600C,d0                 	| [$c14f: ld   a,(player_y_modulus_8_600C)]
	cmp.b	#0x05,d0                         	| [$c152: cp   $05]
	* too much difference: align on Y%8 = 0
	* problem is if aligns DF to E0 multiple times, depending on
	* interrupts & mainloop (I'm assuming this as sometimes it works depending
	* on the Winuae CPU/speed configuration), and
	* it also NEVER happens on MAME!)
	* it can make player miss the elevator at bottom of screen 4.
	*
	* it never happens in bagman probably because the floor y isn't 
	* a multiple of 16, or we're just lucky. Anyway, in Bagman it is
	* so dangerous to take the elevator at the bottom on screen 3 that
	* noone tries that :)
	
	jcc	l_c15f                             	| [$c154: jr   nc,$C15F]
	move.b	d0,d1                           	| [$c156: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$c157: ld   a,(ix+$03)]
	sub.b	d1,d0                            	| [$c15a: sub  b]
	move.b	d0,(0x03,a2)                    	| [$c15b: ld   (ix+$03),a]
	rts                                    	| [$c15e: ret]
l_c15f:

	* align character in Y on multiples of 8 when elevator picks up the player
	* jotd: add special case to avoid issues
	* (I could also completely skip this, as it only leads to problems, but
	* lets fix it with a kludge just in case...)
	cmp.b	#0xDF,(0x03,a2)	| coord of player just after elevator lifts him at ground level
	bne.b	0f
	rts
0:
	not.b	d0                               	| [$c15f: cpl]
	and.b	#0x07,d0                         	| [$c160: and  $07]
	addq.b	#0x01,d0                        	| [$c162: add  a,$01]
	move.b	d0,d1                           	| [$c164: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$c165: ld   a,(ix+$03)]
	add.b	d1,d0                            	| [$c168: add  a,b]
	move.b	d0,(0x03,a2)                    	| [$c169: ld   (ix+$03),a]
	rts                                    	| [$c16c: ret]

* bagman: same routine in l_2640
* seems like a good old mask to extract bits
* and #7,d0 would do the same thing it seems
*  Y=0x70 => D1=0
*  Y=0x55 => D1=5
*  Y=0x52 => D1=2

* < A2: player structure (to read player Y)
* > D1: modulus
get_y_8_modulus_c16d:
	move.b	(0x03,a2),d0                    	| [$c16d: ld   a,(ix+$03)]
*	and.b	#7,d0
*	move.b	d0,d1
*	rts
	

	rol.b	#5,d0                            	| [$c170: rlc  a] * 5
	clr.b	d1                               	| [$c17a: ld   b,$00]
	CLEAR_XC_FLAG
	roxl.b	#1,d0                            	| [$c17c: rlc  a]
	roxl.b	#1,d1                           	| [$c17e: rl   b]
	roxl.b	#1,d0                            	| [$c180: rlc  a]
	roxl.b	#1,d1                           	| [$c182: rl   b]
	roxl.b	#1,d0                            	| [$c184: rlc  a]
	roxl.b	#1,d1                           	| [$c186: rl   b]
	rts                                    	| [$c188: ret]
	
display_screen_5_c189:
	jbsr	clear_screen_c3cd                            	| [$c189: call $C3CD]
	move.b	#0x3F,d0                        	| [$c18c: ld   a,$3F]
	jbsr	change_attribute_everywhere_C3A3  	| [$c18e: call change_attribute_everywhere_C3A3]
	            	| [$c191: ld   a,(io_read_shit_B800)]
	LEA_ROM	       0x3400,a0                      	| [$c194: ld   hl,$3400]
	move.w	#0x9000,d6                      	| [$c197: ld   de,$9000]
	move.w	#0x400-1,d1                        	| [$c19a: ld   bc,$0400] 1024
0:
	move.b	(a0)+,d0
	jbsr	osd_w_videoram
	addq.w	#1,d6
	dbf		d1,0b   | [$2673: ldir]
	move.w	#0x9882,d6                      	| [$c19f: ld   hl,$9882]
	move.b	#0x06,d1                        	| [$c1a2: ld   b,$06]
	jbsr	set_attribute_row_c361                            	| [$c1a4: call $C361]
	jbsr	switch_to_screen_5_CE4D           	| [$c1a7: call switch_to_screen_5_CE4D]
	jbsr	draw_credit_and_bonus_d0dd                            	| [$c1aa: call $D0DD]
	jbsr	zero_elevator_4_x_c30e                            	| [$c1ad: call $C30E]
	            	| [$c1b0: ld   a,(io_read_shit_B800)]
	jbsr	put_score_lives_attributes_f8de                            	| [$c1b3: call $F8DE]
	jbsr	display_player_1_and_2_text_ca7e                            	| [$c1b6: call $CA7E]
	jbsr	start_level_music_d0f3                            	| [$c1b9: call $D0F3]
	move.b	#0x63,d0                        	| [$c1bc: ld   a,$63]
**out  ($58),a
	rts                                    	| [$c1c0: ret]
display_screen_4_c1c1:
	jbsr	clear_screen_c3cd                            	| [$c1c1: call $C3CD]
	move.b	#0x3F,d0                        	| [$c1c4: ld   a,$3F]
	jbsr	change_attribute_everywhere_C3A3  	| [$c1c6: call change_attribute_everywhere_C3A3]
	            	| [$c1c9: ld   a,(io_read_shit_B800)]
	LEA_ROM	       0x3000,a0                      	| [$c1cc: ld   hl,$3000]
	move.w	#0x9000,d6                      	| [$c1cf: ld   de,$9000]
	move.w	#0x400-1,d1                        	| [$c1d2: ld   bc,$0400] 1024
0:
	move.b	(a0)+,d0
	jbsr	osd_w_videoram
	addq.w	#1,d6
	dbf		d1,0b   | [$c1d5: ldir]
							

	move.w	#0x9302,d6                      	| [$c1d7: ld   hl,$9302]
	jbsr	draw_cactus_c338                            	| [$c1da: call $C338]
	move.w	#0x9862,d6                      	| [$c1dd: ld   hl,$9862]
	move.b	#0x0E,d1                        	| [$c1e0: ld   b,$0E]
	jbsr	set_attribute_row_c361                            	| [$c1e2: call $C361]
	move.w	#0x991A,d6                      	| [$c1e5: ld   hl,$991A]
	move.b	#0x16,d1                        	| [$c1e8: ld   b,$16]
	jbsr	l_c36e                            	| [$c1ea: call $C36E]
	move.b	#0x3F,d0                        	| [$c1ed: ld   a,$3F]
	move.w	#0x9B57,d6                       	| [$c1ef: ld   ($9B57),a]
	jbsr	osd_w_colorram

	jbsr	draw_credit_and_bonus_d0dd                            	| [$c1f2: call $D0DD]
	lea	elevator_struct_6584,a0        	| [$c1f5: ld   hl,elevator_struct_6584]
	move.b	#0x33,d0                        	| [$c1f8: ld   a,$33]
	move.b	d0,(a0)+                         	| [$c1fa: ld   (hl),a]
	                           	| [$c1fb: inc  hl]
	move.b	#0x04,d0                        	| [$c1fc: ld   a,$04]
	move.b	d0,(a0)+                         	| [$c1fe: ld   (hl),a]
	                           	| [$c1ff: inc  hl]
	move.b	#0xBF,d0                        	| [$c200: ld   a,$BF]
	move.b	d0,(a0)+                         	| [$c202: ld   (hl),a]
	                           	| [$c203: inc  hl]
	            	| [$c204: ld   a,(io_read_shit_B800)]
	jbsr	put_score_lives_attributes_f8de                            	| [$c207: call $F8DE]
	jbsr	display_player_1_and_2_text_ca7e                            	| [$c20a: call $CA7E]
	rts                                    	| [$c20d: ret]
display_screen_3_c20e:
	jbsr	clear_screen_c3cd                            	| [$c20e: call $C3CD]
	move.b	#0x3F,d0                        	| [$c211: ld   a,$3F]
	jbsr	change_attribute_everywhere_C3A3  	| [$c213: call change_attribute_everywhere_C3A3]
	            	| [$c216: ld   a,(io_read_shit_B800)]
	LEA_ROM	       0x4800,a0                      	| [$c219: ld   hl,$4800]
	move.w	#0x9000,d6                      	| [$c21c: ld   de,$9000]
	move.w	#0x0400-1,d1                        	| [$c21f: ld   bc,$0400] 1024
                    	| [$c222: ldir]
0:
	move.b	(a0)+,d0
	jbsr	osd_w_videoram
	addq.w	#1,d6
	dbf		d1,0b
	move.w	#0x9362,d6                      	| [$c224: ld   hl,$9362]
	jbsr	draw_cactus_c338                            	| [$c227: call $C338]
	move.w	#0x9842,d6                      	| [$c22a: ld   hl,$9842]
	move.b	#0x0F,d1                        	| [$c22d: ld   b,$0F]
	jbsr	set_attribute_row_c361                            	| [$c22f: call $C361]
	move.w	#0x98FA,d6                      	| [$c232: ld   hl,$98FA]
	move.b	#0x16,d1                        	| [$c235: ld   b,$16]
	jbsr	l_c36e                            	| [$c237: call $C36E]
	move.w	#0x985A,d6                      	| [$c23a: ld   hl,$985A]
	move.b	#0x02,d1                        	| [$c23d: ld   b,$02]
	jbsr	l_c36e                            	| [$c23f: call $C36E]
	move.b	#0x3F,d0                        	| [$c242: ld   a,$3F]
	move.w	#0x9A77,d6                       	| [$c244: ld   ($9A77),a]
	jbsr	osd_w_colorram
 	jbsr	draw_credit_and_bonus_d0dd                            	| [$c247: call $D0DD]
	            	| [$c24a: ld   a,(io_read_shit_B800)]
	jbsr	osd_read_dipswitches                       	| [$c24d: ld   a,($B000)]

	and.b	#0x20,d0                         	| [$c250: and  $20]
	cmp.b	#0x20,d0                         	| [$c252: cp   $20]
	jne	l_c265                             	| [$c254: jr   nz,$C265]
	* english: change default text to "gunsmith's"
	move.w	#0x9232,d6                      	| [$c256: ld   hl,$9232]
	move.b	#0x34,d0                        	| [$c259: ld   a,$34]
	move.b	#0x06,d1                        	| [$c25b: ld   b,$06]
	move.w	#0x0020,d3                      	| [$c25e: ld   de,$0020] 32
l_c25d:
	jbsr	osd_w_videoram                      | [$c25d: ld   (hl),a]
	add.w	d3,d6                            	| [$c261: add  hl,de]
	addq.b	#1,d0                           	| [$c262: inc  a]
	subq.b	#1,d1                           	| [...]
	jne	l_c25d                             	| [$c263: djnz $C25D]
l_c265:
	jbsr	zero_elevator_4_x_c30e                            	| [$c265: call $C30E]
	jbsr	put_score_lives_attributes_f8de                            	| [$c268: call $F8DE]
	jbsr	display_player_1_and_2_text_ca7e                            	| [$c26b: call $CA7E]
	jbsr	start_level_music_d0f3                            	| [$c26e: call $D0F3]
	rts                                    	| [$c271: ret]
display_screen_2_c272:
	jbsr	clear_screen_c3cd                            	| [$c272: call $C3CD]
	move.b	#0x3F,d0                        	| [$c275: ld   a,$3F]
	jbsr	change_attribute_everywhere_C3A3  	| [$c277: call change_attribute_everywhere_C3A3]
	            	| [$c27a: ld   a,(io_read_shit_B800)]
	LEA_ROM	       0x4400,a0                      	| [$c27d: ld   hl,$4400]
	move.w	#0x9000,d6                      	| [$c280: ld   de,$9000]
	move.w	#0x0400-1,d1                        	| [$c283: ld   bc,$0400] 1024
0:
	move.b	(a0)+,d0
	jbsr	osd_w_videoram
	addq.w	#1,d6
	dbf		d1,0b

         	| [$c283: ld   bc,$0400] 1024
	                              	| [$c286: ldir]
	move.w	#0x9182,d6                      	| [$c288: ld   hl,$9182]
	jbsr	draw_cactus_c338                            	| [$c28b: call $C338]
	move.w	#0x9882,d6                      	| [$c28e: ld   hl,$9882]
	move.b	#0x07,d1                        	| [$c291: ld   b,$07]
	jbsr	set_attribute_row_c361                            	| [$c293: call $C361]
	move.w	#0x9AA2,d6                      	| [$c296: ld   hl,$9AA2]
	move.b	#0x09,d1                        	| [$c299: ld   b,$09]
	jbsr	set_attribute_row_c361                            	| [$c29b: call $C361]
	move.b	#0xBE,d0                        	| [$c29e: ld   a,$BE]
	move.w	#0x930E,d6                       	| [$c2a0: ld   ($930E),a]
	jbsr	osd_w_videoram
 	addq.b	#1,d0                           	| [$c2a3: inc  a]
	move.w	#0x930F,d6                       	| [$c2a4: ld   ($930F),a]
	jbsr	osd_w_videoram
	move.b	#0x24,d0                        	| [$c2a7: ld   a,$24]
	move.w	#0x9B2C,d6                      	| [$c2a9: ld   hl,$9B2C]
	move.w	#0x001E,d3                      	| [$c2ac: ld   de,$001E] 30
	move.b	#0x03,d1                        	| [$c2af: ld   b,$03]
l_c2b1:
	jbsr	osd_w_colorram                         	| [$c2b1: ld   (hl),a]
	addq.w	#1,d6                           	| [$c2b2: inc  hl]
	jbsr	osd_w_colorram                         	| [$c2b3: ld   (hl),a]
	addq.w	#1,d6                           	| [$c2b4: inc  hl]
	jbsr	osd_w_colorram                         	| [$c2b5: ld   (hl),a]
	add.w	d3,d6                            	| [$c2b6: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_c2b1                             	| [$c2b7: djnz $C2B1]
	jbsr	draw_credit_and_bonus_d0dd                            	| [$c2b9: call $D0DD]
	            	| [$c2bc: ld   a,(io_read_shit_B800)]
	jbsr	zero_elevator_4_x_c30e                            	| [$c2bf: call $C30E]
	jbsr	put_score_lives_attributes_f8de                            	| [$c2c2: call $F8DE]
	jbsr	display_player_1_and_2_text_ca7e                            	| [$c2c5: call $CA7E]
	rts                                    	| [$c2c8: ret]

display_screen_1_C2C9:
	jbsr	clear_screen_c3cd                            	| [$c2c9: call $C3CD]
	move.b	#0x3F,d0                        	| [$c2cc: ld   a,$3F]
	jbsr	change_attribute_everywhere_C3A3  	| [$c2ce: call change_attribute_everywhere_C3A3]
	            	| [$c2d1: ld   a,(io_read_shit_B800)]
	LEA_ROM	       0x4000,a0                      	| [$c2d4: ld   hl,$4000]
	move.w	#0x9000,d6                      	| [$c2d7: ld   de,$9000]
	move.w	#0x400-1,d1                        	| [$c2da: ld   bc,$0400] 1024
0:
	move.b	(a0)+,d0
	jbsr	osd_w_videoram	| [$2860: ldir]
	addq.w	#1,d6
	dbf		d1,0b
	                        	| [$c2da: ld   bc,$0400] 1024
	                              	| [$c2dd: ldir]
 	move.w	#0x9182,d6                      	| [$c2df: ld   hl,$9182]
	jbsr	draw_cactus_c338                            	| [$c2e2: call $C338]
	move.w	#0x9842,d6                      	| [$c2e5: ld   hl,$9842]
	move.b	#0x07,d1                        	| [$c2e8: ld   b,$07]
	jbsr	set_attribute_row_c361                            	| [$c2ea: call $C361]
	move.w	#0x9AC2,d6                      	| [$c2ed: ld   hl,$9AC2]
	move.b	#0x07,d1                        	| [$c2f0: ld   b,$07]
	jbsr	set_attribute_row_c361                            	| [$c2f2: call $C361]
	jbsr	draw_credit_and_bonus_d0dd                            	| [$c2f5: call $D0DD]
	            	| [$c2f8: ld   a,(io_read_shit_B800)]
	jbsr	zero_elevator_4_x_c30e                            	| [$c2fb: call $C30E]
	jbsr	put_score_lives_attributes_f8de                            	| [$c2fe: call $F8DE]
	jbsr	display_player_1_and_2_text_ca7e                            	| [$c301: call $CA7E]
	tst.b	must_play_music_6210         	| [$c304: ld   a,(must_play_music_6210)]
	                         	| [$c307: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$c309: ret  z] [...]
0:
	jbsr	start_level_music_d0f3                            	| [$c30a: call $D0F3]
	rts                                    	| [$c30d: ret]
	
* sets elevator X at 0 for screen 4 probably so guards can't use it when not
* in this screen
zero_elevator_4_x_c30e:
	lea	elevator_x_screen_4_6586,a0                	| [$c30e: ld   hl,elevator_x_screen_4_6586]
	clr.b	d0                               	| [$c311: xor  a]
	move.b	d0,(a0)                         	| [$c312: ld   (hl),a]
	rts                                    	| [$c313: ret]

init_guard_directions_and_wagons_C314:
	move.b	#0x01,d0                        	| [$c314: ld   a,$01]
	move.b	d0,unknown_601A                 	| [$c316: ld   (unknown_601A),a]
	move.b	d0,unknown_601B                 	| [$c319: ld   (unknown_601B),a]
	move.b	#0x80,d0                        	| [$c31c: ld   a,$80]
	move.b	d0,guard_1_direction_6027       	| [$c31e: ld   (guard_1_direction_6027),a]
	move.b	#0x40,d0                        	| [$c321: ld   a,$40]
	move.b	d0,guard_2_direction_6067       	| [$c323: ld   (guard_2_direction_6067),a]
	LEA_ROM	       0x1A1B,a0                      	| [$c326: ld   hl,$1A1B]
	            	| [$c329: ld   a,(io_read_shit_B800)]
	lea	wagon_1_struct_6588,a1         	| [$c32c: ld   de,wagon_1_struct_6588]
	move.w	#0x14,d1                        	| [$c32f: ld   bc,$0014] 20
	jbsr	ldir                              	| [$c332: ldir]
	jbsr	l_f9a3                            	| [$c334: call $F9A3]
	rts                                    	| [$c337: ret]
	
draw_cactus_c338:
	move.b	#0x55,d0                        	| [$c338: ld   a,$55]
	jbsr	osd_w_videoram                         	| [$c33a: ld   (hl),a]
	addq.w	#1,d6                           	| [$c33b: inc  hl]
	move.b	#0x51,d0                        	| [$c33c: ld   a,$51]
	jbsr	osd_w_videoram                         	| [$c33e: ld   (hl),a]
	addq.w	#1,d6                           	| [$c33f: inc  hl]
	move.b	#0x57,d0                        	| [$c340: ld   a,$57]
	jbsr	osd_w_videoram                         	| [$c342: ld   (hl),a]
	move.w	#0x001F,d3                      	| [$c343: ld   de,$001F] 31
	add.w	d3,d6                            	| [$c346: add  hl,de]
	move.b	#0x52,d0                        	| [$c347: ld   a,$52]
	jbsr	osd_w_videoram                         	| [$c349: ld   (hl),a]
	subq.w	#1,d6                           	| [$c34a: dec  hl]
	move.b	#0x56,d0                        	| [$c34b: ld   a,$56]
	jbsr	osd_w_videoram                         	| [$c34d: ld   (hl),a]
	add.w	#0x800,d6
	                           	| [$c34e: ld   a,h]
	                         	| [$c34f: add  a,$08]
	                           	| [$c351: ld   h,a]
	move.b	#0x32,d0                        	| [$c352: ld   a,$32]
	jbsr	osd_w_colorram                         	| [$c354: ld   (hl),a]
	addq.w	#1,d6                           	| [$c355: inc  hl]
 
	jbsr	osd_w_colorram                         	| [$c356: ld   (hl),a]
	                      	| [$c357: ld   de,$FFE1]
	sub.w	#0x1F,d6                            	| [$c35a: add  hl,de]

	jbsr	osd_w_colorram                         	| [$c35b: ld   (hl),a]
	subq.w	#1,d6                           	| [$c35c: dec  hl]
	jbsr	osd_w_colorram                         	| [$c35d: ld   (hl),a]
	subq.w	#1,d6                           	| [$c35e: dec  hl]
 	jbsr	osd_w_colorram                         	| [$c35f: ld   (hl),a]
	rts                                    	| [$c360: ret]
set_attribute_row_c361:
	move.b	#0x38,d0                        	| [$c361: ld   a,$38]
											| [$c363: jr   $C366]
											| [$c365: ret]
l_c366:
	move.w	#0x0020,d3                      	| [$c366: ld   de,$0020] 32
l_c369:
	jbsr		osd_w_colorram                         	| [$c369: ld   (hl),a]
	add.w	d3,d6                            	| [$c36a: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_c369                             	| [$c36b: djnz $C369]
	rts                                    	| [$c36d: ret]
l_c36e:
	move.b	#0x2F,d0                        	| [$c36e: ld   a,$2F]
	jra	l_c366                             	| [$c370: jr   $C366]
	rts                                    	| [$c372: ret]
draw_repeated_char_c373:
	                    	| [$c373: push bc]
	                        	| [$c374: ld   bc,$FFE0] 65504
	jbsr		osd_w_videoram                        	| [$c377: ld   (hl),a]
	sub.w	#0x20,d6                            	| [$c378: add  hl,bc]
 
	                    	| [$c379: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	draw_repeated_char_c373                             	| [$c37a: djnz $C373]
	rts                                    	| [$c37c: ret]

l_c382:
	move.b	#0x08,d1                        	| [$c382: ld   b,$08]
	* clear ram
	lea	number_of_credits_6000,a0      	| [$c384: ld   hl,number_of_credits_6000]
	clr.b	d0                               	| [$c387: xor  a]
l_c388:
	move.b	d0,d2                           	| [$c388: ld   c,a]
l_c389:
	move.b	d0,(a0)+                         	| [$c389: ld   (hl),a]
                          	| [$c38a: inc  hl]
	subq.b	#1,d2                           	| [$c38b: dec  c]
	jne	l_c389                             	| [$c38c: jr   nz,$C389]
	subq.b	#1,d1                           	| [...]
	jne	l_c388                             	| [$c38e: djnz $C388]
	jra	l_c003                             	| [$c390: jp   $C003]
l_c393:
	move.b	#0x08,d1                        	| [$c393: ld   b,$08]
	lea	number_of_credits_6000,a0      	| [$c395: ld   hl,number_of_credits_6000]
l_c398:
	move.b	d0,d2                           	| [$c398: ld   c,a]
l_c399:
	move.b	d0,(a0)+                         	| [$c399: ld   (hl),a]
	                           	| [$c39a: inc  hl]
 	subq.b	#1,d2                           	| [$c39b: dec  c]
	jne	l_c399                             	| [$c39c: jr   nz,$C399]
	subq.b	#1,d1                           	| [...]
	jne	l_c398                             	| [$c39e: djnz $C398]
	jra	l_c006                             	| [$c3a0: jp   $C006]

change_attribute_everywhere_C3A3:
	* 8 is too much as it writes beyond $9C00
	* changing to 4
	* set all attributes to passed d0
	move.w	#0x03FF,d1                        	| [$29ec: ld   b,$08]
	move.w	#0x9800,d6                      	| [$29ee: ld   hl,$9800]
0:
	jbsr	osd_w_colorram                         	| [$29f3: ld   (hl),a]
	addq.w	#1,d6                           	| [$29f4: inc  hl]
	* kick watchdog
												| [$29f5: push af]
												| [$29f6: ld   a,(watchdog_reset_B800)]
												| [$29f9: pop  af]
	                        	| [$29fa: dec  c]
	                   	| [$29fb: jr   nz,$29F3]
	                           	| [...]
	dbf		d1,0b                             	| [$29fd: djnz $29F1]
	rts                                    	| [$29ff: ret]
	* had to separate both routines
	* as one writes to color ram and the other one
	* writes to RAM with A0
l_c3a8:
	clr.b	d2                               	| [$c3a8: ld   c,$00]
l_c3aa:
	move.b	d0,(a0)+                         	| [$c3aa: ld   (hl),a]
	                           	| [$29f4: inc  hl]
	* kick watchdog
	subq.b	#1,d2                           	| [$c3b1: dec  c]
	jne	l_c3aa                             	| [$c3b2: jr   nz,$C3AA]
	subq.b	#1,d1                           	| [...]
	jne	l_c3a8                             	| [$c3b4: djnz $C3A8]
	rts                                    	| [$c3b6: ret]

clear_screen_C3B7:
	move.b	#0x04,d1                        	| [$c3b7: ld   b,$04]
	move.b	#0xE0,d0                        	| [$c3b9: ld   a,$E0]
	move.w	#0x9000,d6                      	| [$c3bb: ld   hl,$9000]
l_c3be:
	clr.b	d2                               	| [$c3be: ld   c,$00]
l_c3c0:
	jbsr	osd_w_videoram                         	| [$c3c0: ld   (hl),a]
	addq.w	#1,d6                           	| [$c3c1: inc  hl]
 	                        	| [$c3c2: push af]
	            	| [$c3c3: ld   a,(io_read_shit_B800)]
	                        	| [$c3c6: pop  af]
	subq.b	#1,d2                           	| [$c3c7: dec  c]
	jne	l_c3c0                             	| [$c3c8: jr   nz,$C3C0]
	subq.b	#1,d1                           	| [...]
	jne	l_c3be                             	| [$c3ca: djnz $C3BE]
	rts                                    	| [$c3cc: ret]
clear_screen_c3cd:
	move.b	#0xE0,d0                        	| [$c3cd: ld   a,$E0]
	                        	| [$c3cf: ld   a,$E0]
	move.w	#0x93E4,d6                      	| [$c3d1: ld   hl,$93E4]
	move.b	#0x1B,d1                        	| [$c3d4: ld   b,$1B]
l_c3d6:

	move.w	d6,-(sp)                        	| [$c3d6: push hl]
	movem.w	d1/d2,-(sp)                    	| [$c3d7: push bc]
	move.b	#0x20,d1                        	| [$c3d8: ld   b,$20]
	jbsr	draw_repeated_char_c373                            	| [$c3da: call $C373]

	movem.w	(sp)+,d1/d2                    	| [$c3dd: pop  bc]
	move.w	(sp)+,d6                        	| [$c3de: pop  hl]
	addq.w	#1,d6                           	| [$c3df: inc  hl]
 	subq.b	#1,d1                           	| [...]
	jne	l_c3d6                             	| [$c3e0: djnz $C3D6]
	rts                                    	| [$c3e2: ret]

l_c3e3:
	jbsr	osd_disable_display                               	| [$c3e3: ld   a,$00]
	                       	| [$c3e5: ld   ($A003),a]
	move.b	#0x04,d1                        	| [$c3e8: ld   b,$04]
	move.b	#0xE0,d0                        	| [$c3ea: ld   a,$E0]
	move.w	#0x9000,d6                      	| [$c3ec: ld   hl,$9000]
	jbsr	l_c3be                            	| [$c3ef: call $C3BE]
	move.b	#0x3F,d0                        	| [$c3f2: ld   a,$3F]
	jbsr	change_attribute_everywhere_C3A3  	| [$c3f4: call change_attribute_everywhere_C3A3]
	move.b	unknown_628C,d0                 	| [$c3f7: ld   a,(unknown_628C)]
	cmp.b	#0x01,d0                         	| [$c3fa: cp   $01]
	jeq	l_c407                             	| [$c3fc: jr   z,$C407]
	LEA_ROM	       0x56C3,a1                      	| [$c3fe: ld   de,$56C3]
	* write "PUSH START BUTTON" to screen
	move.w	#0x93AF,d6                      	| [$c401: ld   hl,$93AF]
	jbsr	display_localized_text_CA67       	| [$c404: call display_localized_text_CA67]
l_c407:
	move.b	#0x01,d1                        	| [$c407: ld   b,$01]
	lea	player_struct_6580,a0          	| [$c409: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$c40c: ld   a,$00]
	jbsr	l_c3a8                            	| [$c40e: call $C3A8]
	jbsr	display_player_1_and_2_text_ca7e                            	| [$c411: call $CA7E]
	                        	| [$c414: ld   a,$01]
	jbsr	osd_enable_display                       	| [$c416: ld   ($A003),a]
	rts                                    	| [$c419: ret]
l_c41a:
	lea	player_1_score_6176,a2         	| [$c41a: ld   ix,player_1_score_6176]
	move.b	#0x07,d1                        	| [$c41e: ld   b,$07]
	clr.b	d0                               	| [$c420: xor  a]
l_c421:
	nop                                    	| [$c421: nop]
	addq.w	#1,a2                           	| [$c422: inc  ix]
 	subq.b	#1,d1                           	| [...]
	jne	l_c421                             	| [$c424: djnz $C421]
	rts                                    	| [$c426: ret]
l_c427:
	* cocktail mode
*	move.b	flipped_dip_switches_copy_6163,d0	| [$c427: ld   a,(flipped_dip_switches_copy_6163)]
*	and.b	#0x80,d0                         	| [$c42a: and  $80]
*	                         	| [$c42c: cp   $00]
*	jeq	l_c439                             	| [$c42e: jr   z,$C439]
*	move.b	current_player_617C,d0          	| [$c430: ld   a,(current_player_617C)]
*	not.b	d0                               	| [$c433: cpl]
*	and.b	#0x01,d0                         	| [$c434: and  $01]
*	jbsr	hw_video_shit_d8e2                            	| [$c436: call $D8E2]
*l_c439:
	lea	bags_coordinates_609C,a2       	| [$c439: ld   ix,bags_coordinates_609C]
	lea	bags_coordinates_617F,a3       	| [$c43d: ld   iy,bags_coordinates_617F]
	move.b	#0x3B,d1                        	| [$c441: ld   b,$3B]
	jbsr	swap_arrays_c47e                            	| [$c443: call $C47E]
	lea	barrow_screen_params_61C4,a2   	| [$c446: ld   ix,barrow_screen_params_61C4]
	lea	unknown_screen_address_61FA,a3 	| [$c44a: ld   iy,unknown_screen_address_61FA]
	move.b	#0x03,d1                        	| [$c44e: ld   b,$03]
	jbsr	swap_arrays_c47e                            	| [$c450: call $C47E]
	move.b	lives_6056,d0                   	| [$c453: ld   a,(lives_6056)]
	move.w	d0,-(sp)                        	| [$c456: push af]
	move.b	unknown_617E,d0                 	| [$c457: ld   a,(unknown_617E)]
	move.b	d0,lives_6056                   	| [$c45a: ld   (lives_6056),a]
	move.w	(sp)+,d0                        	| [$c45d: pop  af]
	move.b	d0,unknown_617E                 	| [$c45e: ld   (unknown_617E),a]
	move.b	unknown_6290,d0                 	| [$c461: ld   a,(unknown_6290)]
	move.w	d0,-(sp)                        	| [$c464: push af]
	move.b	tile_at_the_destroyable_wall_location_627D,d0                 	| [$c465: ld   a,(tile_at_the_destroyable_wall_location_627D)]
	move.b	d0,unknown_6290                 	| [$c468: ld   (unknown_6290),a]
	move.w	(sp)+,d0                        	| [$c46b: pop  af]
	move.b	d0,tile_at_the_destroyable_wall_location_627D                 	| [$c46c: ld   (tile_at_the_destroyable_wall_location_627D),a]
	move.b	is_key_hunt_phase_6341,d0                 	| [$c46f: ld   a,(is_key_hunt_phase_6341)]
	move.w	d0,-(sp)                        	| [$c472: push af]
	move.b	unknown_6340,d0                 	| [$c473: ld   a,(unknown_6340)]
	move.b	d0,is_key_hunt_phase_6341                 	| [$c476: ld   (is_key_hunt_phase_6341),a]
	move.w	(sp)+,d0                        	| [$c479: pop  af]
	move.b	d0,unknown_6340                 	| [$c47a: ld   (unknown_6340),a]
	rts                                    	| [$c47d: ret]
swap_arrays_c47e:
	move.b	(A2),d0                    	| [$c47e: ld   a,(ix+$00)]
	                        	| [$c481: push af]
	move.b	(A3),(A2)                    	| [$c482: ld   a,(iy+$00)]
                    	| [$c485: ld   (ix+$00),a]
	                        	| [$c488: pop  af]
	move.b	d0,(A3)                    	| [$c489: ld   (iy+$00),a]
	addq.w	#1,a2                           	| [$c48c: inc  ix]
	addq.w	#1,a3                           	| [$c48e: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	swap_arrays_c47e                             	| [$c490: djnz $C47E]
	rts                                    	| [$c492: ret]

guard_collision_with_pick_C493:
	move.b	#0x0B,d2                        	| [$c493: ld   c,$0B]
	move.b	#0x07,d1                        	| [$c495: ld   b,$07]
l_c497:
	move.b	(0x03,a2),d0                    	| [$c497: ld   a,(ix+$03)]
	addq.b	#0x03,d0                        	| [$c49a: add  a,$03]
	sub.b	d2,d0                            	| [$c49c: sub  c]
	cmp.b	(0x03,a3),d0                     	| [$c49d: cp   (iy+$03)]
	jeq	l_c4a8                             	| [$c4a0: jr   z,$C4A8]
	addq.b	#1,d2                           	| [$c4a2: inc  c]
	subq.b	#1,d1                           	| [...]
	jne	l_c497                             	| [$c4a3: djnz $C497]
l_c4a5:
	clr.b	d0                               	| [$c4a5: ld   a,$00]
	rts                                    	| [$c4a7: ret]
l_c4a8:
	move.b	(0x02,a2),d0                    	| [$c4a8: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$c4ab: add  a,$08]
	cmp.b	(0x02,a3),d0                     	| [$c4ad: cp   (iy+$02)]
	jcs	l_c4a5                             	| [$c4b0: jr   c,$C4A5]
	sub.b	#0x0F,d0                         	| [$c4b2: sub  $0F]
	cmp.b	(0x02,a3),d0                     	| [$c4b4: cp   (iy+$02)]
	jcc	l_c4a5                             	| [$c4b7: jr   nc,$C4A5]
	move.b	#0x01,d0                        	| [$c4b9: ld   a,$01]
	rts                                    	| [$c4bb: ret]

* guard does not know where player is (not visible)
* check if guard must wait for the elevator

 * params:
*  current_character_screen_index_6098:	current guard screen
*  a2:	player struct
*  a3:	current guard struct
*  d3:	current guard screen address
*  a0:	address to store bool flag "guard is in the elevator" (603B/607B)
guard_wait_for_elevator_test_C4BC:
	move.b	current_character_screen_index_6098,d0	| [$c4bc: ld   a,(current_character_screen_index_6098)]
	cmp.b	#0x05,d0                         	| [$c4bf: cp   $05]
	jeq	l_d9b7                             	| [$c4c1: jp   z,$D9B7]
	move.b	d0,d1                           	| [$c4c4: ld   b,a]
	move.b	player_screen_600D,d0           	| [$c4c5: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$c4c8: cp   b]
	jne	l_c5cb                             	| [$c4c9: jp   nz,$C5CB]

	move.l	a0,-(sp)                        	| [$c4cc: push hl]

	move.l	a3,-(sp)                        	| [$c4cd: push iy]
	LEA_ROM	       0x1BD1,a3                      	| [$c4cf: ld   iy,$1BD1]
l_c4d3:
	LOAD_AX_BE_WORD_DY	a3,d6                    	| [$c4d3: ld   a,(iy+$00)]
	                           	| [$c4d6: ld   h,a]
	                    	| [$c4d7: ld   a,(iy+$01)]
	                           	| [$c4da: ld   l,a]
	                               	| [$c4db: xor  a]
	cmp.w	d3,d6                            	| [$c4dc: sbc  hl,de]
 	jeq	l_c4f8                             	| [$c4de: jr   z,$C4F8]
	addq.w	#3,a3                           	| [$c4e0: inc  iy] * 3
	move.b	(0x02,a3),d0                    	| [$c4e6: ld   a,(iy+$02)]
	cmp.b	#0xFF,d0                         	| [$c4e9: cp   $FF]
	jne	l_c4d3                             	| [$c4eb: jr   nz,$C4D3]
* not over an elevator waiting point
	move.l	unknown_pointer_6146,a0     	| [$c4ed: ld   hl,(unknown_pointer_6146)]
	clr.b	(a0)                               	| [$c4f0: xor  a]
	                      	| [$c4f1: ld   (hl),a]
l_c4f2:
	move.l	(sp)+,a3                        	| [$c4f2: pop  iy]
	move.l	(sp)+,a0                        	| [$c4f4: pop  hl]
	jra	l_c55a                             	| [$c4f5: jp   $C55A]
 * guard facing the elevator waiting point
l_c4f8:
	move.b	#0x01,d0                        	| [$c4f8: ld   a,$01]
	move.l	unknown_pointer_6146,a0     	| [$c4fa: ld   hl,(unknown_pointer_6146)]
	move.b	(a0),d0                         	| [$c4fd: ld   a,(hl)]
	                         	| [$c4fe: cp   $00]
	jne	l_c4f2                             	| [$c500: jp   nz,$C4F2]
	jbsr	get_elevator_exit_y_c597                            	| [$c503: call $C597]
	move.l	(sp)+,a3                        	| [$c506: pop  iy]
	move.b	d0,d1                           	| [$c508: ld   b,a]
	move.b	(0x03,a3),d0                    	| [$c509: ld   a,(iy+$03)]
	cmp.b	d1,d0                            	| [$c50c: cp   b]
	jeq	l_c58c                             	| [$c50d: jp   z,$C58C]
	move.l	unknown_pointer_6146,a0     	| [$c510: ld   hl,(unknown_pointer_6146)]
	                           	| [$c513: inc  hl] * 4

	move.b	#0x01,d0                        	| [$c517: ld   a,$01]
	* 32 bit pointer adds 2 4 => 6
	move.b	d0,(6,a0)                         	| [$c519: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$c51a: pop  hl]
	* HL pointed on 603B or 607B
	                        	| [$c51b: push de]
	                      	| [$c51c: ld   de,$001C] 28
	                           	| [$c51f: add  hl,de]

	                    	| [$c520: pop  de]
	clr.b	d0                               	| [$c521: xor  a]
	* clear guard not moving timeout counter while waiting for the elevator
	* to avoid that the immobile guard watchdog triggers and resets guard position
	* rework code as it was adding offsets but now there are 32 bit pointers
	* instead of 16... much cleaner that way
	cmp.l	#guard_1_in_elevator_603B,a0
	bne.b	0f
	clr.b	guard_1_not_moving_timeout_counter_6057                    	| [$2b5b: ld   (hl),a]
	bra.b	1f
0:
	* guard 2 in elevator
	clr.b	guard_2_not_moving_timeout_counter_6097                    	| [$2b5b: ld   (hl),a]
1:

	move.b	(0x07,a2),d0                    	| [$c523: ld   a,(ix+$07)]
	subq.b	#1,d0                           	| [$c526: dec  a]
	cmp.b	(0x03,a3),d0                     	| [$c527: cp   (iy+$03)]
	jeq	l_c538                             	| [$c52a: jr   z,$C538]
	subq.b	#1,d0                           	| [$c52c: dec  a]
	cmp.b	(0x03,a3),d0                     	| [$c52d: cp   (iy+$03)]
	jeq	l_c538                             	| [$c530: jr   z,$C538]
	move.l	guard_direction_pointer_6095,a0	| [$c532: ld   hl,(guard_direction_pointer_6095)]
	clr.b	d0                               	| [$c535: xor  a]
	move.b	d0,(a0)                         	| [$c536: ld   (hl),a]
	rts                                    	| [$c537: ret]
l_c538:
	move.b	current_character_screen_index_6098,d0	| [$c538: ld   a,(current_character_screen_index_6098)]
	cmp.b	#0x05,d0                         	| [$c53b: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$c53d: ret  z] [...]
0:
	move.l	unknown_pointer_6146,a0     	| [$c53e: ld   hl,(unknown_pointer_6146)]
	addq.w	#6,a0                           	| [$c541: inc  hl] * 4
	clr.b	d0                               	| [$c545: xor  a]
	move.b	d0,(a0)                         	| [$c546: ld   (hl),a]
	move.b	(0x06,a2),d0                    	| [$c547: ld   a,(ix+$06)]
	move.l	guard_direction_pointer_6095,a0	| [$c54a: ld   hl,(guard_direction_pointer_6095)]
 	cmp.b	(0x02,a3),d0                     	| [$c54d: cp   (iy+$02)]
	jcc	l_c556                             	| [$c550: jr   nc,$C556]
	move.b	#0x40,d0                        	| [$c552: ld   a,$40]
	move.b	d0,(a0)                         	| [$c554: ld   (hl),a]
	rts                                    	| [$c555: ret]
l_c556:
	move.b	#0x80,d0                        	| [$c556: ld   a,$80]
	move.b	d0,(a0)                         	| [$c558: ld   (hl),a]
	rts                                    	| [$c559: ret]
l_c55a:
	move.b	(a0),d0                         	| [$c55a: ld   a,(hl)]
	cmp.b	#0x01,d0                         	| [$c55b: cp   $01]
	jeq	l_c568                             	| [$c55d: jr   z,$C568]
	move.l	unknown_pointer_6146,a0     	| [$c55f: ld   hl,(unknown_pointer_6146)]
	* was +4, but pointer is now 32 bits and points on                           	| [$2b8c: inc  hl] * 4
	* unknown_6144 so it would write in wrong location instead of
	* guard_1_not_moving_flag_6148...
	move.b	d0,(6,a0)                         	| [$2b90: ld   (hl),a]
	rts                                    	| [$c567: ret]
l_c568:
	move.l	unknown_pointer_6146,a0     	| [$c568: ld   hl,(unknown_pointer_6146)]
	move.b	#0x01,d0                        	| [$c56b: ld   a,$01]
	move.b	d0,(a0)                         	| [$c56d: ld   (hl),a]
	jbsr	get_elevator_exit_y_c597                            	| [$c56e: call $C597]
	move.b	d0,d1                           	| [$c571: ld   b,a]
	move.b	(0x03,a3),d0                    	| [$c572: ld   a,(iy+$03)]
	cmp.b	d1,d0                            	| [$c575: cp   b]
	jeq	l_c58d                             	| [$c576: jr   z,$C58D]
	addq.w	#4,a0                           	| [$c578: inc  hl] * 4
	move.b	#0x01,d0                        	| [$c57c: ld   a,$01]
	move.b	d0,(a0)                         	| [$c57e: ld   (hl),a]
	move.b	#0xC0,d0                        	| [$c57f: ld   a,$C0]
	move.b	d0,(0x02,a3)                    	| [$c581: ld   (iy+$02),a]
	jra	l_c586                             	| [$c584: jr   $C586]
l_c586:
	move.l	guard_direction_pointer_6095,a0	| [$c586: ld   hl,(guard_direction_pointer_6095)]
	clr.b	d0                               	| [$c589: xor  a]
	move.b	d0,(a0)                         	| [$c58a: ld   (hl),a]
	rts                                    	| [$c58b: ret]
l_c58c:
	move.l	(sp)+,a0                        	| [$c58c: pop  hl]
l_c58d:
	move.l	unknown_pointer_6146,a0     	| [$c58d: ld   hl,(unknown_pointer_6146)]
 	* was +4, but pointer is now 32 bits and points on                           	| [$2b8c: inc  hl] * 4
	* unknown_6144 so it would write in wrong location instead of
	* guard_1_not_moving_flag_6148...
	                           	| [$c590: inc  hl] * 4
	                               	| [$c594: xor  a]
	clr.b	(6,a0)                          	| [$c595: ld   (hl),a]
	rts                                    	| [$c596: ret]
get_elevator_exit_y_c597:
	move.b	current_character_screen_index_6098,d0	| [$c59a: ld   a,(current_character_screen_index_6098)]
	cmp.b	#0x04,d0                         	| [$c59d: cp   $04]
	jeq	l_c5a4                             	| [$c59f: jr   z,$C5A4]
	cmp.b	#0x05,d0                         	| [$c5a1: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$c5a3: ret  z] [...]
0:
l_c5a4:
	move.b	(0x02,a2),d0                    	| [$c5a4: ld   a,(ix+$02)]
	move.b	#0x80,d1                        	| [$c5a9: ld   b,$80]
	cmp.b	#0xC0,d0                         	| [$c5a7: cp   $C0]
	jcc	l_c5af                             	| [$c5ab: jr   nc,$C5AF]
	move.b	#0x40,d1                        	| [$c5ad: ld   b,$40]
l_c5af:
	move.b	(0x03,a2),d0                    	| [$c5af: ld   a,(ix+$03)]
	cmp.b	#0x68,d0                         	| [$c5b2: cp   $68]
	jcs	0f                             	| [$c5b6: jr   c,$C5C4]
	move.b	(0x03,a2),d0                    	| [$c5b8: ld   a,(ix+$03)]
	cmp.b	#0xC0,d0                         	| [$c5bb: cp   $C0]
	jcs	1f                             	| [$c5bf: jr   c,$C5C4]
	move.b	#0xE1,d0                        	| [$c5c1: ld   a,$E1]
	rts                                    	| [$c5c3: ret]
0:
	move.b	#0x18,d0                        	| [$c5b4: ld   a,$18]
	bra.b	l_c5c4
1:
	move.b	#0x71,d0                        	| [$c5bd: ld   a,$71]
l_c5c4:

	move.l	a0,-(sp)                        	| [$c5c4: push hl]
	move.l	guard_direction_pointer_6095,a0	| [$c5c5: ld   hl,(guard_direction_pointer_6095)]
	move.b	d1,(a0)                         	| [$c5c8: ld   (hl),b]
	move.l	(sp)+,a0                        	| [$c5c9: pop  hl]
	rts                                    	| [$c5ca: ret]
l_c5cb:
	move.l	unknown_pointer_6146,a0     	| [$c5cb: ld   hl,(unknown_pointer_6146)]
* was +4 but now +6 because points on 6144 and 6146 is 32 bit...
                          	| [$c5ce: inc  hl] * 4
 	                               	| [$c5d2: xor  a]
	clr.b	(6,a0)                         	| [$c5d3: ld   (hl),a]
	rts                                    	| [$c5d4: ret]

wait_and_check_credits_c5d5:
	jbsr	osd_enable_vblank_interrupt  | ei
l_c5d9:
	st.b	d1                                	| [$c5d9: ld   b,$FF]
l_c5db:
	move.b	number_of_credits_6000,d0       	| [$c5db: ld   a,(number_of_credits_6000)]
	                       	| [$c5de: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$c5e0: ret  nz] [...]
0:
	move.w	#2,d0
	jbsr	osd_wait
	            	| [$c5e1: ld   a,(io_read_shit_B800)]
	jbsr	osd_enable_vblank_interrupt  | ei
	subq.b	#1,d1                           	| [...]
	jne	l_c5db                             	| [$c5e5: djnz $C5DB]
                      	| [$c5e7: dec  hl]
                      	| [$c5e8: ld   a,h]
                       	| [$c5e9: cp   $00]
                       	| [...]
	rts                                    	| [$c5eb: ret  z] [...]
0:
                          	| [$c5ec: jr   $C5D9]

compute_guard_speed_from_dipsw_C5EE:
	move.b	check_scenery_disabled_61ED,d0  	| [$c5ee: ld   a,(check_scenery_disabled_61ED)]
	cmp.b	#0x01,d0                         	| [$c5f1: cp   $01]
                         	| [$c5f3: ld   a,$00]
	jeq	l_c619                             	| [$c5f5: jr   z,$C619]
 	move.b	score_ten_thousands_player_1_6178,d1	| [$c5f7: ld   a,(score_ten_thousands_player_1_6178)]
			                           	| [$c5fa: ld   b,a]
	move.b	current_player_617C,d0          	| [$c5fb: ld   a,(current_player_617C)]
	cmp.b	#0x01,d0                         	| [$c5fe: cp   $01]
	jne	l_c606                             	| [$c600: jr   nz,$C606]
	move.b	score_ten_thousands_player_2_617B,d1	| [$c602: ld   a,(score_ten_thousands_player_2_617B)]
	                  			         	| [$c605: ld   b,a]
l_c606:
	jbsr	osd_read_dipswitches                       	| [$c606: ld   a,($B000)]
       CLEAR_XC_FLAG
	roxr.b	#3,d0                           	| [$c609: rr   a] * 3
	not.b	d0                               	| [$c60f: cpl]
	and.b	#0x03,d0                         	| [$c610: and  $03]
	add.b	d1,d0                            	| [$c612: add  a,b]
	clr.b	d1                               	| [$c613: ld   b,$00]
	jbsr	compute_guard_speed_c61d                            	| [$c615: call $C61D]
	move.b	d1,guard_speed_6164                           	| [$c618: ld   a,b]
	rts
l_c619:
	clr.b	guard_speed_6164             	| [$c619: ld   (guard_speed_6164),a]
	rts                                    	| [$c61c: ret]
 * depending on score & difficulty level, return guard speed in b
 * easy:	0->10000 :	0
 * easy:	10000->20000 :	2
 * easy:	20000-30000:	4
 * easy:	30000->40000 :	5
 * easy:	40000 :	 9
 * easy:	50000 :	 10
 * easy:	60000 :	 10
 * easy:	70000 :	 11
 * easy:	80000 :	 12
 * easy:	90000 :	 13
 * easy:	100000 :	 14 !!!
 
 * medium:	0->10000 :	2
 * medium:	10000->20000:	 4
 * medium:	20000->30000 :	5
 * medium:	30000->40000 :	9
 * medium:	after 40000:	10
 *
 * very easy mode follows easy mode, but score is 1/4th of the score
 * so guard speed remains low
 
compute_guard_speed_c61d:
	cmp.b	#0x01,d0                         	| [$c61d: cp   $01]
	bcc.b	0f                               	| [...]
	rts                                    	| [$c61f: ret  c] [...]
0:
	move.b	#0x02,d1                        	| [$c620: ld   b,$02]
	cmp.b	#0x02,d0                         	| [$c622: cp   $02]
	bcc.b	0f                               	| [...]
	rts                                    	| [$c624: ret  c] [...]
0:
	move.b	#0x04,d1                        	| [$c625: ld   b,$04]
	cmp.b	#0x03,d0                         	| [$c627: cp   $03]
	bcc.b	0f                               	| [...]
	rts                                    	| [$c629: ret  c] [...]
0:
	move.b	#0x05,d1                        	| [$c62a: ld   b,$05]
	cmp.b	#0x04,d0                         	| [$c62c: cp   $04]
	bcc.b	0f                               	| [...]
	rts                                    	| [$c62e: ret  c] [...]
0:
	move.b	#0x09,d1                        	| [$c62f: ld   b,$09]
	cmp.b	#0x05,d0                         	| [$c631: cp   $05]
	bcc.b	0f                               	| [...]
	rts                                    	| [$c633: ret  c] [...]
0:
	                             	| [$c634: jp   $FF00]
	tst.b	very_easy_flag
	beq.b	0f
	move.b	#0x0A,d1
	* very easy mode: guard speeds are limited to 10 even with a very high score
	rts
									
	* another proof (if it was needed!) that
	* super bagman wants you dead even more than bagman:
	* guard speed increases even over 40000/50000 points to speeds never
	* attained in the original Bagman. In the original Bagman, guard speed
	* cannot exceed Bagman speed (when he doesn't carry bags). Now guard speed
	* can be faster than Bagman! almost as fast as wagons! (max 14 vs max 10)
	*
	* original bug: speed is never 10 as Jacques forgot to set
	* speed below. It tests > 50000 and > 60000 without setting speed at 10
	* so guard speed remains the same from 50000 to 70000 then it increases
	* and catches up! (9 => 11)
	*
	* the part of code below was added to Bagman code at the end of the ROM
	* I moved it here for more clarity
	
	
0:
	cmp.b	#0x06,d0                         	| [$ff00: cp   $06]
	bcc.b	0f                               	| [...]
	rts                                    	| [$ff02: ret  c] [...]
0:
	move.b	#0x0B,d1                        	| [$ff03: ld   b,$0B]
	cmp.b	#0x07,d0                         	| [$ff05: cp   $07]
	bcc.b	0f                               	| [...]
	rts                                    	| [$ff07: ret  c] [...]
0:
	move.b	#0x0C,d1                        	| [$ff08: ld   b,$0C]
	cmp.b	#0x08,d0                         	| [$ff0a: cp   $08]
	bcc.b	0f                               	| [...]
	rts                                    	| [$ff0c: ret  c] [...]
0:
	move.b	#0x0D,d1                        	| [$ff0d: ld   b,$0D]
	cmp.b	#0x09,d0                         	| [$ff0f: cp   $09]
	bcc.b	0f                               	| [...]
	rts                                    	| [$ff11: ret  c] [...]
0:
	* after 100000 points speed "stabilizes" but it's crazy :)
	move.b	#0x0E,d1                        	| [$ff12: ld   b,$0E]
	cmp.b	#0x0A,d0                         	| [$ff14: cp   $0A]
	rts                                    	| [$ff16: ret]
	
l_c637:
	lea	guard_1_struct_6594,a2         	| [$c637: ld   ix,guard_1_struct_6594]
	lea	object_held_struct_659C,a3     	| [$c63b: ld   iy,object_held_struct_659C]
	jbsr	guard_collision_with_pick_C493    	| [$c63f: call guard_collision_with_pick_C493]
	cmp.b	#0x01,d0                         	| [$c642: cp   $01]
	jne	l_c655                             	| [$c644: jr   nz,$C655]
	move.b	has_bag_6158,d0                 	| [$c646: ld   a,(has_bag_6158)]
	cmp.b	#0x01,d0                         	| [$c649: cp   $01]
	jeq	l_c655                             	| [$c64b: jr   z,$C655]
	move.b	#0x01,d0                        	| [$c64d: ld   a,$01]
	move.b	d0,guard_1_in_elevator_6037     	| [$c64f: ld   (guard_1_in_elevator_6037),a]
	move.b	d0,unknown_6208                 	| [$c652: ld   (unknown_6208),a]
l_c655:
	lea	guard_2_struct_6598,a2         	| [$c655: ld   ix,guard_2_struct_6598]
	lea	object_held_struct_659C,a3     	| [$c659: ld   iy,object_held_struct_659C]
	jbsr	guard_collision_with_pick_C493    	| [$c65d: call guard_collision_with_pick_C493]
	cmp.b	#0x01,d0                         	| [$c660: cp   $01]
	jne	l_c673                             	| [$c662: jr   nz,$C673]
	move.b	has_bag_6158,d0                 	| [$c664: ld   a,(has_bag_6158)]
	cmp.b	#0x01,d0                         	| [$c667: cp   $01]
	jeq	l_c673                             	| [$c669: jr   z,$C673]
	move.b	#0x01,d0                        	| [$c66b: ld   a,$01]
	move.b	d0,guard_2_in_elevator_6077     	| [$c66d: ld   (guard_2_in_elevator_6077),a]
	move.b	d0,unknown_6209                 	| [$c670: ld   (unknown_6209),a]
l_c673:
	rts                                    	| [$c673: ret]
check_if_high_score_beaten_c674:
	move.b	must_play_music_6210,d0         	| [$c674: ld   a,(must_play_music_6210)]
	cmp.b	#0x01,d0                         	| [$c677: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$c679: ret  nz] [...]
0:
	lea	player_1_score_6176,a3         	| [$c67a: ld   iy,player_1_score_6176]
	jbsr	check_score_rank_c746                            	| [$c67e: call $C746]
	move.b	d1,d0                           	| [$c681: ld   a,b]
	cmp.b	#0x05,d0                         	| [$c682: cp   $05]
	jcs	l_c691                             	| [$c684: jr   c,$C691]
	lea	player_2_score_6179,a3         	| [$c686: ld   iy,player_2_score_6179]
	jbsr	check_score_rank_c746                            	| [$c68a: call $C746]
	move.b	d1,d0                           	| [$c68d: ld   a,b]
	cmp.b	#0x05,d0                         	| [$c68e: cp   $05]
	bcs.b	0f                               	| [...]
	rts                                    	| [$c690: ret  nc] [...]
0:
l_c691:
	jbsr	prepare_cleared_screen_FB98       	| [$c691: call prepare_cleared_screen_FB98]
	jbsr	high_score_entry_c969                            	| [$c694: call $C969]
	move.b	unknown_626C,d0                 	| [$c697: ld   a,(unknown_626C)]
	cmp.b	#0x01,d0                         	| [$c69a: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_c427                            	| [$c69c: call z,$C427]
0:
	jbsr	draw_highscore_names_and_scores_c8fb                            	| [$c69f: call $C8FB]
	move.b	#0x01,d0                        	| [$c6a2: ld   a,$01]
	jbsr	hw_video_shit_d8e2                            	| [$c6a4: call $D8E2]
	lea	player_1_score_6176,a3         	| [$c6a7: ld   iy,player_1_score_6176]
	jbsr	check_score_rank_c746                            	| [$c6ab: call $C746]
	move.b	d1,d0                           	| [$c6ae: ld   a,b]
	cmp.b	#0x05,d0                         	| [$c6af: cp   $05]
	jcc	l_c6df                             	| [$c6b1: jp   nc,$C6DF]
	addq.w	#3,a2                           	| [$c6b4: inc  ix] * 3
	                    	| [$c6ba: push de]

	                      	| [$c6bb: ld   de,$FFF0]
	sub.w	#0x10,a2                            	| [$c6be: add  ix,de]
	                       	| [$c6c0: pop  de]
	

	move.l	a2,-(sp)                        	| [$c6c1: push ix]
	addq.w	#2,d6                           	| [$c6c3: inc  hl] * 2
l_c6c5:

	move.l	a0,-(sp)                        	| [$c6c5: push hl]
	jbsr	l_c772                            	| [$c6c6: call $C772]
	move.b	#0x60,d0                        	| [$c6c9: ld   a,$60]
	move.b	d0,time_61E8                    	| [$c6cb: ld   (time_61E8),a]
	move.l	(sp)+,a0                        	| [$c6ce: pop  hl]
	jbsr	draw_highscore_names_and_scores_c8fb                            	| [$c6cf: call $C8FB]
	move.l	(sp)+,a2                        	| [$c6d2: pop  ix]
	move.b	#0x01,d0                        	| [$c6d4: ld   a,$01]
	move.b	d0,unknown_6279                 	| [$c6d6: ld   (unknown_6279),a]
	jbsr	enter_highscore_name_c7c6                            	| [$c6d9: call $C7C6]
	jbsr	draw_highscore_names_and_scores_c8fb                            	| [$c6dc: call $C8FB]
	lea		high_score_table_6217,a0
	jbsr	osd_write_high_scores
l_c6df:
	move.b	number_of_players_617D,d0       	| [$c6df: ld   a,(number_of_players_617D)]
	cmp.b	#0x01,d0                         	| [$c6e2: cp   $01]
	jeq	l_c73e                             	| [$c6e4: jr   z,$C73E]
	jbsr	osd_read_dipswitches                       	| [$c6e6: ld   a,($B000)]
	and.b	#0x80,d0                         	| [$c6e9: and  $80]
	cmp.b	#0x80,d0                         	| [$c6eb: cp   $80]
	jeq	l_c6f4                             	| [$c6ed: jr   z,$C6F4]
	clr.b	d0                               	| [$c6ef: ld   a,$00]
	jbsr	hw_video_shit_d8e2                            	| [$c6f1: call $D8E2]
l_c6f4:
	move.b	player_input_6026,d0            	| [$c6f4: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$c6f7: and  $80]
	cmp.b	#0x80,d0                         	| [$c6f9: cp   $80]
	jeq	l_c6f4                             	| [$c6fb: jr   z,$C6F4]
	lea	player_2_score_6179,a3         	| [$c6fd: ld   iy,player_2_score_6179]
	jbsr	check_score_rank_c746                            	| [$c701: call $C746]
	move.b	d1,d0                           	| [$c704: ld   a,b]
	cmp.b	#0x05,d0                         	| [$c705: cp   $05]
	jcc	l_c73e                             	| [$c707: jr   nc,$C73E]
	jbsr	draw_highscore_names_and_scores_c8fb                            	| [$c709: call $C8FB]
	addq.w	#3,a2                           	| [$c70c: inc  ix] * 3
                    	| [$c712: push de]
                        	| [$c712: push de]
                     	| [$c713: ld   de,$FFF0]
	sub.w	#0x10,a2                            	| [$c716: add  ix,de]
                     	| [$c718: pop  de]
                   	| [$c718: pop  de]

	move.l	a2,-(sp)                        	| [$c719: push ix]
	addq.w	#2,a0                           	| [$c71b: inc  hl] * 2

	move.l	a0,-(sp)                        	| [$c71d: push hl]
	jbsr	l_c772                            	| [$c71e: call $C772]
	move.b	#0x60,d0                        	| [$c721: ld   a,$60]
	move.b	d0,time_61E8                    	| [$c723: ld   (time_61E8),a]
	move.l	(sp)+,a0                        	| [$c726: pop  hl]
	jbsr	draw_highscore_names_and_scores_c8fb                            	| [$c727: call $C8FB]
	move.l	(sp)+,a2                        	| [$c72a: pop  ix]
	clr.b	d0                               	| [$c72c: ld   a,$00]
	move.b	d0,unknown_6279                 	| [$c72e: ld   (unknown_6279),a]
	jbsr	busy_wait_c887                            	| [$c731: call $C887]
	jbsr	busy_wait_c887                            	| [$c734: call $C887]
	jbsr	busy_wait_c887                            	| [$c737: call $C887]
	jbsr	enter_highscore_name_c7c6                            	| [$c73a: call $C7C6]
	rts                                    	| [$c73d: ret]
l_c73e:
	clr.b	d0                               	| [$c73e: xor  a]
	move.b	d0,unknown_6267                 	| [$c73f: ld   (unknown_6267),a]
	jbsr	osd_disable_display	| [$c742: ld   ($A003),a]
	rts                                    	| [$c745: ret]
check_score_rank_c746:
	lea	high_score_table_6217,a2       	| [$c746: ld   ix,high_score_table_6217]
	move.w	#0x0010,d3                      	| [$c74a: ld   de,$0010] 16
	move.w	#0x920F,d6                      	| [$c74d: ld   hl,$920F]
	move.b	#0x05,d1                        	| [$c750: ld   b,$05]
	* check scores against highscore table scores
l_c752:
	move.b	(0x02,a3),d0                    	| [$c752: ld   a,(iy+$02)]
	cmp.b	(0x02,a2),d0                     	| [$c755: cp   (ix+$02)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$c758: ret  c] [...]
0:
	jne	l_c76b                             	| [$c759: jr   nz,$C76B]
	move.b	(0x01,a3),d0                    	| [$c75b: ld   a,(iy+$01)]
	cmp.b	(0x01,a2),d0                     	| [$c75e: cp   (ix+$01)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$c761: ret  c] [...]
0:
	jne	l_c76b                             	| [$c762: jr   nz,$C76B]
	move.b	(A3),d0                    	| [$c764: ld   a,(iy+$00)]
	cmp.b	(A2),d0                     	| [$c767: cp   (ix+$00)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$c76a: ret  c] [...]
0:
l_c76b:
	add.w	d3,a2                            	| [$c76b: add  ix,de]
 	subq.w	#2,d6                           	| [$c76d: dec  hl] * 2
	subq.b	#1,d1                           	| [...]
	jne	l_c752                             	| [$c76f: djnz $C752]
	rts                                    	| [$c771: ret]
l_c772:
	movem.w	d1/d2,-(sp)                    	| [$c772: push bc]
	lea	high_score_table_6217,a2       	| [$c773: ld   ix,high_score_table_6217]
l_c777:
	move.b	d1,d0                           	| [$c777: ld   a,b]
	cmp.b	#0x04,d0                         	| [$c778: cp   $04]
	jcc	l_c78d                             	| [$c77a: jr   nc,$C78D]
	movem.w	d1/d2,-(sp)                    	| [$c77c: push bc]
	move.b	#0x10,d1                        	| [$c77d: ld   b,$10]
l_c77f:
	move.b	(0x10,a2),d0                    	| [$c77f: ld   a,(ix+$10)]
	move.b	d0,(A2)+                    	| [$c782: ld   (ix+$00),a]
	                           	| [$c785: inc  ix]
 	subq.b	#1,d1                           	| [...]
	jne	l_c77f                             	| [$c787: djnz $C77F]

	movem.w	(sp)+,d1/d2                    	| [$c789: pop  bc]
	addq.b	#1,d1                           	| [$c78a: inc  b]
	jra	l_c777                             	| [$c78b: jr   $C777]
l_c78d:

	movem.w	(sp)+,d1/d2                    	| [$c78d: pop  bc]
	lea	high_score_table_6217,a2       	| [$c78e: ld   ix,high_score_table_6217]
l_c792:
	move.b	d1,d0                           	| [$c792: ld   a,b]
	cmp.b	#0x04,d0                         	| [$c793: cp   $04]
	jcc	l_c79c                             	| [$c795: jr   nc,$C79C]
	add.w	d3,a2                            	| [$c797: add  ix,de]
	addq.b	#1,d1                           	| [$c799: inc  b]
	jra	l_c792                             	| [$c79a: jr   $C792]
l_c79c:
	move.b	(A3),d0                    	| [$c79c: ld   a,(iy+$00)]
	move.b	d0,(A2)                    	| [$c79f: ld   (ix+$00),a]
	move.b	(0x01,a3),d0                    	| [$c7a2: ld   a,(iy+$01)]
	move.b	d0,(0x01,a2)                    	| [$c7a5: ld   (ix+$01),a]
	move.b	(0x02,a3),d0                    	| [$c7a8: ld   a,(iy+$02)]
	move.b	d0,(0x02,a2)                    	| [$c7ab: ld   (ix+$02),a]
	movem.w	d1/d2,-(sp)                    	| [$c7ae: push bc]
	move.b	#0x0D,d1                        	| [$c7af: ld   b,$0D]

	move.l	a2,-(sp)                        	| [$c7b1: push ix]
	addq.w	#3,a2                           	| [$c7b3: inc  ix] * 3
	move.b	#0x10,d0                        	| [$c7b9: ld   a,$10]
l_c7bb:
	move.b	d0,(A2)+                    	| [$c7bb: ld   (ix+$00),a]
	                           	| [$c7be: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_c7bb                             	| [$c7c0: djnz $C7BB]
	move.l	(sp)+,a2                        	| [$c7c2: pop  ix]

	movem.w	(sp)+,d1/d2                    	| [$c7c4: pop  bc]
	rts                                    	| [$c7c5: ret]
	
enter_highscore_name_c7c6:
	move.b	#0x11,d1                        	| [$c7c6: ld   b,$11]
	clr.b	d0                               	| [$c7c8: ld   a,$00]
	move.b	d0,high_score_joystick_input_6278	| [$c7ca: ld   (high_score_joystick_input_6278),a]
l_c7cd:
*	move.b	unknown_6279,d0                 	| [$c7cd: ld   a,(unknown_6279)]
*	cmp.b	#0x01,d0                         	| [$c7d0: cp   $01]
*	jne	l_c7d9                             	| [$c7d2: jr   nz,$C7D9]
l_c7d4:
	jbsr	read_controls_highscore_ca0a                            	| [$c7d4: call $CA0A]
	* cocktail
*	jra	l_c7e5                             	| [$c7d7: jr   $C7E5]
*l_c7d9:
*	jbsr	osd_read_dipswitches                       	| [$c7d9: ld   a,($B000)]
*	and.b	#0x80,d0                         	| [$c7dc: and  $80]
*	cmp.b	#0x80,d0                         	| [$c7de: cp   $80]
*	jeq	l_c7d4                             	| [$c7e0: jr   z,$C7D4]
*	jbsr	read_controls_highscore_ca26                            	| [$c7e2: call $CA26]
*l_c7e5:
	move.b	high_score_joystick_input_6278,d0	| [$c7e5: ld   a,(high_score_joystick_input_6278)]
	and.b	#0x10,d0                         	| [$c7e8: and  $10]
	cmp.b	#0x10,d0                         	| [$c7ea: cp   $10]
	bne.b	0f                               	| [...]
	jbsr	l_c820                            	| [$c7ec: call z,$C820]
0:
	move.b	high_score_joystick_input_6278,d0	| [$c7ef: ld   a,(high_score_joystick_input_6278)]
	and.b	#0x08,d0                         	| [$c7f2: and  $08]
	cmp.b	#0x08,d0                         	| [$c7f4: cp   $08]
	bne.b	0f                               	| [...]
	jbsr	l_c82f                            	| [$c7f6: call z,$C82F]
0:
	move.b	high_score_joystick_input_6278,d0	| [$c7f9: ld   a,(high_score_joystick_input_6278)]
	and.b	#0x40,d0                         	| [$c7fc: and  $40]
	cmp.b	#0x40,d0                         	| [$c7fe: cp   $40]
	bne.b	0f                               	| [...]
	jbsr	l_c83e                            	| [$c800: call z,$C83E]
0:
	move.b	high_score_joystick_input_6278,d0	| [$c803: ld   a,(high_score_joystick_input_6278)]
	and.b	#0x20,d0                         	| [$c806: and  $20]
	cmp.b	#0x20,d0                         	| [$c808: cp   $20]
	bne.b	0f                               	| [...]
	jbsr	l_c85c                            	| [$c80a: call z,$C85C]
0:
	move.b	high_score_joystick_input_6278,d0	| [$c80d: ld   a,(high_score_joystick_input_6278)]
	and.b	#0x80,d0                         	| [$c810: and  $80]
	cmp.b	#0x80,d0                         	| [$c812: cp   $80]
	bne.b	0f                               	| [...]
	rts                                    	| [$c814: ret  z] [...]
0:
	move.b	time_61E8,d0                    	| [$c815: ld   a,(time_61E8)]
	                         	| [$c818: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$c81a: ret  z] [...]
0:
	jbsr	write_current_highscore_name_letter_c878                            	| [$c81b: call $C878]
	jra	l_c7cd                             	| [$c81e: jr   $C7CD]
l_c820:
	move.b	d1,d0                           	| [$c820: ld   a,b]
	cmp.b	#0x2A,d0                         	| [$c821: cp   $2A]
	jne	l_c827                             	| [$c823: jr   nz,$C827]
	move.b	#0x10,d1                        	| [$c825: ld   b,$10]
l_c827:
	addq.b	#1,d1                           	| [$c827: inc  b]
	jbsr	write_current_highscore_name_letter_c878                            	| [$c828: call $C878]
	jbsr	busy_wait_c887                            	| [$c82b: call $C887]
	rts                                    	| [$c82e: ret]
l_c82f:
	move.b	d1,d0                           	| [$c82f: ld   a,b]
	cmp.b	#0x10,d0                         	| [$c830: cp   $10]
	jne	l_c836                             	| [$c832: jr   nz,$C836]
	move.b	#0x2B,d1                        	| [$c834: ld   b,$2B]
l_c836:
	subq.b	#1,d1                           	| [$c836: dec  b]
	jbsr	write_current_highscore_name_letter_c878                            	| [$c837: call $C878]
	jbsr	busy_wait_c887                            	| [$c83a: call $C887]
	rts                                    	| [$c83d: ret]
l_c83e:
	move.b	d6,d0                           	| [$c83e: ld   a,l]
	and.b	#0xF0,d0                         	| [$c83f: and  $F0]
	                         	| [$c841: cp   $00]
	jne	l_c849                             	| [$c843: jr   nz,$C849]
	move.w	d6,d0                           	| [$c845: ld   a,h]
	lsr.w	#8,d0
	cmp.b	#0x92,d0                         	| [$c846: cp   $92]
	bne.b	0f                               	| [...]
	rts                                    	| [$c848: ret  z] [...]
0:
l_c849:
	move.b	#0x10,d1                        	| [$c849: ld   b,$10]
	jbsr	write_current_highscore_name_letter_c878                            	| [$c84b: call $C878]
	                     	| [$c84e: ld   de,$0020] 32
	add.w	#0x0020,d6                            	| [$c851: add  hl,de]
	subq.w	#1,a2                           	| [$c852: dec  ix]
 	jbsr	osd_r_videoram                         	| [$c854: ld   b,(hl)]
	move.b	d0,d1
	jbsr	write_current_highscore_name_letter_c878                            	| [$c855: call $C878]
	jbsr	busy_wait_c887                            	| [$c858: call $C887]
	rts                                    	| [$c85b: ret]
l_c85c:
	* highscore entry was limited to 3 letters which is stupid
	* original game allowed much longer names, restored that
	move.b	d6,d0                           	| [$c85c: ld   a,l]
	and.b	#0xF0,d0                         	| [$c85d: and  $F0]
	cmp.b	#0x80,d0                         	| [$c85f: cp   $C0]
	jne	l_c867                             	| [$c861: jr   nz,$C867]
	move.w	d6,d0                           	| [$c863: ld   a,h]
	lsr.w	#8,d0
	cmp.b	#0x90,d0                         	| [$c864: cp   $91]
	bne.b	0f                               	| [...]
	rts                                    	| [$c866: ret  z] [...]
0:
l_c867:
	                      	| [$c867: ld   de,$0020] 32
	* next X                               	| [$c86a: xor  a]
	sub.w	#0x20,d6                            	| [$c86b: sbc  hl,de]
	addq.w	#1,a2                           	| [$c86d: inc  ix]
	move.b	#0x11,d1                        	| [$c86f: ld   b,$11]
	jbsr	write_current_highscore_name_letter_c878                            	| [$c871: call $C878]
	jbsr	busy_wait_c887                            	| [$c874: call $C887]
	rts                                    	| [$c877: ret]

* < d1: letter (0x11: A, 0x12: B and so on)
* < a2: highscore table name pointer
* < d6: screen pointer
write_current_highscore_name_letter_c878:
	move.b	d1,d0                           	| [$c878: ld   a,b]
	move.b	d0,(A2)                    	| [$c879: ld   (ix+$00),a]


write_highscore_name_letter_c87c:
	jbsr	osd_w_videoram                         	| [$c87c: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$c87d: push hl]
	                           	| [$c87e: ld   a,h]
	add.w	#0x0800,d6                         	| [$c87f: add  a,$08]
	                           	| [$c881: ld   h,a]
	move.b	#0x04,d0                        	| [$c882: ld   a,$04]
	jbsr	osd_w_colorram                         	| [$c884: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$c885: pop  hl]
	rts                                    	| [$c886: ret]
busy_wait_c887:
	* wait some time (highscore letter input)
	move.w	#20,d0
	jbsr	osd_wait

	rts                                    	| [$c89a: ret]
draw_hiscore_frames_c89b:
	move.w	#0x9325,d6                      	| [$c89b: ld   hl,$9325]
	LEA_ROM	       0x574F,a1                      	| [$c89e: ld   de,$574F]
	jbsr	display_localized_text_CA67       	| [$c8a1: call display_localized_text_CA67]
	move.w	#0x9205,d6                      	| [$c8a4: ld   hl,$9205]
	LEA_ROM	       0x5755,a1                      	| [$c8a7: ld   de,$5755]
	jbsr	display_localized_text_CA67       	| [$c8aa: call display_localized_text_CA67]
	move.w	#0x92E3,d6                      	| [$c8ad: ld   hl,$92E3]
	LEA_ROM	       0x5690,a1                      	| [$c8b0: ld   de,$5690]
	jbsr	display_localized_text_CA67       	| [$c8b3: call display_localized_text_CA67]
	move.w	#0x9883,d6                      	| [$c8b6: ld   hl,$9883]
	move.b	#0x0E,d0                        	| [$c8b9: ld   a,$0E]
	jbsr	write_attribute_on_line_5605      	| [$c8bb: call write_attribute_on_line_5605]
	LEA_ROM	       0x4D00,a1                      	| [$c8be: ld   de,$4D00]
	move.w	#0x9382,d6                      	| [$c8c1: ld   hl,$9382]
	move.b	#0x12,d0                        	| [$c8c4: ld   a,$12]
	exg	d0,d7                              	| [$c8c6: ex   af,af']
 	jbsr	write_text_55f0                            	| [$c8c7: call $55F0]
	LEA_ROM	       0x4D1B,a1                      	| [$c8ca: ld   de,$4D1B]
	move.w	#0x9390,d6                      	| [$c8cd: ld   hl,$9390]
	move.b	#0x12,d0                        	| [$c8d0: ld   a,$12]
	exg	d0,d7                              	| [$c8d2: ex   af,af']
	jbsr	write_text_55f0                            	| [$c8d3: call $55F0]
	* draw vertical red bars (frames)
	move.b	#0x0D,d1                        	| [$c8d6: ld   b,$0D]
	move.b	#0x8B,d0                        	| [$c8d8: ld   a,$8B]
	move.w	#0x9383,d6                      	| [$c8da: ld   hl,$9383]
	jbsr	write_score_frame_vertical_bar_c8eb                            	| [$c8dd: call $C8EB]
	move.b	#0x8E,d0                        	| [$c8e0: ld   a,$8E]
	move.b	#0x0D,d1                        	| [$c8e2: ld   b,$0D]
	move.w	#0x9063,d6                      	| [$c8e4: ld   hl,$9063]
	jbsr	write_score_frame_vertical_bar_c8eb                            	| [$c8e7: call $C8EB]
	rts                                    	| [$c8ea: ret]
write_score_frame_vertical_bar_c8eb:
	jbsr	osd_w_videoram                        	| [$c8eb: ld   (hl),a]

	movem.w	d0/d6,-(sp)                        	| [$c8ec: push hl]
	                       	| [$c8ed: push af]
	move.b	d5,d0                           	| [$c8ee: ld   a,h]
	add.w	#0x0800,d6                         	| [$c8ef: add  a,$08]
                          	| [$c8f1: ld   h,a]
	move.b	#0x10,d0                        	| [$c8f2: ld   a,$10]
	jbsr	osd_w_colorram                         	| [$c8f4: ld   (hl),a]
	movem.w	(sp)+,d0/d6                      	| [$c8f5: pop  af]
	                       	| [$c8f6: pop  hl]
	addq.w	#1,d6                           	| [$c8f7: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	write_score_frame_vertical_bar_c8eb                             	| [$c8f8: djnz $C8EB]
	rts                                    	| [$c8fa: ret]
draw_highscore_names_and_scores_c8fb:

	move.l	a2,-(sp)                        	| [$c8fb: push ix]
	movem.w	d1/d2,-(sp)                    	| [$c8fd: push bc]

	move.w	d6,-(sp)                        	| [$c8fe: push hl]
	movem.w	d3/d4,-(sp)                    	| [$c8ff: push de]
	move.l	a1,-(sp)                        	| [$c8ff: push de]
	jbsr	draw_hiscore_frames_c89b                            	| [$c900: call $C89B]
	move.w	#0x0020,d3                      	| [$c903: ld   de,$0020] 32
	move.w	#0x928F,d6                      	| [$c906: ld   hl,$928F]
	lea	high_score_table_6217,a2       	| [$c909: ld   ix,high_score_table_6217]
	* write highscore values
	move.b	#0x05,d1                        	| [$c90d: ld   b,$05]
l_c90f:
	movem.w	d1/d2,-(sp)                    	| [$c90f: push bc]

	move.w	d6,-(sp)                        	| [$c910: push hl]
	move.b	#0x03,d1                        	| [$c911: ld   b,$03]
l_c913:
	move.b	(A2),d0                    	| [$c913: ld   a,(ix+$00)]
	and.b	#0x0F,d0                         	| [$c916: and  $0F]
	jbsr	write_highscore_name_letter_c87c                            	| [$c918: call $C87C]
	move.b	(A2),d0                    	| [$c91b: ld   a,(ix+$00)]
	ror.b	#4,d0                            	| [$c91e: rrca] * 4
	and.b	#0x0F,d0                         	| [$c922: and  $0F]
	move.w	#0x0020,d3                      	| [$c924: ld   de,$0020] 32
	add.w	d3,d6                            	| [$c927: add  hl,de]
	jbsr	write_highscore_name_letter_c87c                            	| [$c928: call $C87C]
	addq.w	#1,a2                           	| [$c92b: inc  ix]
	add.w	d3,d6                            	| [$c92d: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_c913                             	| [$c92e: djnz $C913]
	move.w	(sp)+,d6                        	| [$c930: pop  hl]
	subq.w	#2,d6                           	| [$c931: dec  hl] * 2
 
	movem.w	(sp)+,d1/d2                    	| [$c933: pop  bc]
	move.w	#0x000D,d3                      	| [$c934: ld   de,$000D] 13
	add.w	d3,a2                            	| [$c937: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_c90f                             	| [$c939: djnz $C90F]
	move.w	#0x0020,d3                      	| [$c93b: ld   de,$0020] 32
	lea	high_score_table_6217,a2       	| [$c93e: ld   ix,high_score_table_6217]
	move.w	#0x920F,d6                      	| [$c942: ld   hl,$920F]
	move.b	#0x05,d1                        	| [$c945: ld   b,$05]
l_c947:
	movem.w	d1/d2,-(sp)                    	| [$c947: push bc]

	* write highscore name
	move.w	d6,-(sp)                       	| [$c948: push hl]
	addq.w	#3,a2                           	| [$c949: inc  ix] * 3
	move.b	#0x0D,d1                        	| [$c94f: ld   b,$0D]
l_c951:
	move.b	(A2),d0                    	| [$c951: ld   a,(ix+$00)]
	jbsr	write_highscore_name_letter_c87c                            	| [$c954: call $C87C]
	addq.w	#1,a2                           	| [$c957: inc  ix]
	sub.w	d3,d6                            	| [$c959: sbc  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_c951                             	| [$c95b: djnz $C951]
	move.w	(sp)+,d6                        	| [$c95d: pop  hl]
	subq.w	#2,d6                           	| [$c95e: dec  hl] * 2

	movem.w	(sp)+,d1/d2                    	| [$c960: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_c947                             	| [$c961: djnz $C947]
	move.l	(sp)+,a1                        	| [$c963: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$c963: pop  de]
	move.w	(sp)+,d6                        	| [$c964: pop  hl]

	movem.w	(sp)+,d1/d2                    	| [$c965: pop  bc]
	move.l	(sp)+,a2                        	| [$c966: pop  ix]
	rts                                    	| [$c968: ret]
high_score_entry_c969:
	move.b	#0x01,d0                        	| [$c969: ld   a,$01]
	move.b	d0,unknown_6267                 	| [$c96b: ld   (unknown_6267),a]
	move.w	#0x9372,d6                      	| [$c96e: ld   hl,$9372]
	LEA_ROM	       0x571E,a1                      	| [$c971: ld   de,$571E]
	* "MOVE JOYSTICK"
	jbsr	display_localized_text_CA67       	| [$c974: call display_localized_text_CA67]
	move.w	#0x9373,d6                      	| [$c977: ld   hl,$9373]
	* "TO DISPLAY YOUR NAME"
	LEA_ROM	       0x5737,a1                      	| [$c97a: ld   de,$5737]
	jbsr	display_localized_text_CA67       	| [$c97d: call display_localized_text_CA67]
	move.w	#0x937D,d6                      	| [$c980: ld   hl,$937D]
	* "END BY ACTION BUTTON"
	LEA_ROM	       0x5775,a1                      	| [$c983: ld   de,$5775]
	jbsr	display_localized_text_CA67       	| [$c986: call display_localized_text_CA67]
	* horizontal bars
	LEA_ROM	       0x4D00,a1                      	| [$c989: ld   de,$4D00]
	move.w	#0x9391,d6                      	| [$c98c: ld   hl,$9391]
	move.b	#0x12,d0                        	| [$c98f: ld   a,$12]
	exg	d0,d7                              	| [$c991: ex   af,af']
	jbsr	write_text_55f0                            	| [$c992: call $55F0]
	LEA_ROM	       0x4D1B,a1                      	| [$c995: ld   de,$4D1B]
	move.w	#0x939E,d6                      	| [$c998: ld   hl,$939E]
	move.b	#0x12,d0                        	| [$c99b: ld   a,$12]
	exg	d0,d7                              	| [$c99d: ex   af,af']
	jbsr	write_text_55f0                            	| [$c99e: call $55F0]
	move.b	#0x0C,d1                        	| [$c9a1: ld   b,$0C]
	move.w	#0x9392,d6                      	| [$c9a3: ld   hl,$9392]
	move.b	#0x8B,d0                        	| [$c9a6: ld   a,$8B]
	jbsr	write_score_frame_vertical_bar_c8eb                            	| [$c9a8: call $C8EB]
	move.b	#0x0C,d1                        	| [$c9ab: ld   b,$0C]
	move.b	#0x8E,d0                        	| [$c9ad: ld   a,$8E]
	move.w	#0x9072,d6                      	| [$c9af: ld   hl,$9072]
	jbsr	write_score_frame_vertical_bar_c8eb                            	| [$c9b2: call $C8EB]
	LEA_ROM	       0x4D36,a1                      	| [$c9b5: ld   de,$4D36]
	move.w	#0x9275,d6                      	| [$c9b8: ld   hl,$9275]
	jbsr	l_ca49                            	| [$c9bb: call $CA49]
	LEA_ROM	       0x4D4A,a1                      	| [$c9be: ld   de,$4D4A]
	move.w	#0x91B8,d6                      	| [$c9c1: ld   hl,$91B8]
	jbsr	l_ca49                            	| [$c9c4: call $CA49]
	LEA_ROM	       0x4D5E,a1                      	| [$c9c7: ld   de,$4D5E]
	move.w	#0x929B,d6                      	| [$c9ca: ld   hl,$929B]
	jbsr	l_ca49                            	| [$c9cd: call $CA49]
	LEA_ROM	       0x4D72,a1                      	| [$c9d0: ld   de,$4D72]
	move.w	#0x92F8,d6                      	| [$c9d3: ld   hl,$92F8]
	jbsr	l_ca49                            	| [$c9d6: call $CA49]
	LEA_ROM	       0x4D86,a1                      	| [$c9d9: ld   de,$4D86]
	move.w	#0x9258,d6                      	| [$c9dc: ld   hl,$9258]
	jbsr	write_text_attr_14_ca42                            	| [$c9df: call $CA42]
	LEA_ROM	       0x4D8C,a1                      	| [$c9e2: ld   de,$4D8C]
	move.w	#0x9216,d6                      	| [$c9e5: ld   hl,$9216]
	jbsr	write_text_attr_14_ca42                            	| [$c9e8: call $CA42]
	LEA_ROM	       0x4D8E,a1                      	| [$c9eb: ld   de,$4D8E]
	move.w	#0x9217,d6                      	| [$c9ee: ld   hl,$9217]
	jbsr	write_text_attr_14_ca42                            	| [$c9f1: call $CA42]
	LEA_ROM	       0x4D90,a1                      	| [$c9f4: ld   de,$4D90]
	move.w	#0x9219,d6                      	| [$c9f7: ld   hl,$9219]
	jbsr	write_text_attr_14_ca42                            	| [$c9fa: call $CA42]
	LEA_ROM	       0x4D92,a1                      	| [$c9fd: ld   de,$4D92]
	move.w	#0x921A,d6                      	| [$ca00: ld   hl,$921A]
	jbsr	write_text_attr_14_ca42                            	| [$ca03: call $CA42]
	jbsr	draw_hiscore_frames_c89b                            	| [$ca06: call $C89B]
	rts                                    	| [$ca09: ret]
read_controls_highscore_ca0a:
	jbsr	osd_read_inputs

	not.b	d0                               	| [$ca38: cpl]
	move.b	d0,high_score_joystick_input_6278	| [$ca39: ld   (high_score_joystick_input_6278),a]
	rts                                    	| [$ca41: ret]
write_text_attr_14_ca42:
	move.b	#0x14,d0                        	| [$ca42: ld   a,$14]
	exg	d0,d7                              	| [$ca44: ex   af,af']

	jbsr	write_text_55f0                            	| [$ca45: call $55F0]
	rts                                    	| [$ca48: ret]
l_ca49:
	move.b	#0x18,d0                        	| [$ca49: ld   a,$18]
	exg	d0,d7                              	| [$ca4b: ex   af,af']
	jbsr	select_highscore_entering_localized_text_ca53                            	| [$ca4c: call $CA53]
	jbsr	write_text_55f0                            	| [$ca4f: call $55F0]
	rts                                    	| [$ca52: ret]
	
* shift tile index by 10 to select french instead of english
select_highscore_entering_localized_text_ca53:
	move.w	d0,-(sp)                        	| [$ca53: push af]
	jbsr	osd_read_dipswitches                       	| [$ca54: ld   a,($B000)]
	and.b	#0x20,d0                         	| [$ca57: and  $20]
	cmp.b	#0x20,d0                         	| [$ca59: cp   $20]
	jne	l_ca65                             	| [$ca5b: jr   nz,$CA65]
* fix stuff for french
	                        	| [$30ef: push hl]
	                              	| [$30f0: ex   de,hl]
	                      	| [$30f1: ld   de,$000A] 10
	add.w	#0xA,a1                            	| [$30f4: add  hl,de]
	                      	| [$30f5: ex   de,hl]
	                       	| [$30f6: pop  hl]
l_ca65:
	move.w	(sp)+,d0                        	| [$ca65: pop  af]
	rts                                    	| [$ca66: ret]

* < A1: text
display_localized_text_CA67:
	move.w	d0,-(sp)                        	| [$ca67: push af]
	jbsr	osd_read_dipswitches                       	| [$ca68: ld   a,($B000)]
	btst.b	#5,d0                         	| [$ca6b: and  $20]
	                         	| [$ca6d: cp   $20]
	jne	l_ca79                             	| [$ca6f: jr   z,$CA79]
	* french: change strings
	                       	| [$ca71: push hl]
	                             	| [$ca72: ex   de,hl]
	                      	| [$ca73: ld   de,$0196]
	add.w	#0x196,a1                           	| [$ca76: add  hl,de]
	                            	| [$ca77: ex   de,hl]
	                       	| [$ca78: pop  hl]
l_ca79:
	move.w	(sp)+,d0                        	| [$ca79: pop  af]
	jra	display_text_55d9                            	| [$ca7a: call $55D9]
	rts                                    	| [$ca7d: ret]
display_player_1_and_2_text_ca7e:
desplay_player_1_and_2_text_ca7e:
	* player 1
	LEA_ROM	       0x575A,a1                      	| [$ca7e: ld   de,$575A]
	move.w	#0x93A0,d6                      	| [$ca81: ld   hl,$93A0]
	jbsr	display_localized_text_CA67       	| [$ca84: call display_localized_text_CA67]
	* player 2
	LEA_ROM	       0x5763,a1                      	| [$ca87: ld   de,$5763]
	move.w	#0x9120,d6                      	| [$ca8a: ld   hl,$9120]
	jbsr	display_localized_text_CA67       	| [$ca8d: call display_localized_text_CA67]
	rts                                    	| [$ca90: ret]
l_ca91:
	move.b	player_input_6026,d0            	| [$ca91: ld   a,(player_input_6026)]
	cmp.b	#0xA5,d0                         	| [$ca94: cp   $A5]
	beq.b	0f                               	| [...]
	rts                                    	| [$ca96: ret  nz] [...]
0:
	LEA_ROM	       0x1A58,a1                      	| [$ca97: ld   de,$1A58]
	move.w	#0x93A2,d6                      	| [$ca9a: ld   hl,$93A2]
	jbsr	write_text_55f0                            	| [$ca9d: call $55F0]
	LEA_ROM	       0x1A75,a1                      	| [$caa0: ld   de,$1A75]
	move.w	#0x93A3,d6                      	| [$caa3: ld   hl,$93A3]
	jbsr	write_text_55f0                            	| [$caa6: call $55F0]
	clr.b	d0                               	| [$caa9: ld   a,$00]
	jra	l_ca91                             	| [$caab: jr   $CA91]
l_caad:
	lea	current_pickaxe_screen_params_61CC,a2	| [$caad: ld   ix,current_pickaxe_screen_params_61CC]
	clr.w	d0                               	| [$cab1: xor  a]
	move.b	d0,(0x03,a2)                    	| [$cab2: ld   (ix+$03),a]
	move.w	d0,pickaxe_timer_duration_61E0  	| [$cab5: ld   (pickaxe_timer_duration_61E0),a]
	                	| [$cab8: ld   (unknown_61E1),a]
	st.b	d0                                	| [$cabb: ld   a,$FF]
	move.b	d0,sprite_object_y_659F         	| [$cabd: ld   (sprite_object_y_659F),a]
	rts                                    	| [$cac0: ret]
draw_bag_cac1:
	LOAD_AX_BE_WORD_DY	a2,d6                    	| [$cac1: ld   a,(ix+$00)]
	                         	| [$cac4: ld   l,a]
	                   	| [$cac5: ld   a,(ix+$01)]
	                          	| [$cac8: ld   h,a]
	move.b	player_screen_600D,d0           	| [$cac9: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$cacc: ld   b,a]
	move.b	(0x02,a2),d0                    	| [$cacd: ld   a,(ix+$02)]
	cmp.b	d1,d0                            	| [$cad0: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$cad1: ret  nz] [...]
0:
	move.b	is_key_hunt_phase_6341,d0                 	| [$cad2: ld   a,(is_key_hunt_phase_6341)]
	cmp.b	#0x01,d0                         	| [$cad5: cp   $01]
	jeq	draw_key_tiles_cb20                             	| [$cad7: jr   z,$CB20]
	move.b	#0xD0,d0                        	| [$cad9: ld   a,$D0]
	jbsr	osd_w_videoram                        	| [$cadb: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$cadc: push hl]
	jbsr	set_bag_color_attribute_cb14                            	| [$cadd: call $CB14]
	move.w	(sp)+,d6                        	| [$cae0: pop  hl]
	addq.w	#1,d6                           	| [$cae1: inc  hl]
* read screen tile
	jbsr	osd_r_videoram                         	| [$cae2: ld   a,(hl)]
	cmp.b	#0xED,d0                         	| [$cae3: cp   $ED]
	jeq	l_caf3                             	| [$cae5: jr   z,$CAF3]
	cmp.b	#0xEF,d0                         	| [$cae7: cp   $EF]
	jeq	l_caf3                             	| [$cae9: jr   z,$CAF3]
	move.b	#0xD1,d0                        	| [$caeb: ld   a,$D1]
	jbsr	osd_w_videoram                         	| [$caed: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$caee: push hl]
	jbsr	set_bag_color_attribute_cb14                            	| [$caef: call $CB14]
	move.w	(sp)+,d6                        	| [$caf2: pop  hl]
l_caf3:
	move.w	#0x0020,d3                      	| [$caf3: ld   de,$0020] 32
	add.w	d3,d6                            	| [$caf6: add  hl,de]
	jbsr	osd_r_videoram                        	| [$caf7: ld   a,(hl)]
	cmp.b	#0xD1,d0                         	| [$caf8: cp   $D1]
	bne.b	0f                               	| [...]
	rts                                    	| [$cafa: ret  z] [...]
0:
	cmp.b	#0x67,d0                         	| [$cafb: cp   $67]
	bne.b	0f                               	| [...]
	rts                                    	| [$cafd: ret  z] [...]
0:
	cmp.b	#0x27,d0                         	| [$cafe: cp   $27]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb00: ret  z] [...]
0:
	cmp.b	#0xED,d0                         	| [$cb01: cp   $ED]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb03: ret  z] [...]
0:
	cmp.b	#0xEF,d0                         	| [$cb04: cp   $EF]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb06: ret  z] [...]
0:
	cmp.b	#0xDB,d0                         	| [$cb07: cp   $DB]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb09: ret  z] [...]
0:
	cmp.b	#0xFD,d0                         	| [$cb0a: cp   $FD]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb0c: ret  z] [...]
0:
	move.b	#0xD3,d0                        	| [$cb0d: ld   a,$D3]
	jbsr	osd_w_videoram                         	| [$cb0f: ld   (hl),a]
	jbsr	set_bag_color_attribute_cb14                            	| [$cb10: call $CB14]
	rts                                    	| [$cb13: ret]
set_bag_color_attribute_cb14:
*	move.b	d5,d0                           	| [$cb14: ld   a,h]
*	                         	| [$cb15: cp   $00]
*	bne.b	0f                               	| [...]
*	rts                                    	| [$cb17: ret  z] [...]
*0:
	add.w	#0x0800,d6                         	| [$cb18: add  a,$08]
	                           	| [$cb1a: ld   h,a]
	move.b	bag_color_color_attribute_627A,d0	| [$cb1b: ld   a,(bag_color_color_attribute_627A)]
	jbsr	osd_w_colorram                         	| [$cb1e: ld   (hl),a]
	rts                                    	| [$cb1f: ret]
	
draw_key_tiles_cb20:
	addq.w	#1,d6                           	| [$cb20: inc  hl]
	jbsr	osd_r_videoram                         	| [$cb21: ld   a,(hl)]
	cmp.b	#0xED,d0                         	| [$cb22: cp   $ED]
	jeq	l_cb32                             	| [$cb24: jr   z,$CB32]
	cmp.b	#0xEF,d0                         	| [$cb26: cp   $EF]
	jeq	l_cb32                             	| [$cb28: jr   z,$CB32]
	move.b	#0xC5,d0                        	| [$cb2a: ld   a,$C5]
	jbsr	osd_w_videoram                         	| [$cb2c: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$cb2d: push hl]
	jbsr	l_cb4d                            	| [$cb2e: call $CB4D]
	move.w	(sp)+,d6                        	| [$cb31: pop  hl]
l_cb32:
	move.w	#0x0020,d3                      	| [$cb32: ld   de,$0020] 32
	add.w	d3,d6                            	| [$cb35: add  hl,de]
	jbsr	osd_r_videoram                         	| [$cb36: ld   a,(hl)]
	cmp.b	#0xD1,d0                         	| [$cb37: cp   $D1]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb39: ret  z] [...]
0:
	cmp.b	#0x67,d0                         	| [$cb3a: cp   $67]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb3c: ret  z] [...]
0:
	cmp.b	#0x27,d0                         	| [$cb3d: cp   $27]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb3f: ret  z] [...]
0:
	cmp.b	#0xED,d0                         	| [$cb40: cp   $ED]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb42: ret  z] [...]
0:
	cmp.b	#0xEF,d0                         	| [$cb43: cp   $EF]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb45: ret  z] [...]
0:
	move.b	#0xC7,d0                        	| [$cb46: ld   a,$C7]
	jbsr	osd_w_videoram                         	| [$cb48: ld   (hl),a]
	jbsr	l_cb4d                            	| [$cb49: call $CB4D]
	rts                                    	| [$cb4c: ret]
l_cb4d:
*	move.b	d5,d0                           	| [$cb4d: ld   a,h]
*	                         	| [$cb4e: cp   $00]
*	bne.b	0f                               	| [...]
*	rts                                    	| [$cb50: ret  z] [...]
*0:
	add.w	#0x0800,d6                         	| [$cb51: add  a,$08]
	                           	| [$cb53: ld   h,a]
	move.b	#0x24,d0                        	| [$cb54: ld   a,$24]
	jbsr	osd_w_colorram                         	| [$cb56: ld   (hl),a]
	rts                                    	| [$cb57: ret]

* called when guard_x_not_moving_timeout_counter_xxxx reaches >= 0xF0
* it's a safeguard to ensure that no guard can be stuck for the rest of the
* round in a place, which would make the game much easier to complete.
*
* something Jacques forgot is that if you threaten a guard with pick if
* he has gun and is in "fire on sight" mode, you can make him immobile
* (because of the shooting stance), and make him
* reset/warp (checked on MAME). Since the guard still is afraid of your pick
* even with the gun (WTF??) guard shoots 6 times in the opposite direction
* so misses every time and doesn't move for a time long enough for the timeout
* system. "Don't bring a pickaxe to a gunfight" doesn't seem to apply here :)

maybe_reset_guard_position_cb58:
	lea	guard_1_struct_6594,a2         	| [$cb58: ld   ix,guard_1_struct_6594]
	move.b	guard_1_in_elevator_603B,d0     	| [$cb5c: ld   a,(guard_1_in_elevator_603B)]
	cmp.b	#0x01,d0                         	| [$cb5f: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb61: ret  z] [...]
0:
	move.b	unknown_6156,d0                 	| [$cb62: ld   a,(unknown_6156)]
	cmp.b	#0x01,d0                         	| [$cb65: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb67: ret  z] [...]
0:
	move.b	unknown_6211,d0                 	| [$cb68: ld   a,(unknown_6211)]
	cmp.b	#0x01,d0                         	| [$cb6b: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb6d: ret  z] [...]
0:
	jbsr	reset_guard_position_cba2                            	| [$cb6e: call $CBA2]
	                          	| [$cb71: ld   a,b]
	move.b	d1,guard_1_screen_6099          	| [$cb72: ld   (guard_1_screen_6099),a]
	clr.b	d0                               	| [$cb75: xor  a]
	move.b	d0,unknown_62B5                 	| [$cb76: ld   (unknown_62B5),a]
	move.b	d0,unknown_62B6                 	| [$cb79: ld   (unknown_62B6),a]
	rts                                    	| [$cb7c: ret]
maybe_guard_2_is_stuck_cb7d:
	.ifne	OPT_GUARD_RESET_OFF
	rts
	.endif
	lea	guard_2_struct_6598,a2         	| [$cb7d: ld   ix,guard_2_struct_6598]
	move.b	guard_2_in_elevator_607B,d0     	| [$cb81: ld   a,(guard_2_in_elevator_607B)]
	cmp.b	#0x01,d0                         	| [$cb84: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb86: ret  z] [...]
0:
	move.b	unknown_6157,d0                 	| [$cb87: ld   a,(unknown_6157)]
	cmp.b	#0x01,d0                         	| [$cb8a: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb8c: ret  z] [...]
0:
	move.b	unknown_6212,d0                 	| [$cb8d: ld   a,(unknown_6212)]
	cmp.b	#0x01,d0                         	| [$cb90: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$cb92: ret  z] [...]
0:
	jbsr	reset_guard_position_cba2                            	| [$cb93: call $CBA2]
	                           	| [$cb96: ld   a,b]
	move.b	d1,guard_2_screen_609A          	| [$cb97: ld   (guard_2_screen_609A),a]
	clr.b	d0                               	| [$cb9a: xor  a]
	move.b	d0,unknown_62B9                 	| [$cb9b: ld   (unknown_62B9),a]
	move.b	d0,unknown_62BA                 	| [$cb9e: ld   (unknown_62BA),a]
	rts                                    	| [$cba1: ret]
reset_guard_position_cba2:
	move.b	#0x80,d0                        	| [$cba2: ld   a,$80]
	move.b	d0,(0x02,a2)                    	| [$cba4: ld   (ix+$02),a]
	move.b	#0x10,d0                        	| [$cba7: ld   a,$10]
	move.b	d0,(0x03,a2)                    	| [$cba9: ld   (ix+$03),a]
	move.b	#0x03,d1                        	| [$cbac: ld   b,$03]
	move.b	player_screen_600D,d0           	| [$cbae: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$cbb1: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$cbb3: ret  z] [...]
0:
	move.b	#0x02,d1                        	| [$cbb4: ld   b,$02]
	cmp.b	#0x04,d0                         	| [$cbb6: cp   $04]
	bne.b	0f                               	| [...]
	rts                                    	| [$cbb8: ret  z] [...]
0:
	move.b	#0x01,d1                        	| [$cbb9: ld   b,$01]
	cmp.b	#0x03,d0                         	| [$cbbb: cp   $03]
	bne.b	0f                               	| [...]
	rts                                    	| [$cbbd: ret  z] [...]
0:
	move.b	#0x04,d1                        	| [$cbbe: ld   b,$04]
	cmp.b	#0x02,d0                         	| [$cbc0: cp   $02]
	bne.b	0f                               	| [...]
	rts                                    	| [$cbc2: ret  z] [...]
0:
	move.b	#0x03,d1                        	| [$cbc3: ld   b,$03]
	rts                                    	| [$cbc5: ret]
l_cbc6:
	move.b	unknown_61F3,d0                 	| [$cbc6: ld   a,(unknown_61F3)]
	                         	| [$cbc9: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$cbcb: ret  z] [...]
0:
	addq.b	#1,d0                           	| [$cbcc: inc  a]
	movem.w	d1/d2,-(sp)                    	| [$cbcd: push bc]
	move.b	d0,d1                           	| [$cbce: ld   b,a]
	move.b	unknown_6275,d0                 	| [$cbcf: ld   a,(unknown_6275)]
	cmp.b	#0x01,d0                         	| [$cbd2: cp   $01]
	move.b	d1,d0                           	| [$cbd4: ld   a,b]

	movem.w	(sp)+,d1/d2                    	| [$cbd5: pop  bc]
	jne	l_cbde                             	| [$cbd6: jr   nz,$CBDE]
	cmp.b	#0x30,d0                         	| [$cbd8: cp   $30]
	jne	l_cbe7                             	| [$cbda: jr   nz,$CBE7]
	jra	l_cbe0                             	| [$cbdc: jr   $CBE0]
l_cbde:
	cmp.b	#0x17,d0                         	| [$cbde: cp   $17]
l_cbe0:
	jne	l_cbe7                             	| [$cbe0: jr   nz,$CBE7]
	clr.b	d0                               	| [$cbe2: ld   a,$00]
	move.b	d0,unknown_6275                 	| [$cbe4: ld   (unknown_6275),a]
l_cbe7:
	move.b	d0,unknown_61F3                 	| [$cbe7: ld   (unknown_61F3),a]
	rts                                    	| [$cbea: ret]
l_cbeb:
	move.b	player_x_6582,d0                	| [$cbeb: ld   a,(player_x_6582)]
	                              	| [$cbf0: ld   a,$00]
	clr.b	unknown_6285                 	| [$cbf2: ld   (unknown_6285),a]
	cmp.b	#0xE8,d0                         	| [$cbee: cp   $E8]
	bcs.b	0f                               	| [...]
	jbsr	goto_next_right_screen_cc15                            	| [$cbf5: call nc,$CC15]
0:
	move.b	player_x_6582,d0                	| [$cbf8: ld   a,(player_x_6582)]
	cmp.b	#0x10,d0                         	| [$cbfb: cp   $10]
	bcc.b	0f                               	| [...]
	jbsr	goto_next_left_screen_cc8d                            	| [$cbfd: call c,$CC8D]
0:
	clr.b	d0                               	| [$cc00: ld   a,$00]
	move.b	d0,unknown_626F                 	| [$cc02: ld   (unknown_626F),a]
	jbsr	l_d59f                            	| [$cc05: call $D59F]

                               	| [$cc09: xor  a]
     	| [$cc0a: ld   (interrupt_control_A000),a]

                   	| [$cc0e: ld   a,$01]
     	| [$cc10: ld   (interrupt_control_A000),a]
	                                    	| [$cc13: nop]
	rts                                    	| [$cc14: ret]
goto_next_right_screen_cc15:
	jbsr	l_cdcc                            	| [$cc15: call $CDCC]
	move.b	player_screen_600D,d0           	| [$cc18: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$cc1b: cp   $01]
	jne	l_cc35                             	| [$cc1d: jr   nz,$CC35]
	* entering screen 2 by screen 1
	jbsr	display_screen_2_c272                            	| [$cc1f: call $C272]
	move.b	#0x02,d0                        	| [$cc22: ld   a,$02]
	move.b	d0,player_screen_600D           	| [$cc24: ld   (player_screen_600D),a]
	move.b	#0x11,d0                        	| [$cc27: ld   a,$11]
	move.b	d0,player_x_6582                	| [$cc29: ld   (player_x_6582),a]
	jbsr	draw_object_tiles_FD72            	| [$cc2c: call draw_object_tiles_FD72]
	jbsr	reposition_wagons_ce1b                            	| [$cc2f: call $CE1B]
	jra	l_cd1a                             	| [$cc32: jp   $CD1A]
l_cc35:
	move.b	player_screen_600D,d0           	| [$cc35: ld   a,(player_screen_600D)]
	cmp.b	#0x02,d0                         	| [$cc38: cp   $02]
	jne	l_cc52                             	| [$cc3a: jr   nz,$CC52]
	jbsr	display_screen_3_c20e                            	| [$cc3c: call $C20E]
	move.b	#0x03,d0                        	| [$cc3f: ld   a,$03]
	move.b	d0,player_screen_600D           	| [$cc41: ld   (player_screen_600D),a]
	jbsr	draw_object_tiles_FD72            	| [$cc44: call draw_object_tiles_FD72]
	move.b	#0x11,d0                        	| [$cc47: ld   a,$11]
	move.b	d0,player_x_6582                	| [$cc49: ld   (player_x_6582),a]
	jbsr	reposition_wagons_ce1b                            	| [$cc4c: call $CE1B]
	jra	l_cd1a                             	| [$cc4f: jp   $CD1A]
l_cc52:
	move.b	player_screen_600D,d0           	| [$cc52: ld   a,(player_screen_600D)]
	cmp.b	#0x03,d0                         	| [$cc55: cp   $03]
	jne	l_cc6f                             	| [$cc57: jr   nz,$CC6F]
	jbsr	display_screen_4_c1c1                            	| [$cc59: call $C1C1]
	move.b	#0x04,d0                        	| [$cc5c: ld   a,$04]
	move.b	d0,player_screen_600D           	| [$cc5e: ld   (player_screen_600D),a]
	jbsr	draw_object_tiles_FD72            	| [$cc61: call draw_object_tiles_FD72]
	move.b	#0x11,d0                        	| [$cc64: ld   a,$11]
	move.b	d0,player_x_6582                	| [$cc66: ld   (player_x_6582),a]
	jbsr	reposition_wagons_ce1b                            	| [$cc69: call $CE1B]
	jra	l_cd1a                             	| [$cc6c: jp   $CD1A]
l_cc6f:
	move.b	player_screen_600D,d0           	| [$cc6f: ld   a,(player_screen_600D)]
	cmp.b	#0x04,d0                         	| [$cc72: cp   $04]
	jne	l_cc8c                             	| [$cc74: jr   nz,$CC8C]
	jbsr	display_screen_5_c189                            	| [$cc76: call $C189]
	move.b	#0x05,d0                        	| [$cc79: ld   a,$05]
	move.b	d0,player_screen_600D           	| [$cc7b: ld   (player_screen_600D),a]
	jbsr	draw_object_tiles_FD72            	| [$cc7e: call draw_object_tiles_FD72]
	move.b	#0x11,d0                        	| [$cc81: ld   a,$11]
	move.b	d0,player_x_6582                	| [$cc83: ld   (player_x_6582),a]
	jbsr	reposition_wagons_ce1b                            	| [$cc86: call $CE1B]
	jra	l_cd1a                             	| [$cc89: jp   $CD1A]
l_cc8c:
	rts                                    	| [$cc8c: ret]
goto_next_left_screen_cc8d:
	move.b	#0x01,d0                        	| [$cc8d: ld   a,$01]
	move.b	d0,unknown_6285                 	| [$cc8f: ld   (unknown_6285),a]
	jbsr	l_cdcc                            	| [$cc92: call $CDCC]
	move.b	player_screen_600D,d0           	| [$cc95: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$cc98: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$cc9a: ret  z] [...]
0:
	cmp.b	#0x02,d0                         	| [$cc9b: cp   $02]
	jne	l_ccb5                             	| [$cc9d: jr   nz,$CCB5]
	* screen 1
	jbsr	display_screen_1_C2C9                 	| [$cc9f: call display_screen_1_C2C9]
	move.b	#0x01,d0                        	| [$cca2: ld   a,$01]
	move.b	d0,player_screen_600D           	| [$cca4: ld   (player_screen_600D),a]
	jbsr	draw_object_tiles_FD72            	| [$cca7: call draw_object_tiles_FD72]
	move.b	#0xE3,d0                        	| [$ccaa: ld   a,$E3]
	move.b	d0,player_x_6582                	| [$ccac: ld   (player_x_6582),a]
	jbsr	reposition_wagons_ce1b                            	| [$ccaf: call $CE1B]
	jra	l_cd1f                             	| [$ccb2: jp   $CD1F]
l_ccb5:
	cmp.b	#0x03,d0                         	| [$ccb5: cp   $03]
	jne	l_ccd7                             	| [$ccb7: jr   nz,$CCD7]
	LEA_ROM	       0x4442,a2                      	| [$ccb9: ld   ix,$4442]
	* bogus write, not read anywhere                 	| [$ccbd: ld   (unknown_6281),ix]
	jbsr	display_screen_2_c272                            	| [$ccc1: call $C272]
	move.b	#0x02,d0                        	| [$ccc4: ld   a,$02]
	move.b	d0,player_screen_600D           	| [$ccc6: ld   (player_screen_600D),a]
	move.b	#0xE3,d0                        	| [$ccc9: ld   a,$E3]
l_cccb:
	move.b	d0,player_x_6582                	| [$cccb: ld   (player_x_6582),a]
	jbsr	draw_object_tiles_FD72            	| [$ccce: call draw_object_tiles_FD72]
	jbsr	reposition_wagons_ce1b                            	| [$ccd1: call $CE1B]
	jra	l_cd1f                             	| [$ccd4: jp   $CD1F]
l_ccd7:
	cmp.b	#0x04,d0                         	| [$ccd7: cp   $04]
	jne	l_ccf9                             	| [$ccd9: jr   nz,$CCF9]
	LEA_ROM	       0x4442,a2                      	| [$ccdb: ld   ix,$4442]
	* bogus write, not read anywhere                 	| [$ccdf: ld   (unknown_6281),ix]
	jbsr	display_screen_3_c20e                            	| [$cce3: call $C20E]
	move.b	#0x03,d0                        	| [$cce6: ld   a,$03]
	move.b	d0,player_screen_600D           	| [$cce8: ld   (player_screen_600D),a]
	move.b	#0xE3,d0                        	| [$cceb: ld   a,$E3]
	move.b	d0,player_x_6582                	| [$cced: ld   (player_x_6582),a]
	jbsr	draw_object_tiles_FD72            	| [$ccf0: call draw_object_tiles_FD72]
	jbsr	reposition_wagons_ce1b                            	| [$ccf3: call $CE1B]
	jra	l_cd1f                             	| [$ccf6: jp   $CD1F]
l_ccf9:
	cmp.b	#0x05,d0                         	| [$ccf9: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$ccfb: ret  nz] [...]
0:
	LEA_ROM	       0x4442,a2                      	| [$ccfc: ld   ix,$4442]
	* bogus write, not read anywhere                	| [$cd00: ld   (unknown_6281),ix]
	jbsr	display_screen_4_c1c1                            	| [$cd04: call $C1C1]
	move.b	#0x04,d0                        	| [$cd07: ld   a,$04]
	move.b	d0,player_screen_600D           	| [$cd09: ld   (player_screen_600D),a]
	move.b	#0xE3,d0                        	| [$cd0c: ld   a,$E3]
	move.b	d0,player_x_6582                	| [$cd0e: ld   (player_x_6582),a]
	jbsr	draw_object_tiles_FD72            	| [$cd11: call draw_object_tiles_FD72]
	jbsr	reposition_wagons_ce1b                            	| [$cd14: call $CE1B]
	jra	l_cd1f                             	| [$cd17: jp   $CD1F]
l_cd1a:
	* set comparison X,Y for guards / player
	move.b	#0xE8,d3                      	| [$cd1a: ld   de,$E828]
	move.b	#0x28,d4                      	| [$cd1a: ld   de,$E828]
	jra	l_cd22                             	| [$cd1d: jr   $CD22]
l_cd1f:
	move.b	#0xC8,d3                      	| [$cd1f: ld   de,$C818]
	move.b	#0x18,d4                      	| [$cd1f: ld   de,$C818]
l_cd22:
	move.b	unknown_6358,d0                 	| [$cd22: ld   a,(unknown_6358)]
	                        	| [$cd25: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	display_screen_1_C2C9                 	| [$cd27: call nz,display_screen_1_C2C9]
0:
	jbsr	osd_enable_display                        	| [$cd2a: ld   a,$01]
                   	| [$cd2c: ld   ($A003),a]
 	lea	guard_1_struct_6594,a2         	| [$cd2f: ld   ix,guard_1_struct_6594]
	lea	player_struct_6580,a3          	| [$cd33: ld   iy,player_struct_6580]
	move.b	(0x03,a3),d0                    	| [$cd37: ld   a,(iy+$03)]
	cmp.b	(0x03,a2),d0                     	| [$cd3a: cp   (ix+$03)]
	jne	l_cd54                             	| [$cd3d: jp   nz,$CD54]
	* guard 1 same Y as player
	move.b	(0x02,a2),d0                    	| [$cd40: ld   a,(ix+$02)]
	cmp.b	d3,d0    | value of D3/D4 see above at cd1a                   	| [$cd43: cp   d]
	jcs	l_cd4b                             	| [$cd44: jr   c,$CD4B]
	jbsr	move_guard_1_96_times_d0c5                            	| [$cd46: call $D0C5]
	jra	l_cd54                             	| [$cd49: jr   $CD54]
l_cd4b:
	* compare Y with a value (see above, depends on...??)
	* probably to help the guard A.I. (as if the game wasn't
	* hard enough!!)
	move.b	(0x02,a2),d0                    	| [$cd4b: ld   a,(ix+$02)]
	cmp.b	d4,d0                        	| [$cd4e: cp   e]
	jcc	l_cd54                             	| [$cd4f: jr   nc,$CD54]
	jbsr	move_guard_1_96_times_d0c5                            	| [$cd51: call $D0C5]
l_cd54:
	lea	guard_2_struct_6598,a2         	| [$cd54: ld   ix,guard_2_struct_6598]
	lea	player_struct_6580,a3          	| [$cd58: ld   iy,player_struct_6580]
	move.b	(0x03,a3),d0                    	| [$cd5c: ld   a,(iy+$03)]
	cmp.b	(0x03,a2),d0                     	| [$cd5f: cp   (ix+$03)]
	jne	l_cd79                             	| [$cd62: jp   nz,$CD79]
	* guard 1 same Y as player
	move.b	(0x02,a2),d0                    	| [$cd65: ld   a,(ix+$02)]
	cmp.b	d3,d0                            	| [$cd68: cp   d]
	jcs	l_cd70                             	| [$cd69: jr   c,$CD70]
	jbsr	move_guard_2_96_times_3658                            	| [$cd6b: call $D0D1]
	jra	l_cd79                             	| [$cd6e: jr   $CD79]
l_cd70:
	move.b	(0x02,a2),d0                    	| [$cd70: ld   a,(ix+$02)]
	cmp.b	d4,d0                            	| [$cd73: cp   e]
	jcc	l_cd79                             	| [$cd74: jr   nc,$CD79]
	jbsr	move_guard_2_96_times_3658                            	| [$cd76: call $D0D1]
* there's only one wagon, part of this code is probably useless now...
l_cd79:
	move.b	player_in_wagon_1_601C,d0       	| [$cd79: ld   a,(player_in_wagon_1_601C)]
	cmp.b	#0x01,d0                         	| [$cd7c: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$cd7e: ret  z] [...]
0:
	move.b	player_in_wagon_2_601D,d0       	| [$cd7f: ld   a,(player_in_wagon_2_601D)]
	cmp.b	#0x01,d0                         	| [$cd82: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$cd84: ret  z] [...]
0:
	move.b	player_in_wagon_3_601E,d0       	| [$cd85: ld   a,(player_in_wagon_3_601E)]
	cmp.b	#0x01,d0                         	| [$cd88: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$cd8a: ret  z] [...]
0:
	lea	player_y_6583,a0               	| [$cd8b: ld   hl,player_y_6583]
	lea	bullet_shadow_sprite_658C,a2  	| [$cd8e: ld   ix,bullet_shadow_sprite_658C]
	move.b	(a0),d0                         	| [$cd92: ld   a,(hl)]
	cmp.b	#0x40,d0                         	| [$cd93: cp   $40]
	jne	l_cd9c                             	| [$cd95: jr   nz,$CD9C]
	jbsr	l_cdc1                            	| [$cd97: call $CDC1]
	jra	l_cdb3                             	| [$cd9a: jr   $CDB3]
l_cd9c:
	lea	wagon_1_struct_6588,a2         	| [$cd9c: ld   ix,wagon_1_struct_6588]
	cmp.b	#0xE0,d0                         	| [$cda0: cp   $E0]
	jne	l_cda9                             	| [$cda2: jr   nz,$CDA9]
	jbsr	l_cdc1                            	| [$cda4: call $CDC1]
	jra	l_cdb3                             	| [$cda7: jr   $CDB3]
l_cda9:
	lea	wagon_3_shadow_sprite_6590,a2  	| [$cda9: ld   ix,wagon_3_shadow_sprite_6590]
	cmp.b	#0xC8,d0                         	| [$cdad: cp   $C8]
	beq.b	0f                               	| [...]
	rts                                    	| [$cdaf: ret  nz] [...]
0:
	jbsr	l_cdc1                            	| [$cdb0: call $CDC1]
l_cdb3:
	move.b	#0x30,d1                        	| [$cdb3: ld   b,$30]
l_cdb5:
	movem.w	d1/d2,-(sp)                    	| [$cdb5: push bc]
	jbsr	move_wagon_09A6                            	| [$cdb6: call $09A6]

	movem.w	(sp)+,d1/d2                    	| [$cdb9: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_cdb5                             	| [$cdba: djnz $CDB5]
	                               	| [$cdbc: xor  a]
	clr.b	player_death_flag_6025       	| [$cdbd: ld   (player_death_flag_6025),a]
	rts                                    	| [$cdc0: ret]
l_cdc1:
	move.b	(0x02,a2),d0                    	| [$cdc1: ld   a,(ix+$02)]
	cmp.b	#0xD8,d0                         	| [$cdc4: cp   $D8]
	bcs.b	0f                               	| [...]
	rts                                    	| [$cdc6: ret  nc] [...]
0:
	cmp.b	#0x18,d0                         	| [$cdc7: cp   $18]
	bcc.b	0f                               	| [...]
	rts                                    	| [$cdc9: ret  c] [...]
0:
	* pops the call stack, not D0!
	addq.l	#4,a7                        	| [$cdca: pop  af]
	rts                                    	| [$cdcb: ret]
l_cdcc:
	jbsr	osd_disable_display                               	| [$cdcc: xor  a]
	                       	| [$cdcd: ld   ($A003),a]
	clr.b	bullet_y_658F                 	| [$cdd0: ld   (bullet_y_658F),a]
	clr.b	is_a_bullet_in_air_6297                 	| [$cdd3: ld   (is_a_bullet_in_air_6297),a]
	clr.b	bomb_must_detonate_62F5                 	| [$cdd6: ld   (bomb_must_detonate_62F5),a]
	clr.b	bomb_explosion_frame_timer_62FA                 	| [$cdd9: ld   (bomb_explosion_frame_timer_62FA),a]
	clr.b	bomb_picked_up_6323                 	| [$cddc: ld   (bomb_picked_up_6323),a]
	clr.b	bomb_timer_6324                 	| [$cddf: ld   (bomb_timer_6324),a]
	move.b	holds_barrow_61C7,d0            	| [$cde2: ld   a,(holds_barrow_61C7)]
	                         	| [$cde5: cp   $00]
	bne.b	0f                               	| [...]
	jbsr	reset_barrow_position_f9cc                            	| [$cde7: call z,$F9CC]
0:
	move.b	bag_falling_6159,d0             	| [$cdea: ld   a,(bag_falling_6159)]
	                         	| [$cded: cp   $00]
	jeq	l_cdfd                             	| [$cdef: jr   z,$CDFD]
	addq.b	#1,sprite_object_y_659F         	| [$cdf1: ld   a,(sprite_object_y_659F)]
	                          	| [$cdf4: inc  a]
	      	| [$cdf5: ld   (sprite_object_y_659F),a]
	jbsr	l_f199                            	| [$cdf8: call $F199]
	jra	l_cdcc                             	| [$cdfb: jr   $CDCC]
l_cdfd:
	move.b	guard_1_in_elevator_603B,d0     	| [$cdfd: ld   a,(guard_1_in_elevator_603B)]
	cmp.b	#0x01,d0                         	| [$ce00: cp   $01]
	jne	l_ce0c                             	| [$ce02: jr   nz,$CE0C]
	move.b	#0x01,d0                        	| [$ce04: ld   a,$01]
	move.b	d0,unknown_61EB                 	| [$ce06: ld   (unknown_61EB),a]
	move.b	d0,unknown_603A                 	| [$ce09: ld   (unknown_603A),a]
l_ce0c:
	move.b	guard_2_in_elevator_607B,d0     	| [$ce0c: ld   a,(guard_2_in_elevator_607B)]
	cmp.b	#0x01,d0                         	| [$ce0f: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$ce11: ret  nz] [...]
0:
	move.b	#0x01,d0                        	| [$ce12: ld   a,$01]
	move.b	d0,unknown_61EC                 	| [$ce14: ld   (unknown_61EC),a]
	move.b	d0,unknown_607A                 	| [$ce17: ld   (unknown_607A),a]
	rts                                    	| [$ce1a: ret]
reposition_wagons_ce1b:
	lea	unknown_6019,a2                	| [$ce1b: ld   ix,unknown_6019]
	lea	player_x_6582,a0               	| [$ce1f: ld   hl,player_x_6582]
	lea	wagon_data_658A,a3             	| [$ce22: ld   iy,wagon_data_658A]
	move.w	#0x0004,d3                      	| [$ce26: ld   de,$0004] 4
	jbsr	l_ce3b                            	| [$ce29: call $CE3B]
	addq.w	#1,a2                           	| [$ce2c: inc  ix]
	add.w	d3,a3                            	| [$ce2e: add  iy,de]
 	jbsr	l_ce3b                            	| [$ce30: call $CE3B]
	addq.w	#1,a2                           	| [$ce33: inc  ix]
	add.w	d3,a3                            	| [$ce35: add  iy,de]
 	jbsr	l_ce3b                            	| [$ce37: call $CE3B]
	rts                                    	| [$ce3a: ret]
l_ce3b:
	tst.b	(0x03,a2)                    	| [$ce3b: ld   a,(ix+$03)]
	                         	| [$ce3e: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$ce40: ret  z] [...]
0:
	move.b	(a0),d0                         	| [$ce41: ld   a,(hl)]
	move.b	d0,(A3)                    	| [$ce42: ld   (iy+$00),a]
	move.b	player_screen_600D,d0           	| [$ce45: ld   a,(player_screen_600D)]
	subq.b	#1,d0                           	| [$ce48: dec  a]
	move.b	d0,(A2)                    	| [$ce49: ld   (ix+$00),a]
	rts                                    	| [$ce4c: ret]

switch_to_screen_5_CE4D:
	move.b	tile_at_the_destroyable_wall_location_627D,d0                 	| [$ce4d: ld   a,(tile_at_the_destroyable_wall_location_627D)]
	move.w	#0x91F3,d6                       	| [$ce50: ld   ($91F3),a]
    jbsr	osd_w_videoram
	cmp.b	#0xE0,d0                         	| [$ce53: cp   $E0]
	jeq	l_ce58                             	| [$ce55: jr   z,$CE58] branches if blank tile (wall destroyed)
	* wall is still up, lower tile is just before in the tilemap
	subq.b	#1,d0                           	| [$ce57: dec  a]
l_ce58:
	move.w	#0x91F4,d6                       	| [$ce58: ld   ($91F4),a]
	jbsr	osd_w_videoram
	move.b	#0x53,d0                        	| [$ce5b: ld   a,$53]

	move.w	d6,-(sp)                        	| [$ce5d: push hl]
	movem.w	d3/d4,-(sp)                    	| [$ce5e: push de]
	movem.w	d1/d2,-(sp)                    	| [$ce5f: push bc]
	move.w	#0x93B1,d6                      	| [$ce60: ld   hl,$93B1]
	move.w	#-0x20,d3                      	| [$ce63: ld   de,$FFE0]
	move.b	#0x06,d1                        	| [$ce66: ld   b,$06]
l_ce68:
	jbsr	osd_w_videoram                         	| [$ce68: ld   (hl),a]
	subq.b	#1,d0                           	| [$ce69: dec  a]
	move.w	d0,-(sp)                        	| [$ce6a: push af]

	move.w	d6,-(sp)                        	| [$ce6b: push hl]
	                          	| [$ce6c: ld   a,h]
	add.w	#0x0800,d6                         	| [$ce6d: add  a,$08]
	                          	| [$ce6f: ld   h,a]
	move.b	#0x1F,d0                        	| [$ce70: ld   a,$1F]
	jbsr	osd_w_colorram                         	| [$ce72: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$ce73: pop  hl]
	move.w	(sp)+,d0                        	| [$ce74: pop  af]
	add.w	d3,d6                            	| [$ce75: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_ce68                             	| [$ce76: djnz $CE68]

	movem.w	(sp)+,d1/d2                    	| [$ce78: pop  bc]
	movem.w	(sp)+,d3/d4                    	| [$ce79: pop  de]
	move.w	(sp)+,d6                        	| [$ce7a: pop  hl]
	rts                                    	| [$ce7b: ret]

* < D0: tile code
* < D6: screen address
* < D7: tile attribute
draw_object_tiles_CE7C:
	* check code in case screen MSB address is null
	move.w	d1,-(sp)                    	| [$ce7c: push bc]
	                           	| [$ce7d: ld   b,a]
	move.w	d6,d1                            	| [$ce7e: ld   a,h]
	lsr.w	#8,d1                         	| [$ce7f: cp   $00]
	                          	| [$ce81: ld   a,b]

	movem.w	(sp)+,d1                    	| [$ce82: pop  bc]
	bne.b	0f                               	| [...]
	* probably never happens...
	rts                                    	| [$ce83: ret  z] [...]
0:
	move.w	d0,-(sp)                        	| [$ce84: push af]
* read screen tile
	jbsr	osd_r_videoram                          	| [$ce85: ld   a,(hl)]
	* bag top
	cmp.b	#0xD0,d0                         	| [$ce86: cp   $D0]
	movem.w	(sp)+,d0                        	| [$ce8a: pop  af]
	jeq	l_ce91                             	| [$ce88: jr   z,$CE90]
	jbsr	write_next_object_tile_cea6                            	| [$ce8b: call $CEA6]
	                             	| [$ce8e: jr   $CE91]

l_ce91:
	addq.w	#1,d6                           	| [$ce91: inc  hl]
 	addq.b	#1,d0                           	| [$ce92: inc  a]
	jbsr	write_next_object_tile_cea6                            	| [$ce93: call $CEA6]
	                        	| [$ce96: push de]
	                     	| [$ce97: ld   de,$001F] 31
	add.w	#0x1F,d6                           	| [$ce9a: add  hl,de]
	                  	| [$ce9b: pop  de]
	addq.b	#1,d0                           	| [$ce9c: inc  a]
	jbsr	write_next_object_tile_cea6                            	| [$ce9d: call $CEA6]
	addq.w	#1,d6                           	| [$cea0: inc  hl]
	addq.b	#1,d0                           	| [$cea1: inc  a]
	jbsr	write_next_object_tile_cea6                            	| [$cea2: call $CEA6]
	rts                                    	| [$cea5: ret]
write_next_object_tile_cea6:
	jbsr	osd_w_videoram                        	| [$cea6: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$cea7: push hl]
	move.w	d0,-(sp)                        	| [$cea8: push af]
	                           	| [$cea9: ld   a,h]
	add.w	#0x0800,d6                         	| [$ceaa: add  a,$08]
	                           	| [$ceac: ld   h,a]
	exg	d0,d7                              	| [$cead: ex   af,af']
 	jbsr	osd_w_colorram                         	| [$ceae: ld   (hl),a]
	exg	d0,d7                              	| [$ceaf: ex   af,af']
	move.w	(sp)+,d0                        	| [$ceb0: pop  af]
	move.w	(sp)+,d6                        	| [$ceb1: pop  hl]
	rts                                    	| [$ceb2: ret]
l_ceb3:
	move.b	bag_sliding_615E,d0             	| [$ceb3: ld   a,(bag_sliding_615E)]
	cmp.b	#0x01,d0                         	| [$ceb6: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$ceb8: ret  nz] [...]
0:
	lea	guard_1_struct_6594,a2         	| [$ceb9: ld   ix,guard_1_struct_6594]
	jbsr	l_ced2                            	| [$cebd: call $CED2]
	cmp.b	#0x01,d0                         	| [$cec0: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_fcf4                            	| [$cec2: call z,$FCF4]
0:
	lea	guard_2_struct_6598,a2         	| [$cec5: ld   ix,guard_2_struct_6598]
	jbsr	l_ced2                            	| [$cec9: call $CED2]
	cmp.b	#0x01,d0                         	| [$cecc: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_fd33                            	| [$cece: call z,$FD33]
0:
	rts                                    	| [$ced1: ret]
l_ced2:
	lea	object_held_struct_659C,a3     	| [$ced2: ld   iy,object_held_struct_659C]
	move.b	(0x02,a3),d0                    	| [$ced6: ld   a,(iy+$02)]
	cmp.b	(0x02,a2),d0                     	| [$ced9: cp   (ix+$02)]
	jeq	l_cee4                             	| [$cedc: jr   z,$CEE4]
	addq.b	#1,d0                           	| [$cede: inc  a]
	cmp.b	(0x02,a2),d0                     	| [$cedf: cp   (ix+$02)]
	jne	l_cf03                             	| [$cee2: jr   nz,$CF03]
l_cee4:
	move.b	(0x03,a3),d0                    	| [$cee4: ld   a,(iy+$03)]
	addq.b	#2,d0                           	| [$cee7: inc  a] * 2
	cmp.b	(0x03,a2),d0                     	| [$cee9: cp   (ix+$03)]
	jeq	l_cf06                             	| [$ceec: jr   z,$CF06]
	subq.b	#1,d0                           	| [$ceee: dec  a]
	cmp.b	(0x03,a2),d0                     	| [$ceef: cp   (ix+$03)]
	jeq	l_cf06                             	| [$cef2: jr   z,$CF06]
	subq.b	#1,d0                           	| [$cef4: dec  a]
	cmp.b	(0x03,a2),d0                     	| [$cef5: cp   (ix+$03)]
	jeq	l_cf06                             	| [$cef8: jr   z,$CF06]
	subq.b	#1,d0                           	| [$cefa: dec  a]
	cmp.b	(0x03,a2),d0                     	| [$cefb: cp   (ix+$03)]
	jeq	l_cf06                             	| [$cefe: jr   z,$CF06]
	subq.b	#1,d0                           	| [$cf00: dec  a]
	jeq	l_cf06                             	| [$cf01: jr   z,$CF06]
l_cf03:
	clr.b	d0                               	| [$cf03: ld   a,$00]
	rts                                    	| [$cf05: ret]

l_cf06:
	move.b	#0x01,d0                        	| [$cf06: ld   a,$01]
	rts                                    	| [$34a3: ret]


	
wait_for_vblank_cf34:
	st.b	vblank_ack
0:
	* wait for flag to be reset by irq
	tst.b	vblank_ack
	bne.b	0b
	rts
	
	
* delay loop on vertical position????
*	move.b	vertical_beam_pos_A000,d0       	| [$34cf: ld   a,(vertical_beam_pos_A000)]
*	and.b	#0x3F,d0                         	| [$34d2: and  $3F]
*	move.b	d0,d1                           	| [$34d4: ld   b,a]
*l_34d5:
*	nop                                    	| [$34d5: nop]
*	subq.b	#1,d1                           	| [...]
*	jne	l_34d5                             	| [$34d6: djnz $34D5]
* * extra life test depending on dip switch: 30000 or 40000
	rts                                    	| [$cf40: ret]

	
	
l_cf77:
	bsr		read_rom                         	| [$cf77: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$cf78: cp   $E0]
	jne	l_cf9f                             	| [$cf7a: jr   nz,$CF9F]
	move.b	player_screen_600D,d0           	| [$cf7c: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$cf7f: cp   b]
	jeq	l_cf9f                             	| [$cf80: jr   z,$CF9F]
	move.b	d1,d0                           	| [$cf82: ld   a,b]
	lea		unknown_6165,a4            	| [$cf85: ld   bc,unknown_6165] None
	cmp.b	#0x02,d0                         	| [$cf83: cp   $02]
	jeq	l_cf8f                             	| [$cf88: jr   z,$CF8F]
	                         	| [$cf8a: cp   $03]  useless
	lea		unknown_6166,a4            	| [$cf8c: ld   bc,unknown_6166] None
l_cf8f:
	move.b	(a4),d0                         	| [$cf8f: ld   a,(bc)]
	cmp.b	#0x10,d0                         	| [$cf90: cp   $10]
	bcc.b	0f                               	| [...]
	rts                                    	| [$cf92: ret  c] [...]
0:
	exg	d0,d7                              	| [$cf93: ex   af,af']
	tst.b	d0                         	| [$cf94: cp   $00]
	jne	l_cf9b                             	| [$cf96: jr   nz,$CF9B]
	move.b	(a4),d0                         	| [$cf98: ld   a,(bc)]
	subq.b	#1,d0                           	| [$cf99: dec  a]
	move.b	d0,(a4)                         	| [$cf9a: ld   (bc),a]
l_cf9b:
	move.b	(a1),d0                         	| [$cf9b: ld   a,(de)]
	subq.b	#1,d0                           	| [$cf9c: dec  a]
	move.b	d0,(a1)                         	| [$cf9d: ld   (de),a]
	rts                                    	| [$cf9e: ret]
l_cf9f:
	clr.b	d0                               	| [$cf9f: xor  a]
	move.b	d0,(A2)                    	| [$cfa0: ld   (ix+$00),a]
	move.b	d0,(A3)                    	| [$cfa3: ld   (iy+$00),a]
	rts                                    	| [$cfa6: ret]
	
decrease_timer_cfa7:
	tst.b	infinite_time_flag
	beq.b	0f
	rts
0:
	lea	timer_high_prec_61E7,a0                	| [$353e: ld   hl,timer_high_prec_61E7]
	move.b	(a0),d0                         	| [$3541: ld   a,(hl)]
	moveq	#1,d7
	sbcd	d7,d0                        	| [$3542: sub  $01 + daa]
	move.b	d0,(a0)+                         	| [$3545: ld   (hl),a]
												| [$3546: push af]
												| [$3547: inc  hl]
												| [$3548: pop  af]
	* update "visible" part if carry set
	move.b	(a0),d0                         	| [$3549: ld   a,(hl)]
	clr.w	d7
	sbcd.b	d7,d0                        	| [$354a: sbc  a,$00]

	move.b	d0,(a0)                         	| [$354d: ld   (hl),a]
	rts                                    	| [$354e: ret]

set_bags_coordinates_hard_level_CFBD:
	                 	| [$cfbd: ld   a,(act_number_60D3)]
	addq.b	#1,act_number_60D3                           	| [$cfc0: inc  a]
	                 	| [$cfc1: ld   (act_number_60D3),a]
	                               	| [$cfc4: xor  a]
	clr.b	is_key_hunt_phase_6341                 	| [$cfc5: ld   (is_key_hunt_phase_6341),a]
do_set_bags_coordinates_hard_level:
	lea	bags_coordinates_609C,a1       	| [$cfc8: ld   de,bags_coordinates_609C]
	LEA_ROM	       0x1B15,a0                      	| [$cfcb: ld   hl,$1B15]
	* original code is buggy as d0 is always 0... it was probably to
	* test against act number but is never reached so that 3rd bag layout is unseen
	* this layout (unreachable) is harder too, but different. We're using that
	* for act 2 of hard bags setting (if someone can reach that point...)
	tst.b	hard_bags_flag                         	| [$cfce: cp   $02]
	jeq	set_bags_coords_cfd5                             	| [$cfd0: jr   nz,$CFD5]
	LEA_ROM	       0x1B4E,a0                      	| [$cfd2: ld   hl,$1B4E]
	
set_bags_coords_cfd5:
	move.w	#0x36,d1                        	| [$cfd5: ld   bc,$0036] 54
	move.l	a1,-(a7)
	jbsr	ldir                              	| [$cfd8: ldir]
	move.l	(a7)+,a1
	jra		correct_bags_endian
 	rts                                    	| [$cfda: ret]

set_bags_coordinates_easy_level_CFDB:
	tst.b	hard_bags_flag
	jne		do_set_bags_coordinates_hard_level

	lea	bags_coordinates_609C,a1       	| [$cfdb: ld   de,bags_coordinates_609C]
	LEA_ROM	       0x1ADC,a0                      	| [$cfde: ld   hl,$1ADC]
	bra.b	set_bags_coords_cfd5

set_bags_coordinates_player_2_CFE7:
	lea	bags_coordinates_617F,a1       	| [$cfe7: ld   de,bags_coordinates_617F]
	LEA_ROM	       0x1ADC,a0                      	| [$cfea: ld   hl,$1ADC]
	                        	| [$cfed: ld   bc,$0036] 54
	bra.b	set_bags_coords_cfd5

correct_bags_endian:
	move.w	#0x36/3-1,d2
1:
	move.b	(a1)+,d0
	move.b	(a1)+,d1
	move.b	d1,(-2,a1)
	move.b	d0,(-1,a1)
	addq.w	#1,a1
	dbf	d2,1b
	rts
* check if tile can be walked into (ground level only, used to drop objects)
is_background_tile_for_object_drop_CFF3:
	cmp.b	#0xE0,d0                         	| [$cff3: cp   $E0]
	bne.b	0f                               	| [...]
	rts                                    	| [$cff5: ret  z] [...]
0:
	cmp.b	#0x4B,d0                         	| [$cff6: cp   $4B]
	bne.b	0f                               	| [...]
	rts                                    	| [$cff8: ret  z] [...]
0:
	cmp.b	#0x4A,d0                         	| [$cff9: cp   $4A]
	bne.b	0f                               	| [...]
	rts                                    	| [$cffb: ret  z] [...]
0:
	cmp.b	#0x49,d0                         	| [$cffc: cp   $49]
	bne.b	0f                               	| [...]
	rts                                    	| [$cffe: ret  z] [...]
0:
	cmp.b	#0xE4,d0                         	| [$cfff: cp   $E4]
	bne.b	0f                               	| [...]
	rts                                    	| [$d001: ret  z] [...]
0:
	cmp.b	#0xE6,d0                         	| [$d002: cp   $E6]
	bne.b	0f                               	| [...]
	rts                                    	| [$d004: ret  z] [...]
0:
	cmp.b	#0xD4,d0                         	| [$d005: cp   $D4]
	bne.b	0f                               	| [...]
	rts                                    	| [$d007: ret  z] [...]
0:
	cmp.b	#0xD6,d0                         	| [$d008: cp   $D6]
	rts                                    	| [$d00a: ret]
	
compare_d3_d6_20_offset_d00b:

	movem.w	d6,-(sp)                        	| [$d00b: push hl]
	                    	| [$d00c: push bc]
	                        	| [$d00d: ld   bc,$FFE0] 65504
	                        	| [$d00d: ld   bc,$FFE0] 65504
	sub.w	#0x20,d6                            	| [$d010: add  hl,bc]
	                               	| [$d011: xor  a]
	cmp.w	d3,d6                            	| [$d012: sbc  hl,de]
 
	                    	| [$d014: pop  bc]
	movem.w	(sp)+,d6                         	| [$d015: pop  hl]
	rts                                    	| [$d016: ret]
	
current_player_start_screen_d017:
	move.b	number_of_players_617D,d0       	| [$d017: ld   a,(number_of_players_617D)]
	cmp.b	#0x01,d0                         	| [$d01a: cp   $01]
	bne.b	0f                               	| [...]
	* one player: no player start screen
	rts                                    	| [$d01c: ret  z] [...]
0:
	* jotd: added to clear sprites
	bsr		zero_sprites
	
	move.b	#0x01,d0                        	| [$d01d: ld   a,$01]
	move.b	d0,game_locked_6053             	| [$d01f: ld   (game_locked_6053),a]
	move.b	d0,unknown_628C                 	| [$d022: ld   (unknown_628C),a]
	jbsr	l_c3e3                            	| [$d025: call $C3E3]
	* write "PLAYER 1"
	LEA_ROM	       0x575A,a1                      	| [$d028: ld   de,$575A]
	move.w	#0x9274,d6                      	| [$d02b: ld   hl,$9274]
	jbsr	display_localized_text_CA67       	| [$d02e: call display_localized_text_CA67]
	* write "CREDIT"
	LEA_ROM	       0x5689,a1                      	| [$d031: ld   de,$5689]
	move.w	#0x919F,d6                      	| [$d034: ld   hl,$919F]
	jbsr	display_localized_text_CA67       	| [$d037: call display_localized_text_CA67]
	move.b	current_player_617C,d0          	| [$d03a: ld   a,(current_player_617C)]
	addq.b	#1,d0                           	| [$d03d: inc  a]
	move.w	#0x9194,d6                       	| [$d03e: ld   ($9194),a]
	jbsr	osd_w_videoram
	move.b	#0x08,d0                        	| [$d041: ld   a,$08]
	move.w	#0x987F,d6                      	| [$d043: ld   hl,$987F]
	jbsr	write_attribute_on_line_5605      	| [$d046: call write_attribute_on_line_5605]
	clr.b	d0                               	| [$d049: ld   a,$00]
	move.w	#0x985F,d6                       	| [$d04b: ld   ($985F),a]
	jbsr	osd_w_colorram
	move.b	#0x05,d0                        	| [$d04e: ld   a,$05]
	move.w	#0x9841,d6                      	| [$d050: ld   hl,$9841]
	jbsr	write_attribute_on_line_5605      	| [$d053: call write_attribute_on_line_5605]
	move.b	#0x02,d0                        	| [$d056: ld   a,$02]
	move.w	#0x9840,d6                      	| [$d058: ld   hl,$9840]
	jbsr	write_attribute_on_line_5605      	| [$d05b: call write_attribute_on_line_5605]
	move.w	#0x9293,d6                      	| [$d05e: ld   hl,$9293]
	LEA_ROM	       0x1A42,a1                      	| [$d061: ld   de,$1A42]
	move.b	#0x1F,d0                        	| [$d064: ld   a,$1F]
	exg	d0,d7                              	| [$d066: ex   af,af']
* write upper part of orange wireframe 
* that goes around "player" text
	jbsr	write_text_55f0                            	| [$d067: call $55F0]
	move.w	#0x9295,d6                      	| [$d06a: ld   hl,$9295]
	LEA_ROM	       0x1A4D,a1                      	| [$d06d: ld   de,$1A4D]
	move.b	#0x1F,d0                        	| [$d070: ld   a,$1F]
	exg	d0,d7                              	| [$d072: ex   af,af']
* write lower part of orange wireframe 
* that goes around "player" text
	jbsr	write_text_55f0                            	| [$d073: call $55F0]
* the frame lateral sides
	move.b	#0x8E,d0                        	| [$d076: ld   a,$8E]
	move.w	#0x9174,d6                       	| [$d078: ld   ($9174),a]
	jbsr	osd_w_videoram
	move.b	#0x8B,d0                        	| [$d07b: ld   a,$8B]
	move.w	#0x9294,d6                       	| [$35f7: ld   ($9294),a]
	jbsr	osd_w_videoram
	move.b	#0x1F,d0                        	| [$d080: ld   a,$1F]
	move.w	#0x9974,d6                       	| [$d082: ld   ($9974),a]
	jbsr	osd_w_colorram
	move.w	#0x9A94,d6                       	| [$d085: ld   ($9A94),a]
	jbsr	osd_w_colorram
	jbsr	write_credits_and_lives_162e                            	| [$d088: call $162E]
	clr.b	d0                               	| [$3605: ld   a,$00]
	move.w	#0x9803,d6                       	| [$3607: ld   ($9803),a]
	jbsr	osd_w_colorram
 	move.w	#0x9807,d6                       	| [$360a: ld   ($9807),a]
	jbsr	osd_w_colorram
	move.w	#0x980B,d6                       	| [$360d: ld   ($980B),a]
	jbsr	osd_w_colorram
	move.w	#0x980F,d6                       	| [$3610: ld   ($980F),a]
	jbsr	osd_w_colorram
	move.w	#0x9813,d6                      	| [$3613: ld   ($9813),a]
	jbsr	osd_w_colorram
	move.w	#0x9817,d6                       	| [$3616: ld   ($9817),a]
	jbsr	osd_w_colorram
	move.w	#0x981B,d6                       	| [$3619: ld   ($981B),a]
	jbsr	osd_w_colorram
	move.w	#0x981F,d6                       	| [$361c: ld   ($981F),a]
	jbsr	osd_w_colorram
	bsr		zero_sprites
	move.w	#120,d0
	jbsr	osd_wait

	clr.b	d0                               	| [$d0bc: ld   a,$00]
	move.b	d0,game_locked_6053             	| [$d0be: ld   (game_locked_6053),a]
	move.b	d0,unknown_628C                 	| [$d0c1: ld   (unknown_628C),a]
	rts                                    	| [$d0c4: ret]
 * routine to perform several guard moves, sometimes at screen boundary
 * no more info
move_guard_1_96_times_d0c5:
	move.b	#0x60,d1                        	| [$d0c6: ld   b,$60]
l_d0c8:
	movem.w	d1/d2,-(sp)                    	| [$d0c8: push bc]
	jbsr	guard_1_walk_movement_11C0        	| [$d0c9: call guard_1_walk_movement_11C0]

	movem.w	(sp)+,d1/d2                    	| [$d0cc: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_d0c8                             	| [$d0cd: djnz $D0C8]
	rts                                    	| [$d0d0: ret]
	
move_guard_2_96_times_3658:
	move.b	#0x60,d1                        	| [$d0d2: ld   b,$60]
l_d0d4:
	movem.w	d1/d2,-(sp)                    	| [$d0d4: push bc]
	jbsr	guard_2_walk_movement_11EC        	| [$d0d5: call guard_2_walk_movement_11EC]

	movem.w	(sp)+,d1/d2                    	| [$d0d8: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_d0d4                             	| [$d0d9: djnz $D0D4]
	rts                                    	| [$d0dc: ret]
	
draw_credit_and_bonus_d0dd:
	LEA_ROM	       0x5689,a1                      	| [$d0dd: ld   de,$5689]
	move.w	#0x919F,d6                      	| [$d0e0: ld   hl,$919F]
	jbsr	display_localized_text_CA67       	| [$d0e3: call display_localized_text_CA67]
	            	| [$d0e6: ld   a,(io_read_shit_B800)]
	LEA_ROM	       0x5705,a1                      	| [$d0e9: ld   de,$5705]
	move.w	#0x9240,d6                      	| [$d0ec: ld   hl,$9240]
	jbsr	display_localized_text_CA67       	| [$d0ef: call display_localized_text_CA67]
	rts                                    	| [$d0f2: ret]

start_level_music_d0f3:
	* the only location where we need to check if music is playing
	* else if music is playing, the tune is skipped and next tune will
	* be played next time.
	jbsr	osd_is_music_playing                 	| [$d0f3: call is_ay_sound_playing_D4D9]
	tst.b	d0
	beq.b	0f                               	| [...]
	rts                                    	| [$d0f6: ret  nz] [...]
0:

play_next_tune_d0f7:
	clr.w	d0
	move.b	current_tune_6353,d0                 	| [$d0f7: ld   a,(current_tune_6353)]
	addq.b	#1,d0                           	| [$d0fa: inc  a]
	cmp.b	#0x03,d0                         	| [$d0fb: cp   $03]
	jcs	l_d100                             	| [$d0fd: jr   c,$D100]
	clr.b	d0                               	| [$d0ff: xor  a]
l_d100:
	move.b	d0,current_tune_6353                 	| [$d100: ld   (current_tune_6353),a]
	add.b	d0,d0
	lea		tune_table(pc),a0
	move.w	(a0,d0.w),d0
	bsr		play_tune
	               	| [$d103: ld   hl,$3B68]
	          	| [$d106: cp   $01]
	        	| [$d108: jr   z,$D114]
	               	| [$d10a: ld   hl,$3800]
	          	| [$d10d: cp   $02]
	        	| [$d10f: jr   z,$D114]
	
	               	| [$d111: ld   hl,$5000]
l_d114:
	* D0=1: first screen tune
	* D0=2: second screen tune
	* D0=3: third screen tune
	*move.l	a0,ay_sound_pointer_6140        	| [$d114: ld   (ay_sound_pointer_6140),hl]
	*clr.b	d0                               	| [$d117: xor  a]
	*move.b	d0,ay_sound_start_6142          	| [$d118: ld   (ay_sound_start_6142),a]
	rts                                    	| [$d11b: ret]

* super-useless code that tests stuff and does ... nothing
l_d11c:
	move.b	player_screen_600D,d0           	| [$d11c: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$d11f: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$d121: ret  nz] [...]
0:
	move.b	holds_barrow_61C7,d0            	| [$d122: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d125: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d127: ret  nz] [...]
0:
	move.b	player_x_6582,d0                	| [$d128: ld   a,(player_x_6582)]
	cmp.b	#0xB3,d0                         	| [$d12b: cp   $B3]
	beq.b	0f                               	| [...]
	rts                                    	| [$d12d: ret  nz] [...]
0:
	rts                                    	| [$d12e: ret]

check_if_level_completed_D12F:
	tst.b	next_bag_completes_level_flag
	bne.b	0f
	jbsr	check_remaining_bags_D269         	| [$d12f: call check_remaining_bags_D269]
	move.b	d2,d0                           	| [$d132: ld   a,c]
	                         	| [$d133: cp   $00]
	bne.b	1f                               	| [...]
	rts                                    	| [$d135: ret  z] [...]
0:
	* cheat: if we don't do this, all remaining bags are turned into keys
	lea	bags_coordinates_609C,a3
	move.b	#0x36,d1
clr_bags:
	clr.b	(A3)+
	subq.b	#1,d1
	jne	clr_bags
	
1:
	clr.b	next_bag_completes_level_flag
* level completed
	* stop music if any
	jbsr	osd_sound_stop
	
	move.b	is_key_hunt_phase_6341,d0                 	| [$d136: ld   a,(is_key_hunt_phase_6341)]
	cmp.b	#0x01,d0                         	| [$d139: cp   $01]
	jeq	l_d1d0                             	| [$d13b: jp   z,$D1D0]
	clr.b	d0                               	| [$d13e: ld   a,$00]
	jbsr	osd_disable_display                       	| [$d140: ld   ($A003),a]
	jbsr	clear_screen_C3B7                 	| [$d143: call clear_screen_C3B7]
	move.b	#0x04,d0                        	| [$d146: ld   a,$04]
	jbsr	change_attribute_everywhere_C3A3  	| [$d148: call change_attribute_everywhere_C3A3]
	move.b	#0x01,d0                        	| [$d14b: ld   a,$01]
	move.b	d0,unknown_6332                 	| [$d14d: ld   (unknown_6332),a]
	move.b	d0,ignore_if_has_credits_6342                 	| [$d150: ld   (ignore_if_has_credits_6342),a]
	
	* we have to re-enable interrupts on status register as this is 
	* called from an interrupt (very bad practice)
	
	move.w	#0x2000,SR
	
	LEA_ROM	       0x1C13,a2                      	| [$d153: ld   ix,$1C13]
	jbsr	osd_read_dipswitches                       	| [$d157: ld   a,($B000)]
	and.b	#0x20,d0                         	| [$d15a: and  $20]
	cmp.b	#0x20,d0                         	| [$d15c: cp   $20]
	jne	l_d164                             	| [$d15e: jr   nz,$D164]
	* "FOUND THE KEY (sic) ..." (now changed to "FIND THE KEY")
	LEA_ROM	       0x1C6A,a2                      	| [$d160: ld   ix,$1C6A]
l_d164:
	jbsr	tell_the_story_d82a                            	| [$d164: call $D82A]
	                               	| [$d167: xor  a]
	clr.b	unknown_6332                 	| [$d168: ld   (unknown_6332),a]
	clr.b	ignore_if_has_credits_6342                 	| [$d16b: ld   (ignore_if_has_credits_6342),a]
	jbsr	osd_disable_vblank_interrupt			| di
	move.b	#0x01,d0                        	| [$d16f: ld   a,$01]
	move.b	d0,is_key_hunt_phase_6341                 	| [$d171: ld   (is_key_hunt_phase_6341),a]
	jbsr	init_new_game_F951                	| [$d174: call init_new_game_F951]
	jbsr	init_guard_directions_and_wagons_C314	| [$d177: call init_guard_directions_and_wagons_C314]
	jbsr	init_bombs_locations_and_other_stuff_dfbf                            	| [$d17a: call $DFBF]
	move.w	barrow_screen_params_61C4,d6	| [$d17d: ld   hl,(barrow_screen_params_61C4)]
 
	                        	| [$d180: push hl]
	                      	| [$d181: ld   hl,$0000] 0
	clr.w	barrow_screen_params_61C4    	| [$d184: ld   (barrow_screen_params_61C4),hl]
	                        	| [$d187: pop  hl]
	addq.w	#1,d6                           	| [$d188: inc  hl]
	move.b	#0xE0,d0                        	| [$d189: ld   a,$E0]
	jbsr	osd_w_videoram                         	| [$d18b: ld   (hl),a]
	move.w	#0x0020,d3                      	| [$d18c: ld   de,$0020] 32
	add.w	d3,d6                            	| [$d18f: add  hl,de]
	jbsr	osd_w_videoram                         	| [$d190: ld   (hl),a]
	* pick a key location at random (8 possible locations)
	lea	       possible_key_locations_D1B5,a2                      	| [$d191: ld   ix,$D1B5]
	move.w	#0x0003,d3                      	| [$d195: ld   de,$0003] 3
	jbsr  osd_get_random       	| [$d198: ld   a,(interrupt_control_A000)]
	and.b	#0x07,d0                         	| [$d19b: and  $07]
	addq.b	#1,d0                           	| [$d19d: inc  a]
	move.b	d0,d1                           	| [$d19e: ld   b,a]
l_d19f:
	add.w	d3,a2                            	| [$d19f: add  ix,de]

	subq.b	#1,d1                           	| [...]
	jne	l_d19f                             	| [$d1a1: djnz $D19F]
	                  	| [$d1a3: ld   a,(ix+$00)]
	LOAD_AX_BE_WORD_DY	a2,d6                           	| [$d1a6: ld   l,a]
	                    	| [$d1a7: ld   a,(ix+$01)]
	                           	| [$d1aa: ld   h,a]
	move.b	(0x02,a2),d0                    	| [$d1ab: ld   a,(ix+$02)]
	move.w	d6,key_screen_address_609F                 	| [$d1ae: ld   (key_screen_address_609F),hl]
	move.b	d0,key_screen_60A1                 	| [$d1b1: ld   (key_screen_60A1),a]
	rts                                    	| [$d1b4: ret]


l_d1d0:
	move.b	jail_buddy_free_6343,d0                 	| [$d1d0: ld   a,(jail_buddy_free_6343)]
	cmp.b	#0x01,d0                         	| [$d1d3: cp   $01]
	jeq	l_d1f3                             	| [$d1d5: jr   z,$D1F3]
	                       	| [$d1d7: xor  a]
	clr.b	unknown_6288                 	| [$d1d8: ld   (unknown_6288),a]
	clr.b	gameplay_allowed_6054        	| [$d1db: ld   (gameplay_allowed_6054),a]
	move.b	#0xE0,d0                        	| [$d1de: ld   a,$E0]
	move.w	#0x930E,d6                       	| [$d1e0: ld   ($930E),a]
	jbsr	osd_w_videoram
	move.w	#0x930E,d6                       	| [$d1e0: ld   ($930E),a]
	jbsr	osd_w_videoram                       	| [$d1e3: ld   ($930F),a]
	move.b	#0x01,d0                        	| [$d1e6: ld   a,$01]
	move.b	d0,jail_buddy_free_6343                 	| [$d1e8: ld   (jail_buddy_free_6343),a]
	move.b	d0,is_key_hunt_phase_6341                 	| [$d1eb: ld   (is_key_hunt_phase_6341),a]
	move.b	#0xE0,d0                        	| [$d1ee: ld   a,$E0]
	move.w	#0x938E,d6                       	| [$d1f0: ld   ($938E),a]
    jbsr	osd_w_videoram
l_d1f3:
	move.b	#0x05,d0                        	| [$d1f3: ld   a,$05]
	move.b	d0,guard_1_screen_6099          	| [$d1f5: ld   (guard_1_screen_6099),a]
	move.b	d0,unknown_699A                 	| [$d1f8: ld   (unknown_699A),a]
	move.b	player_x_6582,d0                	| [$d1fb: ld   a,(player_x_6582)]
	cmp.b	#0x10,d0                         	| [$d1fe: cp   $10]
	beq.b	0f                               	| [...]
	rts                                    	| [$d200: ret  nz] [...]
0:
	move.b	player_y_6583,d0                	| [$d201: ld   a,(player_y_6583)]
	cmp.b	#0x18,d0                         	| [$d204: cp   $18]
	beq.b	0f                               	| [...]
	rts                                    	| [$d206: ret  nz] [...]
0:
	clr.b	d0                               	| [$d207: ld   a,$00]
	move.b	d0,jail_buddy_free_6343                 	| [$d209: ld   (jail_buddy_free_6343),a]
	move.b	d0,game_locked_6053             	| [$d20c: ld   (game_locked_6053),a]
	move.b	#0x01,d0                        	| [$d20f: ld   a,$01]
	move.b	d0,is_key_hunt_phase_6341                 	| [$d211: ld   (is_key_hunt_phase_6341),a]
	jbsr	osd_enable_display                       	| [$d214: ld   ($A003),a]
	move.b	d0,unknown_6332                 	| [$d217: ld   (unknown_6332),a]
	move.b	d0,ignore_if_has_credits_6342                 	| [$d21a: ld   (ignore_if_has_credits_6342),a]
	jbsr	clear_screen_C3B7                 	| [$d21d: call clear_screen_C3B7]
	move.b	#0x04,d0                        	| [$d220: ld   a,$04]
	jbsr	change_attribute_everywhere_C3A3  	| [$d222: call change_attribute_everywhere_C3A3]
	LEA_ROM	       0x1CAE,a2                      	| [$d225: ld   ix,$1CAE]
	* french/english language setting
	jbsr	osd_read_dipswitches                       	| [$d229: ld   a,($B000)]
	and.b	#0x20,d0                         	| [$d22c: and  $20]
	cmp.b	#0x20,d0                         	| [$d22e: cp   $20]
	jne	l_d236                             	| [$d230: jr   nz,$D236]
	LEA_ROM	       0x1D25,a2                      	| [$d232: ld   ix,$1D25]
l_d236:
	jbsr	tell_the_story_d82a                            	| [$d236: call $D82A]
	clr.b	d0                               	| [$d239: xor  a]
	move.b	d0,unknown_6332                 	| [$d23a: ld   (unknown_6332),a]
	move.b	d0,ignore_if_has_credits_6342                 	| [$d23d: ld   (ignore_if_has_credits_6342),a]
	move.b	d0,is_key_hunt_phase_6341                 	| [$d240: ld   (is_key_hunt_phase_6341),a]
	move.b	#0x01,d0                        	| [$d243: ld   a,$01]
	move.b	d0,gameplay_allowed_6054        	| [$d245: ld   (gameplay_allowed_6054),a]
	move.b	lives_6056,d0                   	| [$d248: ld   a,(lives_6056)]
	addq.b	#1,d0                           	| [$d24b: inc  a]
	move.b	d0,lives_6056                   	| [$d24c: ld   (lives_6056),a]
	jbsr	osd_disable_vblank_interrupt	|	di
	move.b	#0x40,d1                        	| [$d250: ld   b,$40]
	lea	player_struct_6580,a0          	| [$d252: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$d255: ld   a,$00]
l_d257:
	move.b	d0,(a0)+                         	| [$d257: ld   (hl),a]
	                           	| [$d258: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_d257                             	| [$d259: djnz $D257]
	move.b	#0x01,d0                        	| [$d25b: ld   a,$01]
	move.b	d0,gameplay_allowed_6054        	| [$d25d: ld   (gameplay_allowed_6054),a]
	jbsr	set_bags_coordinates_hard_level_CFBD	| [$d260: call set_bags_coordinates_hard_level_CFBD]
	lea	stack_top_67F0,sp				| 			ld   sp,stack_top_67F0
	jra	l_ecdc                             	| [$d266: jp   $ECDC]

* < return c=0 if still bags, c=1 otherwise (level completed)
check_remaining_bags_D269:
	clr.b	d2                               	| [$d269: ld   c,$00]
	lea	bags_coordinates_609C,a3       	| [$d26b: ld   iy,bags_coordinates_609C]
	move.b	#0x36,d1                        	| [$d26f: ld   b,$36]
l_d271:
	tst.b	(A3)                    	| [$d271: ld   a,(iy+$00)]
	                         	| [$d274: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$d276: ret  nz] [...]
0:
	addq.w	#1,a3                           	| [$d277: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_d271                             	| [$d279: djnz $D271]
	move.b	#0x01,d2                        	| [$d27b: ld   c,$01]
	rts                                    	| [$d27d: ret]
l_d27e:
	lea	unknown_61F4,a0                	| [$d27e: ld   hl,unknown_61F4]
	move.b	(a0),d0                         	| [$d281: ld   a,(hl)]
	move.b	d0,d1                           	| [$d282: ld   b,a]
	move.b	time_61E8,d0                    	| [$d283: ld   a,(time_61E8)]
	cmp.b	d1,d0                            	| [$d286: cp   b]
	bne.b	0f                               	| [...]
	rts                                    	| [$d287: ret  z] [...]
0:
	cmp.b	#0x05,d0                         	| [$d288: cp   $05]
	bcs.b	0f                               	| [...]
	rts                                    	| [$d28a: ret  nc] [...]
0:
									| [$3bae: ld   hl,$5B94]
								| [$3bb1: ld   (ay_sound_pointer_6140),hl]
	move.b	d0,unknown_61F4                 	| [$3bb4: ld   (unknown_61F4),a]
	cmp.b	#4,d0
	bne.b	0f
	* stop music
	jbsr	osd_sound_stop
0:
	        	| [$3bb7: xor  a]
	move.w	#TIME_WARN_SND,d0									| [$3bb8: ld   (ay_sound_start_6142),a]
	jbsr	start_a_sound
	rts                                    	| [$3bbb: ret]
                              	| [$d325: ret]
* probably to swap memory
l_d32e:
	move.w	guard_logical_address_6091,unknown_61FF
	                	| [$d331: ld   (unknown_61FF),hl]
	move.l	guard_struct_pointer_6093,unknown_pointer_6201	| [$d334: ld   hl,(guard_struct_pointer_6093)]

	        	| [$d337: ld   (unknown_pointer_6201),hl]
	move.l	guard_direction_pointer_6095,unknown_pointer_6203| [$d33a: ld   hl,(guard_direction_pointer_6095)]
	         	| [$d33d: ld   (unknown_pointer_6203),hl]
	move.b	way_clear_flag_600B,unknown_6205          	| [$d340: ld   a,(way_clear_flag_600B)]
                 	| [$d343: ld   (unknown_6205),a]
	move.b	current_character_screen_index_6098,unknown_61F9	| [$d346: ld   a,(current_character_screen_index_6098)]
	                 	| [$d349: ld   (unknown_61F9),a]
	rts                                    	| [$d34c: ret]
l_d34d:
	move.w	unknown_61FF,guard_logical_address_6091             	| [$d34d: ld   hl,(unknown_61FF)]
 		   	| [$d350: ld   (guard_logical_address_6091),hl]
	move.l	unknown_pointer_6201,guard_struct_pointer_6093     	| [$d353: ld   hl,(unknown_pointer_6201)]
 	    	| [$d356: ld   (guard_struct_pointer_6093),hl]
	move.l	unknown_pointer_6203,guard_direction_pointer_6095     	| [$d359: ld   hl,(unknown_pointer_6203)]
 	| [$d35c: ld   (guard_direction_pointer_6095),hl]
	move.b	unknown_6205,way_clear_flag_600B                 	| [$d35f: ld   a,(unknown_6205)]
	          	| [$d362: ld   (way_clear_flag_600B),a]
	move.b	unknown_61F9,current_character_screen_index_6098                 	| [$d365: ld   a,(unknown_61F9)]
		| [$d368: ld   (current_character_screen_index_6098),a]
	rts                                    	| [$d36b: ret]

* > D1: 0 or 1 depending on tile type
test_non_blocking_tiles_D36C:
	move.w	d0,-(sp)                        	| [$d36c: push af]
	movem.w	d3/d4/d6,-(sp)                    	| [$d36d: push de]
                      	| [$d36d: push de]

	
	clr.b	d1                               	| [$d36f: ld   b,$00]
	jbsr	l_d391                            	| [$d371: call $D391]
	jne	l_d38d                             	| [$d374: jr   nz,$D38D]
	addq.w	#1,d6                           	| [$d376: inc  hl]
	jbsr	l_d391                            	| [$d377: call $D391]
	jne	l_d38d                             	| [$d37a: jr   nz,$D38D]
	move.w	#0x001F,d3                      	| [$d37c: ld   de,$001F] 31
	add.w	d3,d6                            	| [$d37f: add  hl,de]
	jbsr	l_d391                            	| [$d380: call $D391]
	jne	l_d38d                             	| [$d383: jr   nz,$D38D]
	addq.w	#1,d6                           	| [$d385: inc  hl]
	jbsr	l_d391                            	| [$d386: call $D391]
	jne	l_d38d                             	| [$d389: jr   nz,$D38D]
	move.b	#0x01,d1                        	| [$d38b: ld   b,$01]
l_d38d:
	                        	| [$d38d: pop  hl]
	movem.w	(sp)+,d3/d4/d6                    	| [$d38e: pop  de]
	move.w	(sp)+,d0                        	| [$d38f: pop  af]
	rts                                    	| [$d390: ret]

l_d391:
	bsr		osd_r_videoram                         	| [$d391: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$d392: cp   $E0]
	bne.b	0f                               	| [...]
	rts                                    	| [$d394: ret  z] [...]
0:
	cmp.b	#0x49,d0                         	| [$d395: cp   $49]
	bne.b	0f                               	| [...]
	rts                                    	| [$d397: ret  z] [...]
0:
	cmp.b	#0x4A,d0                         	| [$d398: cp   $4A]
	bne.b	0f                               	| [...]
	rts                                    	| [$d39a: ret  z] [...]
0:
	cmp.b	#0x4B,d0                         	| [$d39b: cp   $4B]
	bne.b	0f                               	| [...]
	rts                                    	| [$d39d: ret  z] [...]
0:
	cmp.b	#0x51,d0                         	| [$d39e: cp   $51]
	bne.b	0f                               	| [...]
	rts                                    	| [$d3a0: ret  z] [...]
0:
	cmp.b	#0x52,d0                         	| [$d3a1: cp   $52]
	bne.b	0f                               	| [...]
	rts                                    	| [$d3a3: ret  z] [...]
0:
	cmp.b	#0x57,d0                         	| [$d3a4: cp   $57]
	rts                                    	| [$d3a6: ret]
l_d3a7:
	clr.b	d0                               	| [$d3a7: xor  a]
	move.b	d0,(A3)                    	| [$d3a8: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$d3ab: ld   (iy+$01),a]
	movem.w	(sp)+,d5/d6                        	| [$d3ae: pop  hl]
	rts                                    	| [$d3af: ret]
	
	
l_d3c4:
	jbsr	update_guard_2_screen_address_from_xy_EABE                            	| [$d3c4: call $EABE]
	jbsr	l_d481                            	| [$d3c7: call $D481]
	jeq	l_d3de                             	| [$d3ca: jr   z,$D3DE]
	clr.b	d0                               	| [$d3cc: xor  a]
	move.b	d0,guard_2_in_elevator_6077     	| [$d3cd: ld   (guard_2_in_elevator_6077),a]
	move.b	unknown_6209,d0                 	| [$d3d0: ld   a,(unknown_6209)]
	cmp.b	#0x01,d0                         	| [$d3d3: cp   $01]
	jne	l_d3de                             	| [$d3d5: jr   nz,$D3DE]
	jbsr	l_fd33                            	| [$d3d7: call $FD33]
	clr.b	d0                               	| [$d3da: xor  a]
	move.b	d0,unknown_6209                 	| [$d3db: ld   (unknown_6209),a]
l_d3de:
	lea	unknown_608F,a2                	| [$d3de: ld   ix,unknown_608F]
	lea	unknown_6157,a3                	| [$d3e2: ld   iy,unknown_6157]
	lea	guard_1_in_elevator_5_62E9,a0                	| [$d3e6: ld   hl,guard_1_in_elevator_5_62E9]
	jbsr	exx                               	| [$d3e9: exx]
	lea	guard_2_struct_6598,a0         	| [$d3ea: ld   hl,guard_2_struct_6598]
	move.l	a0,guard_struct_pointer_6215    	| [$d3ed: ld   (guard_struct_pointer_6215),hl]
	move.w	guard_2_logical_address_6078,d6	| [$d3f0: ld   hl,(guard_2_logical_address_6078)]
	lea	guard_2_in_elevator_607B,a1    	| [$d3f3: ld   de,guard_2_in_elevator_607B]
	move.b	guard_2_screen_609A,d0          	| [$d3f6: ld   a,(guard_2_screen_609A)]
	move.b	d0,current_character_screen_index_6098	| [$d3f9: ld   (current_character_screen_index_6098),a]
	lea		unknown_6212,a4           	| [$d3fc: ld   bc,unknown_6212] None
	jbsr	l_d441                            	| [$d3ff: call $D441]
	jbsr	update_guard_1_screen_address_from_xy_eab1                            	| [$d402: call $EAB1]
	jbsr	l_d481                            	| [$d405: call $D481]
	jeq	l_d41c                             	| [$d408: jr   z,$D41C]
	clr.b	d0                               	| [$d40a: xor  a]
	move.b	d0,guard_1_in_elevator_6037     	| [$d40b: ld   (guard_1_in_elevator_6037),a]
	move.b	unknown_6208,d0                 	| [$d40e: ld   a,(unknown_6208)]
	cmp.b	#0x01,d0                         	| [$d411: cp   $01]
	jne	l_d41c                             	| [$d413: jr   nz,$D41C]
	jbsr	l_fcf4                            	| [$d415: call $FCF4]
	clr.b	d0                               	| [$d418: xor  a]
	move.b	d0,unknown_6208                 	| [$d419: ld   (unknown_6208),a]
l_d41c:
	lea	unknown_604F,a2                	| [$d41c: ld   ix,unknown_604F]
	lea	unknown_6156,a3                	| [$d420: ld   iy,unknown_6156]
	lea	guard_2_in_elevator_5_62ED,a0                	| [$d424: ld   hl,guard_2_in_elevator_5_62ED]
	jbsr	exx                               	| [$d427: exx]
	move.l	#guard_1_struct_6594,guard_struct_pointer_6215         	| [$d428: ld   hl,guard_1_struct_6594]
	move.w	guard_1_logical_address_6038,d6	| [$d42e: ld   hl,(guard_1_logical_address_6038)]
	lea	guard_1_in_elevator_603B,a1    	| [$d431: ld   de,guard_1_in_elevator_603B]
	move.b	guard_1_screen_6099,current_character_screen_index_6098          	| [$d434: ld   a,(guard_1_screen_6099)]
		| [$d437: ld   (current_character_screen_index_6098),a]
	lea		unknown_6211,a4            	| [$d43a: ld   bc,unknown_6211] None
	           	| [$d43a: ld   bc,unknown_6211] None
	jbsr	l_d441                            	| [$d43d: call $D441]
	rts                                    	| [$d440: ret]
l_d441:
	move.b	(A2),d0                    	| [$d441: ld   a,(ix+$00)]
	cmp.b	#0x12,d0                         	| [$d444: cp   $12]
	jcs	l_d45d                             	| [$d446: jr   c,$D45D]
	jbsr	l_d481                            	| [$d448: call $D481]
	jne	l_d4a3                             	| [$d44b: jr   nz,$D4A3]
	move.b	(a1),d0                         	| [$d44d: ld   a,(de)]
	cmp.b	#0x01,d0                         	| [$d44e: cp   $01]
	jeq	l_d4a3                             	| [$d450: jr   z,$D4A3]
	jbsr	exx                               	| [$d452: exx]
	jbsr	read_rom                         	| [$d453: ld   a,(hl)]
	jbsr	exx                               	| [$d454: exx]
	cmp.b	#0x01,d0                         	| [$d455: cp   $01]
	jeq	l_d4a3                             	| [$d457: jr   z,$D4A3]
	move.b	#0x01,d0                        	| [$d459: ld   a,$01]
	move.b	d0,(a4)                         	| [$d45b: ld   (bc),a]
	rts                                    	| [$d45c: ret]
l_d45d:
	move.b	(a4),d0                         	| [$d45d: ld   a,(bc)]
	cmp.b	#0x01,d0                         	| [$d45e: cp   $01]
	jeq	l_d4a9                             	| [$d460: jr   z,$D4A9]
	clr.b	d0                               	| [$d462: xor  a]
	rts                                    	| [$d463: ret]
l_d464:
	jbsr	read_rom                         	| [$d464: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$d465: push hl]
	movem.w	d1/d2,-(sp)                    	| [$d466: push bc]
	                        	| [$d467: ld   bc,$000A] 10
	move.w	#0x0a,d1                        	| [$d467: ld   bc,$000A] 10
	LEA_ROM	       0xD477,a0                      	| [$d46a: ld   hl,$D477]
	jbsr	cpir                              	| [$d46d: cpir]

	movem.w	(sp)+,d1/d2                    	| [$d46f: pop  bc]
	movem.l	(sp)+,a0                        	| [$d470: pop  hl]
	bne.b	0f                               	| [...]
	rts                                    	| [$d471: ret  z] [...]
0:
	clr.b	unknown_6008                               	| [$d472: xor  a]
	                 	| [$d473: ld   (unknown_6008),a]
	rts                                    	| [$d476: ret]

l_d481:
	jbsr	read_rom                         	| [$d481: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$d482: push hl]
	movem.w	d1/d2,-(sp)                    	| [$d483: push bc]
	                        	| [$d484: ld   bc,$0014] 20
	move.w	#0x14,d1                        	| [$d484: ld   bc,$0014] 20
	LEA_ROM	       0xD48F,a0                      	| [$d487: ld   hl,$D48F]
	jbsr	cpir                              	| [$d48a: cpir]
 
	movem.w	(sp)+,d1/d2                    	| [$d48c: pop  bc]
	movem.l	(sp)+,a0                        	| [$d48d: pop  hl]
	rts                                    	| [$d48e: ret]

l_d4a3:
	move.l	guard_struct_pointer_6215,a0	| [$d4a3: ld   hl,(guard_struct_pointer_6215)]
	move.b	#0x22,d0                        	| [$d4a6: ld   a,$22]
	move.b	d0,(a0)                         	| [$d4a8: ld   (hl),a]
* < A4: can be 0 or pointing on ram
l_d4a9:
	move.l	a4,d0
	beq.b	0f
	clr.b	d0                               	| [$d4a9: xor  a]
	move.b	d0,(a4)                         	| [$d4aa: ld   (bc),a]
	move.b	d0,(A2)                    	| [$d4ab: ld   (ix+$00),a]
0:
	move.b	#0x01,d0                        	| [$d4ae: ld   a,$01]
	move.b	d0,(A3)                    	| [$d4b0: ld   (iy+$00),a]
	exg	a1,a0                              	| [$d4b3: ex   de,hl]
	move.w	#0x0004,d3                      	| [$d4b4: ld   de,$0004] 4
	clr.b	d0                               	| [$d4b7: xor  a]
	sub.w	d3,a0                            	| [$d4b8: sbc  hl,de]
	move.b	d0,(a0)                         	| [$d4ba: ld   (hl),a]
	                      	| [$d4bb: ld   hl,$2752]
	* initialize pointer in ROM
	move.w	#0x2752,unknown_6154                 	| [$d4be: ld   (unknown_6154),hl]
	clr.b	d0                               	| [$d4c1: xor  a]
	move.b	d0,unknown_61F5                 	| [$d4c2: ld   (unknown_61F5),a]
	move.b	current_character_screen_index_6098,d0	| [$d4c5: ld   a,(current_character_screen_index_6098)]
	move.b	d0,d1                           	| [$d4c8: ld   b,a]
	move.b	player_screen_600D,d0           	| [$d4c9: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$d4cc: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$d4cd: ret  nz] [...]
0:
* Sound???? TODO
**	LEA_ROM	       0xD9B1,a0                      	| [$d4ce: ld   hl,$D9B1]
**	jbsr	play_sample_EC84                  	| [$d4d1: call play_sample_EC84]
	clr.b	d0                               	| [$d4d4: xor  a]
	move.b	d0,unknown_6153                 	| [$d4d5: ld   (unknown_6153),a]
	rts                                    	| [$d4d8: ret]

is_ay_sound_playing_D4D9:
	moveq	#0,d0
	rts
	
* update sprites for player, wagons, elevator, pickaxe/barrow/dropped bag (not guards)
update_all_sprites_D511:
	            	| [$3df9: ld   a,(io_read_shit_B800)]
	lea	player_struct_6580,a2          	| [$3dfc: ld   ix,player_struct_6580]
	lea	player_shadow_sprite_65A8,a3                	| [$3e00: ld   iy,player_shadow_sprite_65A8]
	jbsr	update_sprite_data_d6d7           	| [$3e04: call update_sprite_data_d6d7]
	lea	elevator_struct_6584,a2                	| [$3e07: ld   ix,elevator_struct_6584]
	lea	elevator_shadow_sprite_65A4,a3                	| [$3e0b: ld   iy,elevator_shadow_sprite_65A4]
	jbsr	update_sprite_data_d6d7           	| [$3e0f: call update_sprite_data_d6d7]
	lea	wagon_1_struct_6588,a2                	| [$3e12: ld   ix,wagon_1_struct_6588]
	lea	wagon_1_shadow_sprite_65AC,a3                	| [$3e16: ld   iy,wagon_1_shadow_sprite_65AC]
	jbsr	update_sprite_data_d6d7           	| [$3e1a: call update_sprite_data_d6d7]
	lea	bullet_shadow_sprite_658C,a2                	| [$3e1d: ld   ix,bullet_shadow_sprite_658C]
	lea	unknown_65B0,a3                	| [$3e21: ld   iy,unknown_65B0]
	jbsr	update_sprite_data_d6d7           	| [$3e25: call update_sprite_data_d6d7]
	lea	wagon_3_shadow_sprite_6590,a2                	| [$3e28: ld   ix,wagon_3_shadow_sprite_6590]
	lea	unknown_65B4,a3                	| [$3e2c: ld   iy,unknown_65B4]
	jbsr	update_sprite_data_d6d7           	| [$3e30: call update_sprite_data_d6d7]
	lea	object_held_struct_659C,a2                	| [$3e33: ld   ix,object_held_struct_659C]
	lea	barrow_sprite_shadow_ram_65A0,a3                	| [$3e37: ld   iy,barrow_sprite_shadow_ram_65A0]
	jbsr	update_sprite_data_d6d7           	| [$3e3b: call update_sprite_data_d6d7]
	clr.b	d0                               	| [$3e3e: xor  a]
	move.w	#0x985F,d6                       	| [$3e3f: ld   ($985F),a]
	jbsr	osd_w_colorram
	move.b	#0x01,d2                        	| [$d55a: ld   c,$01]
	move.b	unknown_61FD,d0                 	| [$d55c: ld   a,(unknown_61FD)]
	cmp.b	#0x01,d0                         	| [$d55f: cp   $01]
	jne	l_d565                             	| [$d561: jr   nz,$D565]
	st.b	d2                                	| [$d563: ld   c,$FF]
l_d565:
	jbsr	l_d8ef                            	| [$d565: call $D8EF]
	move.b	#0x08,d1                        	| [$d568: ld   b,$08]
	move.w	#0x0004,d3                      	| [$d56a: ld   de,$0004] 4
	lea	unknown_65A3,a0                	| [$d56d: ld   hl,unknown_65A3]
l_d570:
	move.b	(a0),d0                         	| [$d570: ld   a,(hl)]
	                         	| [$d571: cp   $00]
	jeq	l_d577                             	| [$d573: jr   z,$D577]
	add.b	d2,d0                            	| [$d575: add  a,c]
	move.b	d0,(a0)                         	| [$d576: ld   (hl),a]
l_d577:
	add.w	d3,a0                            	| [$d577: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_d570                             	| [$d578: djnz $D570]
	lea	wagon_1_shadow_sprite_65AC+3,a0                	| [$d57a: ld   hl,unknown_65AF]
	move.b	#0x03,d1                        	| [$d57d: ld   b,$03]
l_d57f:
	subq.b	#1,(a0)                         	| [$d57f: dec  (hl)]
	add.w	d3,a0                            	| [$d580: add  hl,de]
 	subq.b	#1,d1                           	| [...]
	jne	l_d57f                             	| [$d581: djnz $D57F]
	move.b	d2,d0                           	| [$d583: ld   a,c]
	cmp.b	#0xFF,d0                         	| [$d584: cp   $FF]
	jne	l_d59e                             	| [$d586: jr   nz,$D59E]
	move.b	player_screen_600D,d0           	| [$d588: ld   a,(player_screen_600D)]
	cmp.b	#0x04,d0                         	| [$d58b: cp   $04]
	jne	l_d59e                             	| [$d58d: jr   nz,$D59E]
	move.b	check_scenery_disabled_61ED,d0  	| [$d58f: ld   a,(check_scenery_disabled_61ED)]
	cmp.b	#0x01,d0                         	| [$d592: cp   $01]
	jeq	l_d59e                             	| [$d594: jr   z,$D59E]
	move.b	unknown_65A6,d0                 	| [$d596: ld   a,(unknown_65A6)]
	addq.b	#2,d0                           	| [$d599: inc  a] * 2
	move.b	d0,unknown_65A6                 	| [$d59b: ld   (unknown_65A6),a]
l_d59e:
	rts                                    	| [$d59e: ret]
l_d59f:
	move.b	holds_barrow_61C7,d0            	| [$d59f: ld   a,(holds_barrow_61C7)]
	                         	| [$d5a2: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$d5a4: ret  z] [...]
0:
	move.b	unknown_633A,d0                 	| [$d5a5: ld   a,(unknown_633A)]
	cmp.b	#0x01,d0                         	| [$d5a8: cp   $01]
	jeq	l_d5c0                             	| [$d5aa: jr   z,$D5C0]
	move.b	player_x_6582,d0                	| [$d5ac: ld   a,(player_x_6582)]
	add.b	#0x0E,d0                         	| [$d5af: add  a,$0E]
	move.b	d0,sprite_object_x_659E         	| [$d5b1: ld   (sprite_object_x_659E),a]
	move.b	player_y_6583,d0                	| [$d5b4: ld   a,(player_y_6583)]
	move.b	d0,sprite_object_y_659F         	| [$d5b7: ld   (sprite_object_y_659F),a]
	move.b	#0x3A,d0                        	| [$d5ba: ld   a,$3A]
	move.b	d0,object_held_struct_659C      	| [$d5bc: ld   (object_held_struct_659C),a]
	rts                                    	| [$d5bf: ret]
l_d5c0:
	move.b	player_x_6582,d0                	| [$d5c0: ld   a,(player_x_6582)]
	add.b	#0x0D,d0                         	| [$d5c3: add  a,$0D]
	move.b	d0,sprite_object_x_659E         	| [$d5c5: ld   (sprite_object_x_659E),a]
	move.b	player_y_6583,d0                	| [$d5c8: ld   a,(player_y_6583)]
	addq.b	#0x04,d0                        	| [$d5cb: add  a,$04]
	move.b	d0,sprite_object_y_659F         	| [$d5cd: ld   (sprite_object_y_659F),a]
	move.b	#0x33,d0                        	| [$d5d0: ld   a,$33]
	move.b	d0,object_held_struct_659C      	| [$d5d2: ld   (object_held_struct_659C),a]
	rts                                    	| [$d5d5: ret]
l_d5d6:
	move.b	has_bomb_6311,d0                 	| [$d5d6: ld   a,(has_bomb_6311)]
	                         	| [$d5d9: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$d5db: ret  z] [...]
0:
	move.b	player_struct_6580,d0           	| [$d5dc: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$d5df: and  $7F]
	move.b	#0x02,d1                        	| [$d5e1: ld   b,$02]
	cmp.b	#0x12,d0                         	| [$d5e3: cp   $12]
	jeq	l_d5f4                             	| [$d5e5: jr   z,$D5F4]
	move.b	#0x06,d1                        	| [$d5e7: ld   b,$06]
	move.b	player_struct_6580,d0           	| [$d5e9: ld   a,(player_struct_6580)]
	and.b	#0x80,d0                         	| [$d5ec: and  $80]
	cmp.b	#0x80,d0                         	| [$d5ee: cp   $80]
	jne	l_d5f4                             	| [$d5f0: jr   nz,$D5F4]
	move.b	#0xF9,d1                        	| [$d5f2: ld   b,$F9]
l_d5f4:
	move.b	player_x_6582,d0                	| [$d5f4: ld   a,(player_x_6582)]
	add.b	d1,d0                            	| [$d5f7: add  a,b]
	move.b	d0,sprite_object_x_659E         	| [$d5f8: ld   (sprite_object_x_659E),a]
	move.b	player_y_6583,d0                	| [$d5fb: ld   a,(player_y_6583)]
	move.b	d0,sprite_object_y_659F         	| [$d5fe: ld   (sprite_object_y_659F),a]
	move.b	#0x35,d0                        	| [$d601: ld   a,$35]
	move.b	d0,object_held_struct_659C      	| [$d603: ld   (object_held_struct_659C),a]
	move.b	#0x24,d0                        	| [$d606: ld   a,$24]
	move.b	d0,object_held_color_attrs_659D                 	| [$d608: ld   (object_held_color_attrs_659D),a]
	rts                                    	| [$d60b: ret]
l_d60c:
	tst.b	jail_buddy_free_6343                 	| [$d60c: ld   a,(jail_buddy_free_6343)]
	                         	| [$d60f: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$d611: ret  z] [...]
0:
	move.b	player_struct_6580,d0           	| [$d612: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$d615: and  $7F]
	clr.b	d2                               	| [$d617: ld   c,$00]
	clr.b	d1                               	| [$d619: ld   b,$00]
	cmp.b	#0x12,d0                         	| [$d61b: cp   $12]
	jeq	l_d630                             	| [$d61d: jr   z,$D630]
	move.b	#0x80,d2                        	| [$d61f: ld   c,$80]
	move.b	#0x06,d1                        	| [$d621: ld   b,$06]
	move.b	player_struct_6580,d0           	| [$d623: ld   a,(player_struct_6580)]
	and.b	#0x80,d0                         	| [$d626: and  $80]
	cmp.b	#0x80,d0                         	| [$d628: cp   $80]
	jne	l_d630                             	| [$d62a: jr   nz,$D630]
	clr.b	d2                               	| [$d62c: ld   c,$00]
	move.b	#0xF9,d1                        	| [$d62e: ld   b,$F9]
l_d630:
	move.b	player_x_6582,d0                	| [$d630: ld   a,(player_x_6582)]
	add.b	d1,d0                            	| [$d633: add  a,b]
	move.b	d0,sprite_object_x_659E         	| [$d634: ld   (sprite_object_x_659E),a]
	move.b	player_y_6583,d0                	| [$d637: ld   a,(player_y_6583)]
	addq.b	#0x04,d0                        	| [$d63a: add  a,$04]
	move.b	d0,sprite_object_y_659F         	| [$d63c: ld   (sprite_object_y_659F),a]
	move.b	#0x1B,d0                        	| [$d63f: ld   a,$1B]
	or.b	d2,d0                             	| [$d641: or   c]
	move.b	d0,object_held_struct_659C      	| [$d642: ld   (object_held_struct_659C),a]
	move.b	#0x08,d0                        	| [$d645: ld   a,$08]
	move.b	d0,object_held_color_attrs_659D                 	| [$d647: ld   (object_held_color_attrs_659D),a]
	rts                                    	| [$d64a: ret]
l_d64b:
	move.b	holds_barrow_61C7,d0            	| [$d64b: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d64e: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d650: ret  nz] [...]
0:
	jbsr	l_d6ce                            	| [$d651: call $D6CE]
	move.b	holds_barrow_61C7,d0            	| [$d654: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d657: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d659: ret  nz] [...]
0:
	move.b	#0x08,d1                        	| [$d65a: ld   b,$08]
	jbsr	l_d6b8                            	| [$d65c: call $D6B8]
	move.b	holds_barrow_61C7,d0            	| [$d65f: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d662: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d664: ret  nz] [...]
0:
	move.b	#0x10,d1                        	| [$d665: ld   b,$10]
	jbsr	l_d6c4                            	| [$d667: call $D6C4]
	move.b	holds_barrow_61C7,d0            	| [$d66a: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d66d: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d66f: ret  nz] [...]
0:
	move.b	#0x08,d1                        	| [$d670: ld   b,$08]
	jbsr	l_d6c4                            	| [$d672: call $D6C4]
	move.b	holds_barrow_61C7,d0            	| [$d675: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d678: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d67a: ret  nz] [...]
0:
	move.b	#0x08,d1                        	| [$d67b: ld   b,$08]
	jbsr	l_d6c4                            	| [$d67d: call $D6C4]
	move.b	holds_barrow_61C7,d0            	| [$d680: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d683: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d685: ret  nz] [...]
0:
	move.b	#0x08,d1                        	| [$d686: ld   b,$08]
	jbsr	l_d6c4                            	| [$d688: call $D6C4]
	move.b	holds_barrow_61C7,d0            	| [$d68b: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d68e: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d690: ret  nz] [...]
0:
	move.b	#0x08,d1                        	| [$d691: ld   b,$08]
	jbsr	l_d6c4                            	| [$d693: call $D6C4]
	move.b	#0x08,d1                        	| [$d696: ld   b,$08]
	jbsr	l_d6c4                            	| [$d698: call $D6C4]
	move.b	holds_barrow_61C7,d0            	| [$d69b: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d69e: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d6a0: ret  nz] [...]
0:
	move.b	holds_barrow_61C7,d0            	| [$d6a1: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d6a4: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d6a6: ret  nz] [...]
0:
	move.b	#0x40,d1                        	| [$d6a7: ld   b,$40]
	jbsr	l_d6b8                            	| [$d6a9: call $D6B8]
	move.b	holds_barrow_61C7,d0            	| [$d6ac: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d6af: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$d6b1: ret  nz] [...]
0:
	move.b	#0x08,d1                        	| [$d6b2: ld   b,$08]
	jbsr	l_d6b8                            	| [$d6b4: call $D6B8]
	rts                                    	| [$d6b7: ret]
l_d6b8:
	move.b	sprite_object_x_659E,d0         	| [$d6b8: ld   a,(sprite_object_x_659E)]
	add.b	d1,d0                            	| [$d6bb: add  a,b]
	cmp.b	#0xE0,d0                         	| [$d6bc: cp   $E0]
	bcs.b	0f                               	| [...]
	rts                                    	| [$d6be: ret  nc] [...]
0:
	move.b	d0,sprite_object_x_659E         	| [$d6bf: ld   (sprite_object_x_659E),a]
	jra	l_d6ce                             	| [$d6c2: jr   $D6CE]
l_d6c4:
	move.b	sprite_object_x_659E,d0         	| [$d6c4: ld   a,(sprite_object_x_659E)]
	sub.b	d1,d0                            	| [$d6c7: sub  b]
	cmp.b	#0x10,d0                         	| [$d6c8: cp   $10]
	bcc.b	0f                               	| [...]
	rts                                    	| [$d6ca: ret  c] [...]
0:
	move.b	d0,sprite_object_x_659E         	| [$d6cb: ld   (sprite_object_x_659E),a]
l_d6ce:
	move.b	#0x01,d0                        	| [$d6ce: ld   a,$01]
	move.b	d0,pickup_flag_6160             	| [$d6d0: ld   (pickup_flag_6160),a]
	jbsr	l_dabd                            	| [$d6d3: call $DABD]
	rts                                    	| [$d6d6: ret]
update_sprite_data_d6d7:
	move.b	#0x04,d1                        	| [$d6d7: ld   b,$04]
l_d6d9:
	move.b	(A2)+,(A3)+                    	| [$d6d9: ld   a,(ix+$00)]
	                   	| [$d6dc: ld   (iy+$00),a]
	                          	| [$d6df: inc  ix]
	                          	| [$d6e1: inc  iy]
 	subq.b	#1,d1                           	| [...]
	jne	l_d6d9                             	| [$d6e3: djnz $D6D9]
	rts                                    	| [$d6e5: ret]

* collision with elevator for characters
* guards can't be killed when in elevator if player
* is not in screen 5!
handle_character_collision_with_elevator_5_d6e6:
	move.b	player_screen_600D,d0           	| [$d6e6: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$d6e9: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$d6eb: ret  nz] [...]
0:
	move.b	(0x02,a2),d0                    	| [$d6ec: ld   a,(ix+$02)]
	cmp.b	#0xA9,d0                         	| [$d6ef: cp   $A9]
	bcc.b	0f                               	| [...]
	rts                                    	| [$d6f1: ret  c] [...]
0:
	* X high enough: consider character in elevator
	move.b	elevator_5_y_62E3,d0                 	| [$d6f2: ld   a,(elevator_5_y_62E3)]
	add.b	#0x08,d0                         	| [$d6f5: add  a,$08]
	move.b	d0,d1                           	| [$d6f7: ld   b,a]
	add.b	#0x08,d0                         	| [$d6f8: add  a,$08]
	move.b	d0,d2                           	| [$d6fa: ld   c,a]
	move.b	(0x03,a2),d0                    	| [$d6fb: ld   a,(ix+$03)]
	cmp.b	d1,d0                            	| [$d6fe: cp   b]
	bcc.b	0f                               	| [...]
	rts                                    	| [$d6ff: ret  c] [...]
0:
	cmp.b	d2,d0                            	| [$d700: cp   c]
	bcs.b	0f                               	| [...]
	rts                                    	| [$d701: ret  nc] [...]
0:
	move.b	#0x01,d0                        	| [$d702: ld   a,$01]
	* kill character if Y elevator "inside" character Y box 
	move.b	d0,(A3)                    	| [$d704: ld   (iy+$00),a]
	rts                                    	| [$d707: ret]

handle_characters_in_elevator_5_d708:
	move.b	player_screen_600D,d0           	| [$d708: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$d70b: cp   $05]
	jne	l_d71a                             	| [$d70d: jr   nz,$D71A]
	lea	player_struct_6580,a2          	| [$d70f: ld   ix,player_struct_6580]
	lea	player_death_flag_6025,a3      	| [$d713: ld   iy,player_death_flag_6025]
	jbsr	handle_character_collision_with_elevator_5_d6e6                            	| [$d717: call $D6E6]

	* in case player is killed in routine above, clear flag
	jbsr  is_invincible
	beq.b	0f
	clr.b	player_death_flag_6025
0:
l_d71a:
	move.b	guard_1_screen_6099,d0          	| [$d71a: ld   a,(guard_1_screen_6099)]
	cmp.b	#0x05,d0                         	| [$d71d: cp   $05]
	jne	l_d72c                             	| [$d71f: jr   nz,$D72C]
	lea	guard_1_struct_6594,a2         	| [$d721: ld   ix,guard_1_struct_6594]
	lea	guard_1_death_flag_629F,a3                	| [$d725: ld   iy,guard_1_death_flag_629F]
	jbsr	handle_character_collision_with_elevator_5_d6e6                            	| [$d729: call $D6E6]
l_d72c:
	move.b	guard_2_screen_609A,d0          	| [$d72c: ld   a,(guard_2_screen_609A)]
	cmp.b	#0x05,d0                         	| [$d72f: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$d731: ret  nz] [...]
0:
	lea	guard_2_struct_6598,a2         	| [$d732: ld   ix,guard_2_struct_6598]
	lea	guard_2_death_flag_62A7,a3                	| [$d736: ld   iy,guard_2_death_flag_62A7]
	jbsr	handle_character_collision_with_elevator_5_d6e6                            	| [$d73a: call $D6E6]
	rts                                    	| [$d73d: ret]
l_d73e:
	move.b	holds_barrow_61C7,d0            	| [$d73e: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$d741: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$d743: ret  z] [...]
0:
	move.b	has_pick_61CF,d0                	| [$d744: ld   a,(has_pick_61CF)]
	cmp.b	#0x01,d0                         	| [$d747: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$d749: ret  z] [...]
0:
	move.b	has_bomb_6311,d0                 	| [$d74a: ld   a,(has_bomb_6311)]
	cmp.b	#0x01,d0                         	| [$d74d: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$d74f: ret  z] [...]
0:
	move.b	has_bag_6158,d0                 	| [$d750: ld   a,(has_bag_6158)]
	cmp.b	#0x01,d0                         	| [$d753: cp   $01]
	rts                                    	| [$d755: ret]
l_d756:
	clr.b	guard_2_not_moving_timeout_counter_6097	| [$d757: ld   (guard_2_not_moving_timeout_counter_6097),a]
	clr.b	unknown_6288                 	| [$d75a: ld   (unknown_6288),a]
	clr.b	unknown_6008                 	| [$d75d: ld   (unknown_6008),a]
	clr.b	player_almost_in_elevator_4_6013                 	| [$d760: ld   (player_almost_in_elevator_4_6013),a]
	clr.b	player_in_wagon_flag_6029    	| [$d763: ld   (player_in_wagon_flag_6029),a]
	clr.b	player_gripping_handle_602A  	| [$d766: ld   (player_gripping_handle_602A),a]
	clr.b	fatal_fall_height_reached_604E	| [$d769: ld   (fatal_fall_height_reached_604E),a]
	clr.b	guard_2_in_elevator_6077     	| [$d76c: ld   (guard_2_in_elevator_6077),a]
	clr.b	player_controls_frozen_6028  	| [$d76f: ld   (player_controls_frozen_6028),a]
	clr.w	pickaxe_timer_duration_61E0  	| [$d772: ld   (pickaxe_timer_duration_61E0),a]
											| [$d775: ld   (unknown_61E1),a]
	clr.b	player_in_elevator_4_6014                 	| [$d778: ld   (player_in_elevator_4_6014),a]
	clr.b	player_almost_in_elevator_4_6013                 	| [$d77b: ld   (player_almost_in_elevator_4_6013),a]
	clr.b	unknown_62B5                 	| [$d77e: ld   (unknown_62B5),a]
	clr.b	unknown_62B6                 	| [$d781: ld   (unknown_62B6),a]
	clr.b	unknown_62B9                 	| [$d784: ld   (unknown_62B9),a]
	clr.b	unknown_62BA                 	| [$d787: ld   (unknown_62BA),a]
	clr.b	unknown_62AF                 	| [$d78a: ld   (unknown_62AF),a]
	clr.b	unknown_62B0                 	| [$d78d: ld   (unknown_62B0),a]
	clr.b	unknown_62D2                 	| [$d790: ld   (unknown_62D2),a]
	clr.b	unknown_62D6                 	| [$d793: ld   (unknown_62D6),a]
	clr.b	unknown_62DA                 	| [$d796: ld   (unknown_62DA),a]
	clr.b	player_inertia_after_slide_62D3                 	| [$d799: ld   (player_inertia_after_slide_62D3),a]
	clr.b	unknown_62BD                 	| [$d79c: ld   (unknown_62BD),a]
	clr.w	picked_up_object_screen_address_61F6	| [$d79f: ld   (picked_up_object_screen_address_61F6),a]
	                 	| [$d7a2: ld   (unknown_61F7),a]
	clr.b	has_bomb_6311                 	| [$d7a5: ld   (has_bomb_6311),a]
	rts                                    	| [$d7a8: ret]

check_if_must_award_gun_d7a9:
	tst.b	guns_at_start_flag
	bne.b	0f
	move.b	act_number_60D3,d0                 	| [$d7a9: ld   a,(act_number_60D3)]
	cmp.b	#0x02,d0                         	| [$d7ac: cp   $02]
	bcc.b	0f                               	| [...]
	rts                                    	| [$d7ae: ret  c] [...]
0:
	* from level 2, gun is awarded, but guards can
	* also shoot on sight
	move.b	#0x06,d0                        	| [$d7af: ld   a,$06]
	move.b	d0,player_gun_nb_shots_6294                 	| [$d7b1: ld   (player_gun_nb_shots_6294),a]
	move.b	d0,guard_1_gun_nb_shots_629C                 	| [$d7b4: ld   (guard_1_gun_nb_shots_629C),a]
	move.b	d0,guard_2_gun_nb_shots_62A4                 	| [$d7b7: ld   (guard_2_gun_nb_shots_62A4),a]
	move.b	#0x01,d0                        	| [$d7ba: ld   a,$01]
	move.b	d0,player_has_gun_6293                 	| [$d7bc: ld   (player_has_gun_6293),a]
	move.b	d0,guard_1_has_gun_629B                 	| [$d7bf: ld   (guard_1_has_gun_629B),a]
	move.b	d0,guard_2_has_gun_62A3                 	| [$d7c2: ld   (guard_2_has_gun_62A3),a]
	move.b	d0,guards_shoot_on_sight_6299                 	| [$d7c5: ld   (guards_shoot_on_sight_6299),a]
	rts                                    	| [$d7c8: ret]

clear_misc_variables_d7c9:	                               	| [$d7c9: xor  a]
	clr.b	holds_barrow_61C7            	| [$d7ca: ld   (holds_barrow_61C7),a]
	clr.b	has_pick_61CF                	| [$d7cd: ld   (has_pick_61CF),a]
	clr.b	player_in_elevator_4_6014                 	| [$d7d0: ld   (player_in_elevator_4_6014),a]
	clr.b	player_in_wagon_1_601C       	| [$d7d3: ld   (player_in_wagon_1_601C),a]
	clr.b	has_bag_6158                 	| [$d7d6: ld   (has_bag_6158),a]
	clr.b	unknown_6340                 	| [$d7d9: ld   (unknown_6340),a]
	clr.b	is_key_hunt_phase_6341                 	| [$d7dc: ld   (is_key_hunt_phase_6341),a]
	move.b	#0x01,d0                        	| [$d7df: ld   a,$01]
	move.b	d0,act_number_60D3                 	| [$d7e1: ld   (act_number_60D3),a]
	move.b	d0,unknown_61B6                 	| [$d7e4: ld   (unknown_61B6),a]
	rts                                    	| [$d7e7: ret]
	
scroll_text_up_d7e8:
	* save d6, not a2
	move.w	d6,-(sp)                        	| [$d7e8: push ix]
	move.w	d0,-(sp)                        	| [$d7ea: push af]
	movem.w	d3/d4,-(sp)                    	| [$d7eb: push de]
	move.l	a1,-(sp)                        	| [$d7eb: push de]
	movem.w	d1/d2,-(sp)                    	| [$d7ec: push bc]
	move.w	#0x9001,d5                      	| [$d7ed: ld   ix,$9001]
	move.w	#0x9000,d6                      	| [$d7f1: ld   iy,$9000]
	move.w	#0x0020,d3                      	| [$d7f5: ld   de,$0020] 32
	move.b	#0x20,d1                        	| [$d7f8: ld   b,$20]
l_d7fa:
	* scroll 32 columns
	move.w	d5,-(sp)                        	| [$d7fa: push ix]
	move.w	d6,-(sp)                        	| [$d7fc: push iy]
	movem.w	d1/d2,-(sp)                    	| [$d7fe: push bc]
	* scroll column
	move.b	#0x1F,d1                        	| [$d7ff: ld   b,$1F]
l_d801:
	exg	d5,d6
	jbsr	osd_r_videoram                    	| [$d801: ld   a,(ix+$00)]
	exg	d5,d6
*	move.b	d0,d2                           	| [$d804: ld   c,a]
*	jbsr	osd_r_videoram                    	| [$d805: ld   a,(ix+$00)]
*	cmp.b	d2,d0                            	| [$d808: cp   c]
*	jne	l_d801                             	| [$d809: jr   nz,$D801]
	jbsr	osd_w_videoram                    	| [$d80b: ld   (iy+$00),a]
	addq.w	#1,d5                           	| [$d80e: inc  ix]
	addq.w	#1,d6                           	| [$d810: inc  iy]
 	subq.b	#1,d1                           	| [...]
	jne	l_d801                             	| [$d812: djnz $D801]
	move.b	#0x0A,d0                        	| [$d814: ld   a,$0A]
	jbsr	osd_w_videoram                    	| [$d816: ld   (iy+$00),a]

	movem.w	(sp)+,d1/d2                    	| [$d819: pop  bc]
	move.w	(sp)+,d6                        	| [$d81a: pop  iy]
	move.w	(sp)+,d5                        	| [$d81c: pop  ix]
	add.w	d3,d6                            	| [$d81e: add  ix,de]
	add.w	d3,d5                            	| [$d820: add  iy,de]
 	subq.b	#1,d1                           	| [...]
	jne	l_d7fa                             	| [$d822: djnz $D7FA]

	movem.w	(sp)+,d1/d2                    	| [$d824: pop  bc]
	move.l	(sp)+,a1                        	| [$d825: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$d825: pop  de]
	move.w	(sp)+,d0                        	| [$d826: pop  af]
	move.w	(sp)+,d6                        	| [$d827: pop  ix]
	rts                                    	| [$d829: ret]

* < A2 text to write with type/scroll effect

tell_the_story_d82a:
	* jotd: added this else guard/whatever sprite remains

	jbsr	zero_sprites

	clr.b	d0                               	| [$d82a: xor  a]
	move.b	#0x20,d1                        	| [$d82b: ld   b,$20]
	move.w	#0x9800,d6                      	| [$d82d: ld   hl,$9800]
l_d830:
	jbsr	osd_w_colorram                         	| [$d830: ld   (hl),a]
	addq.w	#1,d6                           	| [$d831: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_d830                             	| [$d832: djnz $D830]
	move.w	#0x985F,d6                       	| [$d834: ld   ($985F),a]
	jbsr	osd_w_colorram
	
	jbsr	osd_enable_display                        	| [$d837: ld   a,$01]
	                    	| [$d839: ld   ($A003),a]
	jbsr	hw_video_shit_d8e2                            	| [$d83c: call $D8E2]
	move.w	#0x93B0,d6                      	| [$d83f: ld   hl,$93B0]
	move.w	d6,unknown_screen_address_632F                 	| [$d842: ld   (unknown_screen_address_632F),hl]
	jbsr	osd_enable_vblank_interrupt		| im   1
									| ei
                      	| [$d848: ld   a,$01]
	     	| [$d84a: ld   (interrupt_control_A000),a]
l_d84d:
	move.b	(A2),d0                    	| [$d84d: ld   a,(ix+$00)]
	cmp.b	#0xFF,d0                         	| [$d850: cp   $FF]
	* end of text
	jeq	l_d873                             	| [$d852: jr   z,$D873]
	jbsr	display_char_with_type_effect_d8a2                            	| [$d854: call $D8A2]
	jbsr	wait_for_type_effect_d8d4                            	| [$d857: call $D8D4]
	addq.w	#1,a2                           	| [$d85a: inc  ix]
 	move.b	(A2),d0                    	| [$d85c: ld   a,(ix+$00)]
	cmp.b	#0xFE,d0                         	| [$d85f: cp   $FE]
	bne.b	0f                               	| [...]
	* new line
	jbsr	scroll_text_d886                            	| [$d861: call z,$D886]
0:
	* if flag is set, then continue even if credits are > 0
	* (required for intermission texts)
	move.b	ignore_if_has_credits_6342,d0                 	| [$d864: ld   a,(ignore_if_has_credits_6342)]
	cmp.b	#0x01,d0                         	| [$d867: cp   $01]
	jeq	l_d84d                             	| [$d869: jr   z,$D84D]
	tst.b	number_of_credits_6000       	| [$d86b: ld   a,(number_of_credits_6000)]
	                         	| [$d86e: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$d870: ret  nz] [...]
0:
	jra	l_d84d                             	| [$d871: jr   $D84D]
l_d873:
	jbsr	wait_for_type_effect_d8d4                            	| [$d873: call $D8D4]
	jbsr	wait_for_type_effect_d8d4                            	| [$d876: call $D8D4]
	jbsr	wait_for_type_effect_d8d4                            	| [$d879: call $D8D4]
	jbsr	wait_for_type_effect_d8d4                            	| [$d87c: call $D8D4]
	jbsr	wait_for_type_effect_d8d4                            	| [$d87f: call $D8D4]
	jbsr	wait_for_type_effect_d8d4                            	| [$d882: call $D8D4]
	rts                                    	| [$d885: ret]
	
scroll_text_d886:
	move.w	unknown_screen_address_632F,d6             	| [$d886: ld   hl,(unknown_screen_address_632F)]
	move.w	d0,-(sp)                        	| [$d889: push af]
	move.b	d6,d0                           	| [$d88a: ld   a,l]
	cmp.b	#0xBF,d0                         	| [$d88b: cp   $BF]
	jne	l_d894                             	| [$d88d: jr   nz,$D894]
	jbsr	scroll_text_up_d7e8                            	| [$d88f: call $D7E8]
	jra	l_d895                             	| [$d892: jr   $D895]
l_d894:
	* next row
	addq.w	#1,D6                           	| [$d894: inc  hl]
l_d895:
	move.w	d6,unknown_screen_address_632F                 	| [$d895: ld   (unknown_screen_address_632F),hl]
	move.w	(sp)+,d0                        	| [$d898: pop  af]
	addq.w	#1,a2                           	| [$d899: inc  ix]
	jbsr	scroll_text_up_d7e8                            	| [$d89b: call $D7E8]
	jbsr	small_wait_d8cd                            	| [$d89e: call $D8CD]
	rts                                    	| [$d8a1: ret]

display_char_with_type_effect_d8a2:
	move.b	(A2),d0                    	| [$d8a2: ld   a,(ix+$00)]
	sub.b	#0x30,d0                         	| [$d8a5: sub  $30]
	cmp.b	#0x0A,d0                         	| [$d8a7: cp   $0A]
	bne.b	0f                               	| [...]
	jbsr	wait_for_type_effect_d8d4                            	| [$d8a9: call z,$D8D4]
0:
	* code writes below 9000
	cmp.w	#0x9000,d6
	bcs.b	0f
	cmp.w	#0x9400,d6
	bcc.b	0f
	jbsr	osd_w_videoram                         	| [$d8ac: ld   (hl),a]
0:
	cmp.b	#0x0A,d0                         	| [$d8ad: cp   $0A]
	beq.b	0f                               	| [...]
	jbsr	play_type_sample_d8c0                            	| [$d8af: call nz,$D8C0]
0:

	move.w	d6,-(sp)                        	| [$d8b2: push hl]
	                      	| [$d8b3: ld   de,$0800]
	add.w	#0x800,d6                            	| [$d8b6: add  hl,de]
	move.b	#0x04,d0                        	| [$d8b7: ld   a,$04]
	cmp.w	#0x9800,d6
	bcs.b	0f
	cmp.w	#0x9C00,d6
	bcc.b	0f
	jbsr	osd_w_colorram                         	| [$d8b9: ld   (hl),a]
0:
	move.w	(sp)+,d6                        	| [$d8ba: pop  hl]
	                     	| [$d8bb: ld   de,$FFE0]
	* next X
	sub.w	#0x20,d6                            	| [$d8be: add  hl,de]
 	rts                                    	| [$d8bf: ret]
	
play_type_sample_d8c0:
	move.l	a0,-(sp)                        	| [$d8c0: push hl]
	movem.w	d1/d2,-(sp)                    	| [$d8c1: push bc]
	movem.w	d3/d4,-(sp)                    	| [$d8c2: push de]
	move.l	a1,-(sp)                        	| [$d8c2: push de]
	move.w	#TYPING_SND,d0                      	| [$d8c3: ld   hl,$D97B]
	jbsr	start_a_sound                  	| [$d8c6: call play_sample_EC84]
	move.l	(sp)+,a1                        	| [$d8c9: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$d8c9: pop  de]

	movem.w	(sp)+,d1/d2                    	| [$d8ca: pop  bc]
	move.l	(sp)+,a0                        	| [$d8cb: pop  hl]
	rts                                    	| [$d8cc: ret]
	
small_wait_d8cd:
	                        	| [$d8cd: push hl]
	move.w	d0,-(sp)                        	| [$d8ce: push af]
						| [$d8cf: ld   hl,number_of_credits_6000]
	move.w	#40,d0                               	| [$d8d2: jr   $D8D9]
	jbsr	osd_wait
	move.w	(sp)+,d0   
	   	
	rts
		
wait_for_type_effect_d8d4:

	                        	| [$d8d4: push hl]
	move.w	d0,-(sp)                        	| [$d8d5: push af]
	* approx
	move.w	#8,d0                      	| [$d8d6: ld   hl,$3000]
	jbsr	osd_wait				                           	| [$d8d9: dec  hl]
 	                           	| [$d8da: ld   a,h]
	                       	| [$d8db: cp   $00]
	                           	| [$d8dd: jr   nz,$D8D9]
	move.w	(sp)+,d0                        	| [$d8df: pop  af]
	                        	| [$d8e0: pop  hl]
	rts                                    	| [$d8e1: ret]
hw_video_shit_d8e2:
	move.w	d0,-(sp)                        	| [$d8e2: push af]

	*move.b	d0,0xA001                       	| [$d8e7: ld   ($A001),a]
	*move.b	d0,0xA002                       	| [$d8ea: ld   ($A002),a]
 	move.w	(sp)+,d0                        	| [$d8ed: pop  af]
	rts                                    	| [$d8ee: ret]
l_d8ef:
	rts                                    	| [$d8ef: ret]
	
* new code, not in bagman!

l_d9b7:
	move.l	unknown_pointer_633D,a0
	move.b	(a0),d0                         	| [$d9ba: ld   a,(hl)]
	cmp.b	#0x01,d0                         	| [$d9bb: cp   $$01]
	jne	l_d9cc                             	| [$d9bd: jr   nz,$$D9CC]
	move.b	(a0)+,d0                         	| [$d9bf: ld   a,(hl)]
										| [$d9c0: inc  hl]
	move.b	d0,(a0)                         	| [$d9c1: ld   (hl),a]
	move.l	unknown_pointer_6146,a0     	| [$d9c2: ld   hl,(unknown_pointer_6146)]
	                           	| [$d9c5: inc  hl] * 4
	* 4 becomes 6 (32 bit pointer in 6146)
	clr.b	d0                               	| [$d9c9: xor  a]
	move.b	d0,(6,a0)                         	| [$d9ca: ld   (hl),a]
	rts                                    	| [$d9cb: ret]
l_d9cc:

	move.l	a3,-(sp)                        	| [$d9cc: push iy]
	LEA_ROM	       0x23A8,a3                      	| [$d9ce: ld   iy,$23A8]
l_d9d2:
	LOAD_AX_BE_WORD_DY	a3,d6
	      	| [$d9d2: ld   a,(iy+$00)]
	           	| [$d9d5: ld   h,a]
	           	| [$d9d6: ld   a,(iy+$01)]
	           	| [$d9d9: ld   l,a]
	            	| [$d9da: xor  a]
	cmp.w	d3,d6                            	| [$d9db: sbc  hl,de]
	jeq	l_d9f3                             	| [$d9dd: jr   z,$D9F3]
	addq.w	#2,a3                           	| [$d9df: inc  iy] * 2
	move.b	(0x01,a3),d0                    	| [$d9e3: ld   a,(iy+$01)]
	cmp.b	#0xFF,d0                         	| [$d9e6: cp   $FF]
	jne	l_d9d2                             	| [$d9e8: jr   nz,$D9D2]
	move.l	unknown_pointer_633D,a0             	| [$d9ea: ld   hl,(unknown_633D)]
	move.b	(a0)+,d0                         	| [$d9ed: ld   a,(hl)]
	                           	| [$d9ee: inc  hl]
	move.b	d0,(a0)                         	| [$d9ef: ld   (hl),a]
	move.l	(sp)+,a3                        	| [$d9f0: pop  iy]
	rts                                    	| [$d9f2: ret]
l_d9f3:
	move.l	(sp)+,a3                        	| [$d9f3: pop  iy]
	move.l	unknown_pointer_633D,a0             	| [$d9f5: ld   hl,(unknown_633D)]
	                           	| [$d9f8: inc  hl]
	move.b	(a0)+,d0                         	| [$d9f9: ld   a,(hl)]
	move.l	unknown_pointer_6146,a0     	| [$d9fa: ld   hl,(unknown_pointer_6146)]
	cmp.b	#0x01,d0                         	| [$d9fd: cp   $01]
	jne	l_da22                             	| [$d9ff: jr   nz,$DA22]
	move.l	guard_direction_pointer_6095,a0	| [$da01: ld   hl,(guard_direction_pointer_6095)]
	move.b	#0x40,d0                        	| [$da04: ld   a,$40]
	move.b	d0,(a0)                         	| [$da06: ld   (hl),a]
	rts                                    	| [$da07: ret]
l_da08:
	move.b	#0x80,d1                        	| [$da08: ld   b,$80]
	move.b	(0x03,a3),d0                    	| [$da0a: ld   a,(iy+$03)]
	cmp.b	#0x98,d0                         	| [$da0d: cp   $98]
	jeq	l_da13                             	| [$da0f: jr   z,$DA13]
	move.b	#0x40,d1                        	| [$da11: ld   b,$40]
l_da13:
	move.l	guard_direction_pointer_6095,a0	| [$da13: ld   hl,(guard_direction_pointer_6095)]
	move.b	d1,d0                           	| [$da16: ld   a,b]
	move.b	d0,(a0)                         	| [$da17: ld   (hl),a]
	move.l	unknown_pointer_6146,a0     	| [$da18: ld   hl,(unknown_pointer_6146)]
	* was 4 but now 6 because of 32 bit pointer
	addq.w	#6,a0                           	| [$da1b: inc  hl] * 4
	clr.b	d0                               	| [$da1f: xor  a]
	move.b	d0,(a0)                         	| [$da20: ld   (hl),a]
	rts                                    	| [$da21: ret]
l_da22:
	move.b	player_screen_600D,d0           	| [$da22: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$da25: cp   $05]
	jne	l_da08                             	| [$da27: jr   nz,$DA08]
	move.b	(0x03,a3),d0                    	| [$da29: ld   a,(iy+$03)]
	* was 4 but now 6 because of 32 bit pointer in 6146 that I'm starting
	* to regret now... I should have kept 16 bit and add absolute address
	* to keep size the same
	addq.w	#6,a0                           	| [$da2c: inc  hl] * 4
	move.b	d0,d1                           	| [$da30: ld   b,a]
	move.b	elevator_5_y_62E3,d0                 	| [$da31: ld   a,(elevator_5_y_62E3)]
	cmp.b	d1,d0                            	| [$da34: cp   b]
	jeq	l_da4c                             	| [$da35: jr   z,$DA4C]
	subq.b	#1,d0                           	| [$da37: dec  a]
	cmp.b	d1,d0                            	| [$da38: cp   b]
	jeq	l_da4c                             	| [$da39: jr   z,$DA4C]
	move.b	#0x01,d0                        	| [$da3b: ld   a,$01]
	move.b	d0,(a0)                         	| [$da3d: ld   (hl),a]
	* compute the offset between start of memory address 6144 and current
	* but we added 6 not 4 because of pointer in 6146 which is now 32 bit	
	move.l	a0,d0                           	| [$da3e: ld   a,l]
	lea	guard_1_not_moving_timeout_counter_6057,a0	| [$da3f: ld   hl,guard_1_not_moving_timeout_counter_6057]
	* 48 is LSB of 6148, better compare address directly to avoid issues
	* (if wrong guard select, guard can disappear while waiting for the elevator)
	cmp.l	#guard_1_not_moving_flag_6148,d0                         	| [$da42: cp   $48]
	jeq	l_da49                             	| [$da44: jr   z,$DA49]
	* d0=guard_2_not_moving_flag_6149 (what else?) so we're processing guard 2
	lea	guard_2_not_moving_timeout_counter_6097,a0	| [$da46: ld   hl,guard_2_not_moving_timeout_counter_6097]
l_da49:
	* we're processing guard 1
	clr.b	d0                               	| [$da49: xor  a]
	move.b	d0,(a0)                         	| [$da4a: ld   (hl),a]
	rts                                    	| [$da4b: ret]
l_da4c:
	clr.b	d0                               	| [$da4c: xor  a]
	move.b	d0,(a0)                         	| [$da4d: ld   (hl),a]
	move.w	guard_direction_pointer_6095,a0	| [$da4e: ld   hl,(guard_direction_pointer_6095)]
	move.b	#0x80,d0                        	| [$da51: ld   a,$80]
	move.b	d0,(a0)                         	| [$da53: ld   (hl),a]
	rts                                    	| [$da54: ret]
l_da55:
	move.b	bomb_just_dropped_6334,d0                 	| [$da55: ld   a,(bomb_just_dropped_6334)]
	cmp.b	#0x01,d0                         	| [$da58: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$da5a: ret  z] [...]
0:
	move.w	screen_base_screen_address_6326,d6             	| [$da5b: ld   hl,(screen_base_screen_address_6326)]
	bne.b	0f
	rts			| jotd protect against zero
0:
	jbsr	osd_r_videoram                         	| [$da5e: ld   a,(hl)]
	cmp.b	#0xD4,d0                         	| [$da5f: cp   $D4]
	jeq	l_da6a                             	| [$da61: jr   z,$DA6A]
	move.b	#0xD4,d0                        	| [$da63: ld   a,$D4]
	exg	d0,d7                              	| [$da65: ex   af,af']

	move.b	#0x24,d0                        	| [$da66: ld   a,$24]
	jra	l_da6f                             	| [$da68: jr   $DA6F]
l_da6a:
	move.b	#0xD0,d0                        	| [$da6a: ld   a,$D0]
	exg	d0,d7                              	| [$da6c: ex   af,af']

	move.b	#0x2C,d0                        	| [$da6d: ld   a,$2C]
l_da6f:
	exg	d0,d7                              	| [$da6f: ex   af,af']

	jbsr	osd_w_videoram                         	| [$da70: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$da71: push hl]
	                        	| [$da72: push af]
	                           	| [$da73: ld   a,h]
	add.w	#0x0800,d6                         	| [$da74: add  a,$08]
	                           	| [$da76: ld   h,a]
	                        	| [$da77: pop  af]
	exg	d0,d7                              	| [$da78: ex   af,af']

	jbsr	osd_w_colorram                         	| [$da79: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$da7a: pop  hl]
	move.w	#0x0020,d3                      	| [$da7b: ld   de,$0020] 32
	add.w	d3,d6                            	| [$da7e: add  hl,de]
	exg	d0,d7                              	| [$da7f: ex   af,af']

	addq.b	#2,d0                           	| [$da80: inc  a] * 2
	jbsr	osd_w_videoram                         	| [$da82: ld   (hl),a]
	                           	| [$da83: ld   a,h]
	add.w	#0x0800,d6                         	| [$da84: add  a,$08]
	                          	| [$da86: ld   h,a]
	exg	d0,d7                              	| [$da87: ex   af,af']

	jbsr	osd_w_colorram                         	| [$da88: ld   (hl),a]
	rts                                    	| [$da89: ret]
	
handle_pick_hold_timer_DA8A:
	tst.b	has_pick_61CF                	| [$da8a: ld   a,(has_pick_61CF)]
	                         	| [$da8d: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$da8f: ret  z] [...]
0:
	move.w	pickaxe_timer_duration_61E0,d5	| [$da90: ld   hl,(pickaxe_timer_duration_61E0)]
								| [$da93: ld   a,l]
								| [$da94: cp   $00]
								| [$da96: jr   nz,$DA9E]
								| [$da98: ld   a,h]
								| [$da99: cp   $00]
	jne	l_da9e                             	| [$da9b: jr   nz,$DA9E]
	* player not holding the pick, do nothing
	rts                                    	| [$da9d: ret]
l_da9e:
	tst.b	infinite_pickaxe_time_flag
	beq.b	0f
	rts
0:
	* increase pick timer (16 bit)
	addq.w	#1,d5                           	| [$da9e: inc  hl]
	move.w	d5,pickaxe_timer_duration_61E0  	| [$da9f: ld   (pickaxe_timer_duration_61E0),hl]
	                      	| [$daa2: ld   de,$01FF]
	cmp.w	#0x01FF,d5                            	| [$daa5: sbc  hl,de]
	beq.b	0f                               	| [...]
	rts                                    	| [$daa7: ret  nz] [...]
0:
	* timeout: lose the pickaxe
	                      	| [$daa8: ld   hl,$0000] 0
	* reset pickaxe timer properly (not only LSB)
	clr.w	pickaxe_timer_duration_61E0  	| [$daab: ld   (pickaxe_timer_duration_61E0),hl]
					| [$daae: ld   a,$00]
	lea	current_pickaxe_screen_params_61CC,a2	| [$dab0: ld   ix,current_pickaxe_screen_params_61CC]
	clr.b	(0x03,a2)                    	| [$dab4: ld   (ix+$03),a]
                               	| [$dab7: ld   a,$FF]
	st.b	sprite_object_y_659F         	| [$dab9: ld   (sprite_object_y_659F),a]
	rts                                    	| [$dabc: ret]

l_dabd:
	move.b	pickup_flag_6160,d0             	| [$dabd: ld   a,(pickup_flag_6160)]
	cmp.b	#0x01,d0                         	| [$dac0: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$dac2: ret  nz] [...]
0:
	move.b	bomb_just_dropped_6334,d0                 	| [$dac3: ld   a,(bomb_just_dropped_6334)]
	cmp.b	#0x01,d0                         	| [$dac6: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$dac8: ret  z] [...]
0:
	move.b	has_pick_61CF,d0                	| [$dac9: ld   a,(has_pick_61CF)]
	cmp.b	#0x01,d0                         	| [$dacc: cp   $01]
	jeq	l_daf8                             	| [$dace: jr   z,$DAF8]
	move.b	has_bag_6158,d0                 	| [$dad0: ld   a,(has_bag_6158)]
	cmp.b	#0x01,d0                         	| [$dad3: cp   $01]
	jeq	l_daf8                             	| [$dad5: jr   z,$DAF8]
	move.b	has_bomb_6311,d0                 	| [$dad7: ld   a,(has_bomb_6311)]
	cmp.b	#0x01,d0                         	| [$dada: cp   $01]
	jeq	l_db65                             	| [$dadc: jp   z,$DB65]
	* player doesn't hold any object: check if can
	* take barrow
	lea		holds_barrow_61C7,a4       	| [$dadf: ld   bc,holds_barrow_61C7] None
	lea	barrow_screen_params_61C4,a3   	| [$dae2: ld   iy,barrow_screen_params_61C4]
	move.b	#0x3A,d0                        	| [$dae6: ld   a,$3A]
	move.b	d0,(0x04,a3)                    	| [$dae8: ld   (iy+$04),a]
	move.b	#0x28,d0                        	| [$daeb: ld   a,$28]
	move.b	d0,(0x05,a3)                    	| [$daed: ld   (iy+$05),a]
	move.b	#0xEC,d0                        	| [$daf0: ld   a,$EC]
	move.b	d0,unknown_61CA                 	| [$daf2: ld   (unknown_61CA),a]
	jbsr	check_object_pickup_FBCC          	| [$daf5: call check_object_pickup_FBCC]
l_daf8:
	move.b	#0x04,d1                        	| [$daf8: ld   b,$04]
	lea	struct_swap_buffer_61D0,a3     	| [$dafa: ld   iy,struct_swap_buffer_61D0]
	move.b	holds_barrow_61C7,d0            	| [$dafe: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$db01: cp   $01]
	* skips if barrow was just taken
	jeq	l_db4f                             	| [$db03: jp   z,$DB4F]
l_db06:
	* player doesn't hold any object: check if can
	* take pickaxes of this screen
	movem.w	d1/d2,-(sp)                    	| [$db06: push bc]

	move.l	a3,-(sp)                        	| [$db07: push iy]
	lea		has_pick_61CF,a4           	| [$db09: ld   bc,has_pick_61CF] None
	lea	current_pickaxe_screen_params_61CC,a3	| [$db0c: ld   iy,current_pickaxe_screen_params_61CC]
	move.b	#0x37,d0                        	| [$db10: ld   a,$37]
	move.b	d0,(0x04,a3)                    	| [$db12: ld   (iy+$04),a]
	move.b	#0x20,d0                        	| [$db15: ld   a,$20]
	move.b	d0,(0x05,a3)                    	| [$db17: ld   (iy+$05),a]
	            	| [$db1a: ld   a,(io_read_shit_B800)]
	move.b	#0xE4,d0                        	| [$db1d: ld   a,$E4]
	move.b	d0,unknown_61D2                 	| [$db1f: ld   (unknown_61D2),a]
	jbsr	check_object_pickup_FBCC          	| [$db22: call check_object_pickup_FBCC]
	move.l	(sp)+,a3                        	| [$db25: pop  iy]
	addq.w	#3,a3                           	| [$db27: inc  iy] * 3
	jbsr	swap_3_bytes_pickaxe_params_DBC2                 	| [$db2d: call swap_3_bytes_pickaxe_params_DBC2]

	movem.w	(sp)+,d1/d2                    	| [$db30: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_db06                             	| [$db31: djnz $DB06]
	lea		has_pick_61CF,a4           	| [$db33: ld   bc,has_pick_61CF] None
	lea	current_pickaxe_screen_params_61CC,a3	| [$db36: ld   iy,current_pickaxe_screen_params_61CC]
	move.b	#0x37,d0                        	| [$db3a: ld   a,$37]
	move.b	d0,(0x04,a3)                    	| [$db3c: ld   (iy+$04),a]
	move.b	#0x20,d0                        	| [$db3f: ld   a,$20]
	move.b	d0,(0x05,a3)                    	| [$db41: ld   (iy+$05),a]
	            	| [$db44: ld   a,(io_read_shit_B800)]
	move.b	#0xE4,d0                        	| [$db47: ld   a,$E4]
	move.b	d0,unknown_61D2                 	| [$db49: ld   (unknown_61D2),a]
	jbsr	check_object_pickup_FBCC          	| [$db4c: call check_object_pickup_FBCC]
l_db4f:
	move.b	pickup_flag_6160,d0             	| [$db4f: ld   a,(pickup_flag_6160)]
	cmp.b	#0x01,d0                         	| [$db52: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$db54: ret  nz] [...]
0:
	move.b	holds_barrow_61C7,d0            	| [$db55: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$db58: cp   $01]
	jeq	l_dbb4                             	| [$db5a: jp   z,$DBB4]
	move.b	has_pick_61CF,d0                	| [$db5d: ld   a,(has_pick_61CF)]
	cmp.b	#0x01,d0                         	| [$db60: cp   $01]
	jeq	l_dbb4                             	| [$db62: jp   z,$DBB4]
l_db65:
	move.b	#0x04,d1                        	| [$db65: ld   b,$04]
	lea	unknown_6312,a3                	| [$db67: ld   iy,unknown_6312]
l_db6b:
	movem.w	d1/d2,-(sp)                    	| [$db6b: push bc]

	move.l	a3,-(sp)                        	| [$db6c: push iy]
	lea		has_bomb_6311,a4            	| [$db6e: ld   bc,has_bomb_6311] None
	lea	bomb_1_screen_address_630E,a3                	| [$db71: ld   iy,bomb_1_screen_address_630E]
	move.b	#0x35,d0                        	| [$db75: ld   a,$35]
	move.b	d0,(0x04,a3)                    	| [$db77: ld   (iy+$04),a]
	move.b	#0x24,d0                        	| [$db7a: ld   a,$24]
	move.b	d0,(0x05,a3)                    	| [$db7c: ld   (iy+$05),a]
	            	| [$db7f: ld   a,(io_read_shit_B800)]
	move.b	#0xD4,d0                        	| [$db82: ld   a,$D4]
	move.b	d0,unknown_6314                 	| [$db84: ld   (unknown_6314),a]
	jbsr	check_object_pickup_FBCC          	| [$db87: call check_object_pickup_FBCC]
	move.l	(sp)+,a3                        	| [$db8a: pop  iy]
	addq.w	#3,a3                           	| [$db8c: inc  iy] * 3
	jbsr	swap_3_bytes_bomb_params_dbb5                            	| [$db92: call $DBB5]

	movem.w	(sp)+,d1/d2                    	| [$db95: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_db6b                             	| [$db96: djnz $DB6B]
	lea		has_bomb_6311,a4            	| [$db98: ld   bc,has_bomb_6311] None
	lea	bomb_1_screen_address_630E,a3                	| [$db9b: ld   iy,bomb_1_screen_address_630E]
	move.b	#0x32,d0                        	| [$db9f: ld   a,$32]
	move.b	d0,(0x04,a3)                    	| [$dba1: ld   (iy+$04),a]
	move.b	#0x24,d0                        	| [$dba4: ld   a,$24]
	move.b	d0,(0x05,a3)                    	| [$dba6: ld   (iy+$05),a]
	            	| [$dba9: ld   a,(io_read_shit_B800)]
	move.b	#0xD4,d0                        	| [$dbac: ld   a,$D4]
	move.b	d0,unknown_6314                 	| [$dbae: ld   (unknown_6314),a]
	jbsr	check_object_pickup_FBCC          	| [$dbb1: call check_object_pickup_FBCC]
l_dbb4:
	rts                                    	| [$dbb4: ret]
swap_3_bytes_bomb_params_dbb5:
	movem.w	d1/d2,-(sp)                    	| [$dbb5: push bc]

	move.l	a3,-(sp)                        	| [$dbb6: push iy]

	move.l	a2,-(sp)                        	| [$dbb8: push ix]
	move.b	#0x03,d1                        	| [$dbba: ld   b,$03]
	lea	bomb_1_screen_address_630E,a2                	| [$dbbc: ld   ix,bomb_1_screen_address_630E]
	jra	l_dbcd                             	| [$dbc0: jr   $DBCD]

swap_3_bytes_pickaxe_params_DBC2:
	movem.w	d1/d2,-(sp)                    	| [$dbc2: push bc]

	move.l	a3,-(sp)                        	| [$dbc3: push iy]

	move.l	a2,-(sp)                        	| [$dbc5: push ix]
	move.b	#0x03,d1                        	| [$dbc7: ld   b,$03]
	lea	current_pickaxe_screen_params_61CC,a2	| [$dbc9: ld   ix,current_pickaxe_screen_params_61CC]
l_dbcd:
	move.b	(A2),d0                    	| [$dbcd: ld   a,(ix+$00)]
	exg	d0,d7                              	| [$dbd0: ex   af,af']

	move.b	(A3),d0                    	| [$dbd1: ld   a,(iy+$00)]
	move.b	d0,(A2)+                    	| [$dbd4: ld   (ix+$00),a]
	exg	d0,d7                              	| [$dbd7: ex   af,af']

	move.b	d0,(A3)+                    	| [$dbd8: ld   (iy+$00),a]
	                           	| [$dbdb: inc  ix]
										| [$dbdd: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_dbcd                             	| [$dbdf: djnz $DBCD]
	move.l	(sp)+,a2                        	| [$dbe1: pop  ix]
	move.l	(sp)+,a3                        	| [$dbe3: pop  iy]

	movem.w	(sp)+,d1/d2                    	| [$dbe5: pop  bc]
	rts                                    	| [$dbe6: ret]

* bomb about to explode, better save the tiles behind it to restore them later

backup_bomb_tiles_background_dbe7:
	move.b	bomb_must_detonate_62F5,d0                 	| [$dbe7: ld   a,(bomb_must_detonate_62F5)]
	cmp.b	#0x01,d0                         	| [$dbea: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$dbec: ret  nz] [...]
0:
	clr.b	d0                               	| [$dbed: xor  a]
	move.b	d0,unknown_6351                 	| [$dbee: ld   (unknown_6351),a]
	move.w	screen_base_screen_address_6326,picked_up_object_screen_address_61F6             	| [$dbf1: ld   hl,(screen_base_screen_address_6326)]
 		| [$dbf4: ld   (picked_up_object_screen_address_61F6),hl]
	jbsr	restore_object_background_f3f3                            	| [$dbf7: call $F3F3]

	* now save background because the bomb is going to destroy a lot of it
	move.w	screen_base_screen_address_6326,d6             	| [$dbfa: ld   hl,(screen_base_screen_address_6326)]
 	move.w	#0x0040,d3                      	| [$dbfd: ld   de,$0040] 64
	add.w	d3,d6                            	| [$dc00: add  hl,de]
	move.w	d6,explosion_screen_address_62F8                 	| [$dc01: ld   (explosion_screen_address_62F8),hl]
	LEA_ROM	       0xDEB6,a0                      	| [$dc04: ld   hl,$DEB6]
	move.l	a0,bomb_explosion_tiles_pointer_62F6                 	| [$dc07: ld   (bomb_explosion_tiles_pointer_62F6),hl]
	*move.w	explosion_screen_address_62F8,d6             	| [$dc0a: ld   iy,(explosion_screen_address_62F8)]
 	lea		bomb_explosion_tile_backup_buffer_62FC,a2                	| [$dc0e: ld   ix,bomb_explosion_tile_backup_buffer_62FC]

	jbsr	osd_r_videoram                    	| [$dc12: ld   a,(iy+$00)]
	move.b	d0,(A2)+                    	| [$dc15: ld   (ix+$00),a]
	READ_VIDEORAM	1                    	| [$dc18: ld   a,(iy+$01)]
	move.b	d0,(A2)+                    	| [$dc1b: ld   (ix+$01),a]
	READ_VIDEORAM	-0x20                   	| [$dc1e: ld   a,(iy-$20)]
	move.b	d0,(A2)+                    	| [$dc21: ld   (ix+$02),a]
	READ_VIDEORAM	-0x1f                   	| [$dc24: ld   a,(iy-$1f)]
	move.b	d0,(A2)+                    	| [$dc27: ld   (ix+$03),a]
	READ_VIDEORAM	-0x40                   	| [$dc2a: ld   a,(iy-$40)]
	move.b	d0,(A2)+                    	| [$dc2d: ld   (ix+$04),a]
	READ_VIDEORAM	-0x3f                   	| [$dc30: ld   a,(iy-$3f)]
	move.b	d0,(A2)+                    	| [$dc33: ld   (ix+$05),a]
	READ_VIDEORAM	-0x60                   	| [$dc36: ld   a,(iy-$60)]
	move.b	d0,(A2)+                   	| [$dc39: ld   (ix+$06),a]
	READ_VIDEORAM	-0x5f                   	| [$dc3c: ld   a,(iy-$5f)]
	move.b	d0,(A2)                    	| [$dc3f: ld   (ix+$07),a]

	move.l	a0,-(sp)                        	| [$dc42: push hl]
	movem.w	d1/d2,-(sp)                    	| [$dc43: push bc]

	move.l	a3,-(sp)                        	| [$dc44: push iy]
	move.b	#0x08,d1                        	| [$dc46: ld   b,$08]
	lea	bomb_explosion_tile_backup_buffer_62FC,a3                	| [$dc48: ld   iy,bomb_explosion_tile_backup_buffer_62FC]
	move.b	#0x0B,d3                        	| [$dc4c: ld   d,$0B]
l_dc4e:
	move.b	(A3),d0                    	| [$dc4e: ld   a,(iy+$00)]
	cmp.b	d3,d0                            	| [$dc51: cp   d]
	bcc.b	0f                               	| [...]
	jbsr	set_blank_backup_tile_dcf3                            	| [$dc52: call c,$DCF3]
0:
	addq.w	#1,a3                           	| [$dc55: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_dc4e                             	| [$dc57: djnz $DC4E]
											| [$dc59: jr   $DC5B]
				
	move.l	(sp)+,a3                        	| [$dc5b: pop  iy]

	movem.w	(sp)+,d1/d2                    	| [$dc5d: pop  bc]
	move.l	(sp)+,a0                        	| [$dc5e: pop  hl]
	move.w	explosion_screen_address_62F8,d6             	| [$dc5f: ld   iy,(explosion_screen_address_62F8)]
	                      	| [$dc63: ld   de,$0800]
	add.w	#0x800,d6                            	| [$dc66: add  iy,de]
 
	lea	bomb_explosion_attr_backup_buffer_6304,a2                	| [$dc68: ld   ix,bomb_explosion_attr_backup_buffer_6304]
	jbsr	osd_r_colorram                    	| [$dc6c: ld   a,(iy+$00)]
	move.b	d0,(A2)+                    	| [$dc6f: ld   (ix+$00),a]
	READ_COLORRAM	1                    	| [$dc72: ld   a,(iy+$01)]
	move.b	d0,(A2)+                   	| [$dc75: ld   (ix+$01),a]
	READ_COLORRAM	-0x20                   	| [$dc78: ld   a,(iy-$20)]
	move.b	d0,(A2)+                   	| [$dc7b: ld   (ix+$02),a]
	READ_COLORRAM	-0x1f                   	| [$dc7e: ld   a,(iy-$1f)]
	move.b	d0,(A2)+                   	| [$dc81: ld   (ix+$03),a]
	READ_COLORRAM	-0x40                   	| [$dc84: ld   a,(iy-$40)]
	move.b	d0,(A2)+                   	| [$dc87: ld   (ix+$04),a]
	READ_COLORRAM	-0x3f                   	| [$dc8a: ld   a,(iy-$3f)]
	move.b	d0,(A2)+                    	| [$dc8d: ld   (ix+$05),a]
	READ_COLORRAM	-0x60                   	| [$dc90: ld   a,(iy-$60)]
	move.b	d0,(A2)+                    	| [$dc93: ld   (ix+$06),a]
	READ_COLORRAM	-0x5f                   	| [$dc96: ld   a,(iy-$5f)]
	move.b	d0,(A2)                  	| [$dc99: ld   (ix+$07),a]
	jbsr	l_de3b                            	| [$dc9c: call $DE3B]
	move.b	#0x08,d1                        	| [$dc9f: ld   b,$08]
	lea	bomb_explosion_tile_backup_buffer_62FC,a2                	| [$dca1: ld   ix,bomb_explosion_tile_backup_buffer_62FC]
	lea	bomb_explosion_attr_backup_buffer_6304,a3                	| [$dca5: ld   iy,bomb_explosion_attr_backup_buffer_6304]
l_dca9:
	jbsr	check_what_bomb_destroys_dcdd                            	| [$dca9: call $DCDD]
	addq.w	#1,a2                           	| [$dcac: inc  ix]
	addq.w	#1,a3                           	| [$dcae: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_dca9                             	| [$dcb0: djnz $DCA9]
	move.b	#0x01,bomb_must_detonate_62F5                        	| [$dcb2: ld   a,$01]
	                 	| [$dcb4: ld   (bomb_must_detonate_62F5),a]
	tst.b	gameplay_allowed_6054        	| [$dcb7: ld   a,(gameplay_allowed_6054)]
	                         	| [$dcba: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$dcbc: ret  z] [...]
0:
	move.b	#0x1F,d0                        	| [$dcbd: ld   a,$1F]
	move.b	d0,unknown_634C                 	| [$dcbf: ld   (unknown_634C),a]
	move.b	#0x07,d0                        	| [$dcc2: ld   a,$07]
	move.b	d0,unknown_634D                 	| [$dcc4: ld   (unknown_634D),a]
	move.b	unknown_6348,d0                 	| [$dcc7: ld   a,(unknown_6348)]
	cmp.b	#0x01,d0                         	| [$dcca: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$dccc: ret  z] [...]
0:
	* play bomb sound							
	move.w	#BOMB_SND,d0					| [$dccd: ld   hl,$3FDC]
	jbsr	start_a_sound					| [$dcd0: ld   (unknown_634E),hl]
											| [$dcd3: xor  a]
											| [$dcd4: ld   (ay_sound_start_6142),a]
	move.b	#0x03,d0                        	| [$dcd7: ld   a,$03]
	move.b	d0,unknown_6348                 	| [$dcd9: ld   (unknown_6348),a]
	rts                                    	| [$dcdc: ret]
check_what_bomb_destroys_dcdd:
	move.b	(A2),d0                    	| [$dcdd: ld   a,(ix+$00)]
	cmp.b	#0x49,d0                         	| [$dce0: cp   $49]
	jeq	l_dced                             	| [$dce2: jr   z,$DCED]
	cmp.b	#0x4A,d0                         	| [$dce4: cp   $4A]
	jeq	l_dced                             	| [$dce6: jr   z,$DCED]
	cmp.b	#0x4B,d0                         	| [$dce8: cp   $4B]
	jeq	l_dced                             	| [$dcea: jr   z,$DCED]
	rts                                    	| [$dcec: ret]
l_dced:
	move.b	#0x1F,d0                        	| [$dced: ld   a,$1F]
	move.b	d0,(A3)                    	| [$dcef: ld   (iy+$00),a]
	rts                                    	| [$dcf2: ret]
	
set_blank_backup_tile_dcf3:
	* set tile as blank + 0x3F attribute
	move.b	#0xE0,d0                        	| [$dcf3: ld   a,$E0]
	move.b	d0,(A3)                    	| [$dcf5: ld   (iy+$00),a]
	move.b	#0x3F,d0                        	| [$dcf8: ld   a,$3F]
	move.b	d0,(0x08,a3)                    	| [$dcfa: ld   (iy+$08),a]
	move.b	player_screen_600D,d0           	| [$dcfd: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$dd00: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$dd02: ret  nz] [...]
0:
	* bomb can also destroy the wall in screen 5
	.rept	5
	jbsr	check_destroyable_wall_tile_ea77                            	| [$dd03: call $EA77]
	.endr                            	| [$dd06: call $EA77]
	                            	| [$dd09: call $EA77]
	                            	| [$dd0c: call $EA77]
	                            	| [$dd0f: call $EA77]
	rts                                    	| [$dd12: ret]
update_bomb_explosion_frame_timer_dd13:
	move.b	bomb_must_detonate_62F5,d0                 	| [$dd13: ld   a,(bomb_must_detonate_62F5)]
	cmp.b	#0x01,d0                         	| [$dd16: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$dd18: ret  nz] [...]
0:
	move.b	bomb_just_dropped_6334,d0                 	| [$dd19: ld   a,(bomb_just_dropped_6334)]
	cmp.b	#0x01,d0                         	| [$dd1c: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$dd1e: ret  z] [...]
0:
	move.b	bomb_explosion_frame_timer_62FA,d0                 	| [$dd1f: ld   a,(bomb_explosion_frame_timer_62FA)]
	                         	| [$dd22: cp   $00]
	jeq	draw_explosion_frame_dd2b                             	| [$dd24: jr   z,$DD2B]
	subq.b	#1,d0                           	| [$dd26: dec  a]
	move.b	d0,bomb_explosion_frame_timer_62FA                 	| [$dd27: ld   (bomb_explosion_frame_timer_62FA),a]
	rts                                    	| [$dd2a: ret]

draw_explosion_frame_dd2b:
	move.l	bomb_explosion_tiles_pointer_62F6,a3             	| [$dd2b: ld   iy,(bomb_explosion_tiles_pointer_62F6)]
	move.w	explosion_screen_address_62F8,d6             	| [$dd2f: ld   hl,(explosion_screen_address_62F8)]
	move.b	(A3)+,d0                    	| [$dd32: ld   a,(iy+$00)]
	jbsr	osd_w_videoram                         	| [$dd35: ld   (hl),a]
	jbsr	set_attribute_38_deac                            	| [$dd36: call $DEAC]
	                      	| [$dd39: ld   de,$FFE0]
	sub.w	#0x20,d6                           	| [$dd3c: add  hl,de]
	                           	| [$dd3d: inc  iy]
	move.b	(A3)+,d0                    	| [$dd3f: ld   a,(iy+$00)]
	jbsr	osd_w_videoram                         	| [$dd42: ld   (hl),a]
	jbsr	set_attribute_38_deac                            	| [$dd43: call $DEAC]
	sub.w	#0x20,d6                            	| [$dd46: add  hl,de]
	                           	| [$dd47: inc  iy]
	move.b	(A3)+,d0                    	| [$dd49: ld   a,(iy+$00)]
	jbsr	osd_w_videoram                         	| [$dd4c: ld   (hl),a]
	jbsr	set_attribute_38_deac                            	| [$dd4d: call $DEAC]
	sub.w	#0x20,d6                            	| [$dd50: add  hl,de]
	                           	| [$dd51: inc  iy]
	move.b	(A3)+,d0                    	| [$dd53: ld   a,(iy+$00)]
	jbsr	osd_w_videoram                         	| [$dd56: ld   (hl),a]
	jbsr	set_attribute_38_deac                            	| [$dd57: call $DEAC]
	                           	| [$dd5a: inc  iy]
	* second row
	move.w	#0x0061,d3                      	| [$dd5c: ld   de,$0061] 97
	add.w	d3,d6                            	| [$dd5f: add  hl,de]
	move.b	(A3)+,d0                    	| [$dd60: ld   a,(iy+$00)]
	jbsr	osd_w_videoram                         	| [$dd63: ld   (hl),a]
	jbsr	set_attribute_38_deac                            	| [$dd64: call $DEAC]
	                           	| [$dd67: inc  iy]
	                     	| [$dd69: ld   de,$FFE0]
	sub.w	#0x20,d6                            	| [$dd6c: add  hl,de]
 	move.b	(A3)+,d0                    	| [$dd6d: ld   a,(iy+$00)]
	jbsr	osd_w_videoram                         	| [$dd70: ld   (hl),a]
	jbsr	set_attribute_38_deac                            	| [$dd71: call $DEAC]
	                           	| [$dd74: inc  iy]
	sub.w	#0x20,d6                            	| [$dd76: add  hl,de]
	move.b	(A3)+,d0                    	| [$dd77: ld   a,(iy+$00)]
	jbsr	osd_w_videoram                         	| [$dd7a: ld   (hl),a]
	jbsr	set_attribute_38_deac                            	| [$dd7b: call $DEAC]
	                           	| [$dd7e: inc  iy]
	move.b	(A3)+,d0                    	| [$dd80: ld   a,(iy+$00)]
	sub.w	#0x20,d6                           	| [$dd83: add  hl,de]
 	jbsr	osd_w_videoram                         	| [$dd84: ld   (hl),a]
	jbsr	set_attribute_38_deac                            	| [$dd85: call $DEAC]
	                           	| [$dd88: inc  iy]
	
	
 	move.l	a3,bomb_explosion_tiles_pointer_62F6                 	| [$dd8a: ld   (bomb_explosion_tiles_pointer_62F6),iy]
	move.b	#0x03,d0                        	| [$dd8e: ld   a,$03]
	move.b	d0,bomb_explosion_frame_timer_62FA                 	| [$dd90: ld   (bomb_explosion_frame_timer_62FA),a]
	move.b	(A3),d0                    	| [$dd93: ld   a,(iy+$00)]
	cmp.b	#0xFF,d0                         	| [$dd96: cp   $FF]
	beq.b	0f                               	| [...]
	rts                                    	| [$dd98: ret  nz] [...]
0:
	* end of explosion animation: restore background
	clr.b	bomb_must_detonate_62F5                               	| [$dd99: xor  a]
	                 	| [$dd9a: ld   (bomb_must_detonate_62F5),a]
	move.w	explosion_screen_address_62F8,d6             	| [$dd9d: ld   iy,(explosion_screen_address_62F8)]
	lea	bomb_explosion_tile_backup_buffer_62FC,a2                	| [$dda1: ld   ix,bomb_explosion_tile_backup_buffer_62FC]
	move.b	(A2)+,d0                    	| [$dda5: ld   a,(ix+$00)]
	jbsr	osd_w_videoram                    	| [$dda8: ld   (iy+$00),a]
	move.b	(A2)+,d0                    	| [$ddab: ld   a,(ix+$01)]
  	WRITE_VIDEORAM	1                    	| [$ddae: ld   (iy+$01),a]
	move.b	(A2)+,d0                    	| [$ddb1: ld   a,(ix+$02)]
	WRITE_VIDEORAM	-0x20                   	| [$ddb4: ld   (iy-$20),a]
	move.b	(A2)+,d0                    	| [$ddb7: ld   a,(ix+$03)]
	WRITE_VIDEORAM	-0x1f                   	| [$ddba: ld   (iy-$1f),a]
	move.b	(A2)+,d0                    	| [$ddbd: ld   a,(ix+$04)]
	WRITE_VIDEORAM	-0x40                   	| [$ddc0: ld   (iy-$40),a]
	move.b	(A2)+,d0                    	| [$ddc3: ld   a,(ix+$05)]
	WRITE_VIDEORAM	-0x3f                   	| [$ddc6: ld   (iy-$3f),a]
	move.b	(A2)+,d0                    	| [$ddc9: ld   a,(ix+$06)]
	WRITE_VIDEORAM	-0x60                   	| [$ddcc: ld   (iy-$60),a]
	move.b	(A2)+,d0                    	| [$ddcf: ld   a,(ix+$07)]
	WRITE_VIDEORAM	-0x5f                   	| [$ddd2: ld   (iy-$5f),a]
	move.w	explosion_screen_address_62F8,d6             	| [$ddd5: ld   iy,(explosion_screen_address_62F8)]
	                     	| [$ddd9: ld   de,$0800]
	add.w	#0x800,d6                            	| [$dddc: add  iy,de]
	
 	lea	bomb_explosion_attr_backup_buffer_6304,a2                	| [$ddde: ld   ix,bomb_explosion_attr_backup_buffer_6304]
	move.b	(A2)+,d0                    	| [$dde2: ld   a,(ix+$00)]
	jbsr	osd_w_colorram                    	| [$dde5: ld   (iy+$00),a]
	move.b	(A2)+,d0                    	| [$dde8: ld   a,(ix+$01)]
  	WRITE_COLORRAM	1                       	| [$ddeb: ld   (iy+$01),a]
	move.b	(A2)+,d0                    	| [$ddee: ld   a,(ix+$02)]
	WRITE_COLORRAM	-0x20                   	| [$ddf1: ld   (iy-$20),a]
	move.b	(A2)+,d0                    	| [$ddf4: ld   a,(ix+$03)]
	WRITE_COLORRAM	-0x1f                   	| [$ddf7: ld   (iy-$1f),a]
	move.b	(A2)+,d0                    	| [$ddfa: ld   a,(ix+$04)]
	WRITE_COLORRAM	-0x40                   	| [$ddfd: ld   (iy-$40),a]
	move.b	(A2)+,d0                    	| [$de00: ld   a,(ix+$05)]
	WRITE_COLORRAM	-0x3f                   	| [$de03: ld   (iy-$3f),a]
	move.b	(A2)+,d0                    	| [$de06: ld   a,(ix+$06)]
	WRITE_COLORRAM	-0x60                   	| [$de09: ld   (iy-$60),a]
	move.b	(A2),d0                    	| [$de0c: ld   a,(ix+$07)]
	WRITE_COLORRAM	-0x5f                   	| [$de0f: ld   (iy-$5f),a]
	move.b	player_killed_by_bomb_6336,d0                 	| [$de12: ld   a,(player_killed_by_bomb_6336)]
	cmp.b	#0x01,d0                         	| [$de15: cp   $01]
	jne	l_de1c                             	| [$de17: jr   nz,$DE1C]
	jbsr  is_invincible
	bne.b	l_de1c
	move.b	#1,player_death_flag_6025       	| [$de19: ld   (player_death_flag_6025),a]
l_de1c:
	move.b	guard_1_killed_by_bomb_6337,d0                 	| [$de1c: ld   a,(guard_1_killed_by_bomb_6337)]
	cmp.b	#0x01,d0                         	| [$de1f: cp   $01]
	jne	l_de26                             	| [$de21: jr   nz,$DE26]
	move.b	d0,guard_1_death_flag_629F                 	| [$de23: ld   (guard_1_death_flag_629F),a]
l_de26:
	move.b	guard_2_killed_by_bomb_6338,d0                 	| [$de26: ld   a,(guard_2_killed_by_bomb_6338)]
	cmp.b	#0x01,d0                         	| [$de29: cp   $01]
	jne	l_de30                             	| [$de2b: jr   nz,$DE30]
	move.b	d0,guard_2_death_flag_62A7                 	| [$de2d: ld   (guard_2_death_flag_62A7),a]
l_de30:
	clr.b	player_killed_by_bomb_6336                 	| [$de31: ld   (player_killed_by_bomb_6336),a]
	clr.b	guard_1_killed_by_bomb_6337                 	| [$de34: ld   (guard_1_killed_by_bomb_6337),a]
	clr.b	guard_2_killed_by_bomb_6338                 	| [$de37: ld   (guard_2_killed_by_bomb_6338),a]
	rts                                    	| [$de3a: ret]
l_de3b:
	move.w	explosion_screen_address_62F8,d6             	| [$de3b: ld   hl,(explosion_screen_address_62F8)]
	jbsr	l_eb64                            	| [$de3e: call $EB64]
	lea	player_killed_by_bomb_6336,a3                	| [$de41: ld   iy,player_killed_by_bomb_6336]
	lea	player_struct_6580,a2          	| [$de45: ld   ix,player_struct_6580]
	jbsr	check_if_bomb_kills_character_eb4e                            	| [$de49: call $EB4E]
	move.b	(A3),d0                    	| [$de4c: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$de4f: cp   $01]
	jne	l_de5b                             	| [$de51: jr   nz,$DE5B]
	move.b	#0x01,d0                        	| [$de53: ld   a,$01]
	move.b	d0,pickup_flag_6160             	| [$de55: ld   (pickup_flag_6160),a]
	jbsr	l_e399                            	| [$de58: call $E399]
l_de5b:
	lea	guard_1_killed_by_bomb_6337,a3                	| [$de5b: ld   iy,guard_1_killed_by_bomb_6337]
	lea	guard_1_struct_6594,a2         	| [$de5f: ld   ix,guard_1_struct_6594]
	jbsr	check_if_bomb_kills_character_eb4e                            	| [$de63: call $EB4E]
	move.b	(A3),d0                    	| [$de66: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$de69: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_e321                            	| [$de6b: call z,$E321]
0:
	lea	guard_2_killed_by_bomb_6338,a3                	| [$de6e: ld   iy,guard_2_killed_by_bomb_6338]
	lea	guard_2_struct_6598,a2         	| [$de72: ld   ix,guard_2_struct_6598]
	jbsr	check_if_bomb_kills_character_eb4e                            	| [$de76: call $EB4E]
	move.b	(A3),d0                    	| [$de79: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$de7c: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_e37d                            	| [$de7e: call z,$E37D]
0:
	rts                                    	| [$de81: ret]

set_attribute_38_deac:
	move.w	d6,-(sp)                        	| [$deac: push hl]
	                           	| [$dead: ld   a,h]
	add.w	#0x0800,d6                         	| [$deae: add  a,$$08]
	                     	| [$deb0: ld   h,a]
	move.b	#0x38,d0                        	| [$deb1: ld   a,$$38]
	jbsr	osd_w_colorram                         	| [$deb3: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$deb4: pop  hl]
	rts                                    	| [$deb5: ret]

animate_jail_buddy_def7:
	move.b	jail_buddy_free_6343,d0                 	| [$def7: ld   a,(jail_buddy_free_6343)]
	cmp.b	#0x01,d0                         	| [$defa: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$defc: ret  z] [...]
0:
	move.b	jail_buddy_aniimation_counter_62F0,d0                 	| [$defd: ld   a,(jail_buddy_aniimation_counter_62F0)]
	addq.b	#1,d0                           	| [$df00: inc  a]
	move.b	d0,jail_buddy_aniimation_counter_62F0                 	| [$df01: ld   (jail_buddy_aniimation_counter_62F0),a]
	cmp.b	#0x0C,d0                         	| [$df04: cp   $0C]
	bcc.b	0f                               	| [...]
	rts                                    	| [$df06: ret  nz] [...]
0:
											| [$df07: xor  a]
	clr.b	jail_buddy_aniimation_counter_62F0                 	| [$df08: ld   (jail_buddy_aniimation_counter_62F0),a]
	move.b	player_screen_600D,d0           	| [$df0b: ld   a,(player_screen_600D)]
	cmp.b	#0x02,d0                         	| [$df0e: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$df10: ret  nz] [...]
0:
	* animate jail buddy in screen 2
	move.w	jail_buddy_aniimation_rom_address_62F1,d6            	| [$df11: ld   hl,(jail_buddy_aniimation_rom_address_62F1)]
	addq.w	#1,d6                           	| [$df14: inc  hl]
	move.w	d6,jail_buddy_aniimation_rom_address_62F1                 	| [$df15: ld   (jail_buddy_aniimation_rom_address_62F1),hl]
	bsr		read_rom                         	| [$df18: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$df19: cp   $FF]
	jne	l_df24                             	| [$df1b: jr   nz,$DF24]
	* end of sequence: reset animation
	move.w	#0xDF2D,d6                      	| [$df1d: ld   hl,$DF2D]
	move.w	d6,jail_buddy_aniimation_rom_address_62F1                 	| [$df20: ld   (jail_buddy_aniimation_rom_address_62F1),hl]
	bsr		read_rom                         	| [$df23: ld   a,(hl)]
l_df24:
	move.w	#0x938E,d6
	jbsr	osd_w_videoram                       	| [$df24: ld   ($938E),a]
	move.b	#0x08,d0                        	| [$df27: ld   a,$08]
	move.w	#0x9B8E,d6                       	| [$df29: ld   ($9B8E),a]
    jbsr	osd_w_colorram
	rts                                    	| [$df2c: ret]

l_df42:
	lea	player_struct_6580,a2          	| [$df42: ld   ix,player_struct_6580]
	lea	player_in_elevator_5_62E5,a3                	| [$df46: ld   iy,player_in_elevator_5_62E5]
	move.b	player_screen_600D,d0           	| [$df4a: ld   a,(player_screen_600D)]
	jbsr	l_df6d                            	| [$df4d: call $DF6D]
	lea	guard_1_struct_6594,a2         	| [$df50: ld   ix,guard_1_struct_6594]
	lea	guard_1_in_elevator_5_62E9,a3                	| [$df54: ld   iy,guard_1_in_elevator_5_62E9]
	move.b	guard_1_screen_6099,d0          	| [$df58: ld   a,(guard_1_screen_6099)]
	jbsr	l_df6d                            	| [$df5b: call $DF6D]
	lea	guard_2_struct_6598,a2         	| [$df5e: ld   ix,guard_2_struct_6598]
	lea	guard_2_in_elevator_5_62ED,a3                	| [$df62: ld   iy,guard_2_in_elevator_5_62ED]
	move.b	guard_2_screen_609A,d0          	| [$df66: ld   a,(guard_2_screen_609A)]
	jbsr	l_df6d                            	| [$df69: call $DF6D]
	rts                                    	| [$df6c: ret]
l_df6d:
	move.b	d0,d1                           	| [$df6d: ld   b,a]
	move.b	(0x02,a2),d0                    	| [$df6e: ld   a,(ix+$02)]
	cmp.b	#0xA9,d0                         	| [$df71: cp   $A9]
	jcs	l_df88                             	| [$df73: jr   c,$DF88]
	move.b	d1,d0                           	| [$df75: ld   a,b]
	cmp.b	#0x05,d0                         	| [$df76: cp   $05]
	jne	l_df88                             	| [$df78: jr   nz,$DF88]
	move.b	elevator_5_y_62E3,d0                 	| [$df7a: ld   a,(elevator_5_y_62E3)]
	cmp.b	(0x03,a2),d0                     	| [$df7d: cp   (ix+$03)]
	jne	l_df88                             	| [$df80: jr   nz,$DF88]
	move.b	#0x01,d0                        	| [$df82: ld   a,$01]
	move.b	d0,(A3)                    	| [$df84: ld   (iy+$00),a]
	rts                                    	| [$df87: ret]
l_df88:
	clr.b	d0                               	| [$df88: xor  a]
	move.b	d0,(A3)                    	| [$df89: ld   (iy+$00),a]
	rts                                    	| [$df8c: ret]
init_elevator_5_df8d:
	move.w	#0x90C7,d6                      	| [$df8d: ld   hl,$90C7]
	move.w	d6,elevator_5_screen_address_62DD                 	| [$df90: ld   (elevator_5_screen_address_62DD),hl]
	LEA_ROM	       0xE004,a0                      	| [$df93: ld   hl,$E004]
	move.l	a0,unknown_pointer_62DB                 	| [$df96: ld   (unknown_pointer_62DB),hl]
	move.b	#0xBB,d0                        	| [$df99: ld   a,$BB]
	move.b	d0,unknown_62E0                 	| [$df9b: ld   (unknown_62E0),a]
	st.b	d0                                	| [$df9e: ld   a,$FF]
	move.b	d0,elevator_5_direction_62df                 	| [$dfa0: ld   (elevator_5_direction_62df),a]
	move.b	#0x28,d0                        	| [$dfa3: ld   a,$28]
	move.b	d0,elevator_5_y_62E3                 	| [$dfa5: ld   (elevator_5_y_62E3),a]
	move.b	player_screen_600D,d0           	| [$dfa8: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$dfab: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$dfad: ret  nz] [...]
0:
	move.b	#0xB2,d0                        	| [$dfae: ld   a,$B2]
	move.w	#0x90C6,d6                      	| [$dfb0: ld   ($90C6),a]
	jbsr	osd_w_videoram
	move.b	d0,0x9106                       	| [$dfb3: ld   ($9106),a]
	jbsr	osd_w_videoram
	move.b	#0xB3,d0                        	| [$dfb6: ld   a,$B3]
	move.w	#0x90E6,d6                       	| [$dfb8: ld   ($90E6),a]
	jbsr	osd_w_videoram
	move.w	#0x9126,d6                       	| [$dfbb: ld   ($9126),a]
	jbsr	osd_w_videoram
	rts                                    	| [$dfbe: ret]
	
init_bombs_locations_and_other_stuff_dfbf:
	jbsr	init_elevator_5_df8d                            	| [$dfbf: call $DF8D]
	move.w	#0xDF2D,d6                      	| [$dfc2: ld   hl,$DF2D]
	STORE_WORD	d6,jail_buddy_aniimation_rom_address_62F1                 	| [$dfc5: ld   (jail_buddy_aniimation_rom_address_62F1),hl]
	move.w	#0x9263,d6                      	| [$dfc8: ld   hl,$9263]
	STORE_WORD	d6,bomb_1_screen_address_630E                 	| [$dfcb: ld   (bomb_1_screen_address_630E),hl]
	move.b	#0x01,d0                        	| [$dfce: ld   a,$01]
	move.b	d0,bomb_1_screen_6310                 	| [$dfd0: ld   (bomb_1_screen_6310),a]
	move.w	#0x913C,d6                      	| [$dfd3: ld   hl,$913C]
	STORE_WORD	d6,bomb_2_screen_address_6315                 	| [$dfd6: ld   (bomb_2_screen_address_6315),hl]
	move.b	#0x02,d0                        	| [$dfd9: ld   a,$02]
	move.b	d0,bomb_2_screen_6317                 	| [$dfdb: ld   (bomb_2_screen_6317),a]
	move.w	#0x9254,d6                      	| [$dfde: ld   hl,$9254]
	STORE_WORD	d6,bomb_3_screen_address_6318                 	| [$dfe1: ld   (unknown_6318),hl]
	move.b	#0x03,d0                        	| [$dfe4: ld   a,$03]
	move.b	d0,bomb_3_screen_631A                 	| [$dfe6: ld   (bomb_3_screen_631A),a]
	move.w	#0x912E,d6                      	| [$dfe9: ld   hl,$912E]
	STORE_WORD	d6,bomb_4_screen_address_631B                 	| [$dfec: ld   (unknown_631B),hl]
	move.b	#0x04,d0                        	| [$dfef: ld   a,$04]
	move.b	d0,bomb_4_screen_631D                 	| [$dff1: ld   (bomb_4_screen_631D),a]
	move.w	#0x927C,d6                      	| [$dff4: ld   hl,$927C]
	STORE_WORD	d6,bomb_5_screen_address_631E                 	| [$dff7: ld   (unknown_631E),hl]
	move.b	#0x05,d0                        	| [$dffa: ld   a,$05]
	move.b	d0,bomb_5_screen_6320                 	| [$dffc: ld   (bomb_5_screen_6320),a]
	jbsr	l_e58c                            	| [$dfff: call $E58C]
	rts                                    	| [$e002: ret]

l_e039:
	jbsr	init_elevator_5_df8d                            	| [$e039: call $DF8D]
handle_elevator_5_e03c:
	move.w	elevator_5_screen_address_62DD,d6             	| [$e03c: ld   hl,(elevator_5_screen_address_62DD)]
	move.b	d6,d0                           	| [$e03f: ld   a,l]
	cmp.b	#0xC7,d0                         	| [$e040: cp   $C7]
	jcs	l_e039                             	| [$e042: jr   c,$E039]
	cmp.b	#0xDE,d0                         	| [$e044: cp   $DE]
	jcc	l_e039                             	| [$e046: jr   nc,$E039]
	move.b	elevator_5_stop_timer_62E1,d0                 	| [$e048: ld   a,(elevator_5_stop_timer_62E1)]
	                         	| [$e04b: cp   $00]
	jeq	l_e054                             	| [$e04d: jr   z,$E054]
	subq.b	#1,d0                           	| [$e04f: dec  a]
	* elevator not moving
	move.b	d0,elevator_5_stop_timer_62E1                 	| [$e050: ld   (elevator_5_stop_timer_62E1),a]
	rts                                    	| [$e053: ret]

l_e054:
	* elevator moving (not stopped)
	move.b	elevator_5_direction_62df,d0                 	| [$e054: ld   a,(elevator_5_direction_62df)]
	                         	| [$e057: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e059: ret  z] [...]
0:
	move.b	d0,d1                           	| [$e05a: ld   b,a]
	move.b	elevator_5_y_62E3,d0                 	| [$e05b: ld   a,(elevator_5_y_62E3)]
	sub.b	d1,d0                            	| [$e05e: sub  b]
	move.b	d0,elevator_5_y_62E3                 	| [$e05f: ld   (elevator_5_y_62E3),a]
	* apply elevator y to all characters on it
	move.b	d0,d1                           	| [$e062: ld   b,a]
	tst.b	player_in_elevator_5_62E5                 	| [$e063: ld   a,(player_in_elevator_5_62E5)]
	                         	| [$e066: cp   $00]
	jeq	l_e06e                             	| [$e068: jr   z,$E06E]
										| [$e06a: ld   a,b]
	move.b	d1,player_y_6583                	| [$e06b: ld   (player_y_6583),a]
l_e06e:
	tst.b	guard_1_in_elevator_5_62E9                 	| [$e06e: ld   a,(guard_1_in_elevator_5_62E9)]
	                         	| [$e071: cp   $00]
	jeq	l_e079                             	| [$e073: jr   z,$E079]
	                           	| [$e075: ld   a,b]
	move.b	d1,guard_1_y_6597               	| [$e076: ld   (guard_1_y_6597),a]
l_e079:
	tst.b	guard_2_in_elevator_5_62ED                 	| [$e079: ld   a,(guard_2_in_elevator_5_62ED)]
	                         	| [$e07c: cp   $00]
	jeq	l_e084                             	| [$e07e: jr   z,$E084]
	                           	| [$e080: ld   a,b]
	move.b	d1,guard_2_y_659B               	| [$e081: ld   (guard_2_y_659B),a]
l_e084:
	move.b	elevator_5_direction_62df,d0                 	| [$e084: ld   a,(elevator_5_direction_62df)]
	move.b	d0,d1                           	| [$e087: ld   b,a]
	move.w	elevator_5_screen_address_62DD,d6             	| [$e088: ld   hl,(elevator_5_screen_address_62DD)]
	jbsr	write_elevator_5_bg_tiles_e188                            	| [$e08b: call $E188]
	move.l	unknown_pointer_62DB,a2             	| [$e08e: ld   ix,(unknown_pointer_62DB)]
	move.b	elevator_5_direction_62df,d0                 	| [$e092: ld   a,(elevator_5_direction_62df)]
	cmp.b	#0xFF,d0                         	| [$e095: cp   $FF]
	jeq	l_e09f                             	| [$e09a: jr   z,$E09F]
	move.b	(0x24,a2),d0                    	| [$e09c: ld   a,(ix+$24)]
	bra.b	0f
l_e09f:
	move.b	(0x12,a2),d0                    	| [$e097: ld   a,(ix+$12)]
0:
	cmp.b	#0x01,d0                         	| [$e09f: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_e0c7                            	| [$e0a1: call z,$E0C7]
0:
	move.l	unknown_pointer_62DB,a2             	| [$e0a4: ld   ix,(unknown_pointer_62DB)]
	move.w	elevator_5_screen_address_62DD,d6             	| [$e0a8: ld   hl,(elevator_5_screen_address_62DD)]
	move.b	(A2),d0                    	| [$e0ab: ld   a,(ix+$00)]
	jbsr	l_e0f7                            	| [$e0ae: call $E0F7]
	jbsr	write_elevator_5_tiles_e172                            	| [$e0b1: call $E172]
	* update pointer
	move.l	unknown_pointer_62DB,a0             	| [$e0b4: ld   hl,(unknown_pointer_62DB)]
 	jbsr	move_elevator_5_e0ec_a0                            	| [$e0b7: call $E0EC]
	move.l	a0,unknown_pointer_62DB                 	| [$e0ba: ld   (unknown_pointer_62DB),hl]
	move.w	elevator_5_screen_address_62DD,d6             	| [$e0bd: ld   hl,(elevator_5_screen_address_62DD)]
	jbsr	l_e137                            	| [$e0c0: call $E137]
	jbsr	l_e151                            	| [$e0c3: call $E151]
	rts                                    	| [$e0c6: ret]
l_e0c7:
	move.b	(A2),d0                    	| [$e0c7: ld   a,(ix+$00)]
	cmp.b	#0xFF,d0                         	| [$e0ca: cp   $FF]
	bne.b	0f                               	| [...]
	jbsr	l_e0de                            	| [$e0cc: call z,$E0DE]
0:
	cmp.b	#0xFE,d0                         	| [$e0cf: cp   $FE]
	bne.b	0f                               	| [...]
	jbsr	l_e0e5                            	| [$e0d1: call z,$E0E5]
0:
	move.w	elevator_5_screen_address_62DD,d6             	| [$e0d4: ld   hl,(elevator_5_screen_address_62DD)]
	jbsr	move_elevator_5_e0ec                            	| [$e0d7: call $E0EC]
	move.w	d6,elevator_5_screen_address_62DD                 	| [$e0da: ld   (elevator_5_screen_address_62DD),hl]
	rts                                    	| [$e0dd: ret]
l_e0de:
	LEA_ROM	       0xE004,a0                      	| [$e0de: ld   hl,$E004]
	move.l	a0,unknown_pointer_62DB                 	| [$e0e1: ld   (unknown_pointer_62DB),hl]
	rts                                    	| [$e0e4: ret]
l_e0e5:
	LEA_ROM	       0xE013,a0                      	| [$e0e5: ld   hl,$E013]
	move.l	a0,unknown_pointer_62DB                 	| [$e0e8: ld   (unknown_pointer_62DB),hl]
	rts                                    	| [$e0eb: ret]
move_elevator_5_e0ec:
	move.b	elevator_5_direction_62df,d0                 	| [$e0ec: ld   a,(elevator_5_direction_62df)]
	cmp.b	#0xFF,d0                         	| [$e0ef: cp   $FF]
	jeq	l_e0f5                             	| [$e0f1: jr   z,$E0F5]
	subq.w	#1,d6                           	| [$e0f3: dec  hl]
	rts                                    	| [$e0f4: ret]
l_e0f5:
	addq.w	#1,d6                           	| [$e0f5: inc  hl]
	rts                                    	| [$e0f6: ret]
move_elevator_5_e0ec_a0:
	move.b	elevator_5_direction_62df,d0                 	| [$e0ec: ld   a,(elevator_5_direction_62df)]
	cmp.b	#0xFF,d0                         	| [$e0ef: cp   $FF]
	jeq	0f                             	| [$e0f1: jr   z,$E0F5]
	subq.w	#1,a0                           	| [$e0f3: dec  hl]
	rts                                    	| [$e0f4: ret]
0:
	addq.w	#1,a0                           	| [$e0f5: inc  hl]
	rts                                    	| [$e0f6: ret]
l_e0f7:
	move.w	d0,-(sp)                        	| [$e0f7: push af]
	cmp.b	#0xAE,d0                         	| [$e0f8: cp   $AE]
	jeq	l_e10a                             	| [$e0fa: jr   z,$E10A]
	cmp.b	#0xAC,d0                         	| [$e0fc: cp   $AC]
	jeq	l_e10a                             	| [$e0fe: jr   z,$E10A]
	cmp.b	#0x90,d0                         	| [$e100: cp   $90]
	jeq	l_e12b                             	| [$e102: jr   z,$E12B]
	cmp.b	#0x92,d0                         	| [$e104: cp   $92]
	jeq	l_e12b                             	| [$e106: jr   z,$E12B]
	jra	l_e135                             	| [$e108: jr   $E135]
l_e10a:
	move.b	d6,d0                           	| [$e10a: ld   a,l]
	cmp.b	#0xCB,d0                         	| [$e10d: cp   $CB]   stop address LSB
	bne.b	0f                               	| [...]
	move.b	#0x49,d4                        	| [$e10b: ld   e,$49] Y floor
	jbsr	elevator_5_reaches_a_floor_e1aa                            	| [$e10f: call z,$E1AA]
0:
	cmp.b	#0xD0,d0                         	| [$e114: cp   $D0]
	bne.b	0f                               	| [...]
	move.b	#0x71,d4                        	| [$e112: ld   e,$71]
	jbsr	elevator_5_reaches_a_floor_e1aa                            	| [$e116: call z,$E1AA]
0:
	cmp.b	#0xD5,d0                         	| [$e11b: cp   $D5]
	bne.b	0f                               	| [...]
	move.b	#0x99,d4                        	| [$e119: ld   e,$99]
	jbsr	elevator_5_reaches_a_floor_e1aa                            	| [$e11d: call z,$E1AA]
0:
	cmp.b	#0xC7,d0                         	| [$e122: cp   $C7]
	jne	l_e135                             	| [$e124: jr   nz,$E135]
	move.b	#0x29,d4                        	| [$e120: ld   e,$29]
	jbsr	elevator_5_reaches_a_floor_e1aa                            	| [$e126: call $E1AA]
	jra	l_e135                             	| [$e129: jr   $E135]
l_e12b:
	move.b	d6,d0                           	| [$e12b: ld   a,l]
	move.b	#0xE0,d4                        	| [$e12c: ld   e,$E0]
	cmp.b	#0xDD,d0                         	| [$e12e: cp   $DD]
	jne	l_e135                             	| [$e130: jr   nz,$E135]
	jbsr	elevator_5_reaches_a_floor_e1aa                            	| [$e132: call $E1AA]
l_e135:
	move.w	(sp)+,d0                        	| [$e135: pop  af]
	rts                                    	| [$e136: ret]
l_e137:
	move.b	elevator_5_direction_62df,d0                 	| [$e137: ld   a,(elevator_5_direction_62df)]
	cmp.b	#0x01,d0                         	| [$e13a: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e13c: ret  nz] [...]
0:
	move.b	d6,d0                           	| [$e13d: ld   a,l]
	cmp.b	#0xC7,d0                         	| [$e13e: cp   $C7]
	beq.b	0f                               	| [...]
	rts                                    	| [$e140: ret  nz] [...]
0:
	move.b	(A2),d0                    	| [$e141: ld   a,(ix+$00)]
	cmp.b	#0xAC,d0                         	| [$e144: cp   $AC]
	beq.b	0f                               	| [...]
	rts                                    	| [$e146: ret  nz] [...]
0:
	move.l	unknown_pointer_62DB,a0             	| [$e147: ld   hl,(unknown_pointer_62DB)]
	addq.w	#2,a0                           	| [$e14a: inc  hl] * 2
	move.l	a0,unknown_pointer_62DB                 	| [$e14c: ld   (unknown_pointer_62DB),hl]
	jra	change_elevator_5_direction_e169                             	| [$e14f: jr   $E169]

l_e151:
	move.b	elevator_5_direction_62df,d0                 	| [$e151: ld   a,(elevator_5_direction_62df)]
	cmp.b	#0xFF,d0                         	| [$e154: cp   $FF]
	beq.b	0f                               	| [...]
	rts                                    	| [$e156: ret  nz] [...]
0:
	move.b	d6,d0                           	| [$e157: ld   a,l]
	cmp.b	#0xDD,d0                         	| [$e158: cp   $DD]
	beq.b	0f                               	| [...]
	rts                                    	| [$e15a: ret  nz] [...]
0:
	* elevator level 5 almost at the bottom
	move.b	(A2),d0                    	| [$e15b: ld   a,(ix+$00)]
	cmp.b	#0x90,d0                         	| [$e15e: cp   $90]
	beq.b	0f                               	| [...]
	rts                                    	| [$e160: ret  nz] [...]
0:
	move.l	unknown_pointer_62DB,a0             	| [$e161: ld   hl,(unknown_pointer_62DB)]
	subq.w	#2,a0                           	| [$e164: dec  hl] * 2
	move.l	a0,unknown_pointer_62DB                 	| [$e166: ld   (unknown_pointer_62DB),hl]
change_elevator_5_direction_e169:
	move.b	elevator_5_direction_62df,d0                 	| [$e169: ld   a,(elevator_5_direction_62df)]
	not.b	d0                               	| [$e16c: cpl]
	addq.b	#1,d0                           	| [$e16d: inc  a]
	move.b	d0,elevator_5_direction_62df                 	| [$e16e: ld   (elevator_5_direction_62df),a]
	rts                                    	| [$e171: ret]

write_elevator_5_tiles_e172:
	
	                              	| [$e172: ex   af,af']

	cmp.b	#0x05,player_screen_600D           	| [$e173: ld   a,(player_screen_600D)]
	                         	| [$e176: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$e178: ret  nz] [...]
0:
	                              	| [$e179: ex   af,af']
	jbsr	osd_w_videoram                         	| [$e17a: ld   (hl),a]
	move.w	#0x0020,d3                      	| [$e17b: ld   de,$0020] 32
	add.w	d3,d6                            	| [$e17e: add  hl,de]

	addq.b	#1,d0                           	| [$e17f: inc  a]
	jbsr	osd_w_videoram                         	| [$e180: ld   (hl),a]
	add.w	d3,d6                            	| [$e181: add  hl,de]

	subq.b	#1,d0                           	| [$e182: dec  a]
	jbsr	osd_w_videoram                         	| [$e183: ld   (hl),a]
	add.w	d3,d6                            	| [$e184: add  hl,de]

	addq.b	#1,d0                           	| [$e185: inc  a]
	jbsr	osd_w_videoram                         	| [$e186: ld   (hl),a]
	rts                                    	| [$e187: ret]

write_elevator_5_bg_tiles_e188:
	move.b	player_screen_600D,d0           	| [$e188: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$e18b: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$e18d: ret  nz] [...]
0:
	jbsr	write_elevator_5_bg_tile_e1a1                            	| [$e18e: call $E1A1]
	move.w	#0x0020,d3                      	| [$e191: ld   de,$0020] 32
	add.w	d3,d6                            	| [$e194: add  hl,de]

	jbsr	write_elevator_5_bg_tile_e1a1                            	| [$e195: call $E1A1]
	add.w	d3,d6                            	| [$e198: add  hl,de]

	jbsr	write_elevator_5_bg_tile_e1a1                            	| [$e199: call $E1A1]
	add.w	d3,d6                            	| [$e19c: add  hl,de]

	jbsr	write_elevator_5_bg_tile_e1a1                            	| [$e19d: call $E1A1]
	rts                                    	| [$e1a0: ret]
write_elevator_5_bg_tile_e1a1:
	move.w	d6,-(sp)                        	| [$e1a1: push hl]

	sub.w	#0x5C00,d6						| [$e1a2: pop  bc]
	                 	| [$e1a3: ld   a,b]
	                  	| [$e1a4: sub  $5C]
	                 	| [$e1a6: ld   b,a]
	bsr		read_rom                         	| [$e1a7: ld   a,(bc)]
	move.w	(sp)+,d6
	jbsr	osd_w_videoram                         	| [$e1a8: ld   (hl),a]
	rts                                    	| [$e1a9: ret]

* < D4	
elevator_5_reaches_a_floor_e1aa:
	move.b	#0x50,d0                        	| [$e1aa: ld   a,$50]
	move.b	d0,elevator_5_stop_timer_62E1                 	| [$e1ac: ld   (elevator_5_stop_timer_62E1),a]
	move.b	d4,d0                           	| [$e1af: ld   a,e]
	move.b	d0,elevator_5_y_62E3                 	| [$e1b0: ld   (elevator_5_y_62E3),a]
	rts                                    	| [$e1b3: ret]
l_e1b4:
	lea	player_struct_6580,a2          	| [$e1b4: ld   ix,player_struct_6580]
	lea	unknown_62D2,a3                	| [$e1b8: ld   iy,unknown_62D2]
	jbsr	l_e1d8                            	| [$e1bc: call $E1D8]
	rts                                    	| [$e1bf: ret]
l_e1c0:
	lea	guard_1_struct_6594,a2         	| [$e1c0: ld   ix,guard_1_struct_6594]
	lea	unknown_62D6,a3                	| [$e1c4: ld   iy,unknown_62D6]
	jbsr	l_e1d8                            	| [$e1c8: call $E1D8]
	rts                                    	| [$e1cb: ret]
l_e1cc:
	lea	guard_2_struct_6598,a2         	| [$e1cc: ld   ix,guard_2_struct_6598]
	lea	unknown_62DA,a3                	| [$e1d0: ld   iy,unknown_62DA]
	jbsr	l_e1d8                            	| [$e1d4: call $E1D8]
	rts                                    	| [$e1d7: ret]
l_e1d8:
	move.b	(A3),d0                    	| [$e1d8: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$e1db: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e1dd: ret  nz] [...]
0:
	move.b	(0x02,a2),d0                    	| [$e1de: ld   a,(ix+$02)]
	addq.b	#1,d0                           	| [$e1e1: inc  a]
	move.b	d0,(0x02,a2)                    	| [$e1e2: ld   (ix+$02),a]
	move.b	(0x03,a2),d0                    	| [$e1e5: ld   a,(ix+$03)]
	addq.b	#1,d0                           	| [$e1e8: inc  a]
	move.b	d0,(0x03,a2)                    	| [$e1e9: ld   (ix+$03),a]
	rts                                    	| [$e1ec: ret]
l_e1ed:
	lea	player_struct_6580,a2          	| [$e1ed: ld   ix,player_struct_6580]
	lea	unknown_62D2,a3                	| [$e1f1: ld   iy,unknown_62D2]
	lea	player_screen_600D,a1          	| [$e1f5: ld   de,player_screen_600D]
	move.b	#0x1C,d1                        	| [$e1f8: ld   b,$1C]
	move.b	unknown_6008,d0                 	| [$e1fa: ld   a,(unknown_6008)]
	cmp.b	#0x01,d0                         	| [$e1fd: cp   $01]
	jeq	l_e209                             	| [$e1ff: jr   z,$E209]
	move.b	unknown_62BD,d0                 	| [$e201: ld   a,(unknown_62BD)]
	cmp.b	#0x01,d0                         	| [$e204: cp   $01]
	beq.b	0f                               	| [...]
	jbsr	l_e264                            	| [$e206: call nz,$E264]
0:
l_e209:
	jbsr	l_e243                            	| [$e209: call $E243]
	rts                                    	| [$e20c: ret]
l_e20d:
	lea	guard_1_struct_6594,a2         	| [$e20d: ld   ix,guard_1_struct_6594]
	lea	unknown_62D6,a3                	| [$e211: ld   iy,unknown_62D6]
	lea	guard_1_screen_6099,a1         	| [$e215: ld   de,guard_1_screen_6099]
	move.b	guard_1_in_elevator_6037,d0     	| [$e218: ld   a,(guard_1_in_elevator_6037)]
	cmp.b	#0x01,d0                         	| [$e21b: cp   $01]
	jeq	l_e224                             	| [$e21d: jr   z,$E224]
	move.b	#0x3F,d1                        	| [$e21f: ld   b,$3F]
	jbsr	l_e264                            	| [$e221: call $E264]
l_e224:
	jbsr	l_e243                            	| [$e224: call $E243]
	rts                                    	| [$e227: ret]
l_e228:
	lea	guard_2_struct_6598,a2         	| [$e228: ld   ix,guard_2_struct_6598]
	lea	unknown_62DA,a3                	| [$e22c: ld   iy,unknown_62DA]
	lea	guard_2_screen_609A,a1         	| [$e230: ld   de,guard_2_screen_609A]
	move.b	#0x3F,d1                        	| [$e233: ld   b,$3F]
	move.b	guard_2_in_elevator_6077,d0     	| [$e235: ld   a,(guard_2_in_elevator_6077)]
	cmp.b	#0x01,d0                         	| [$e238: cp   $01]
	jeq	l_e23f                             	| [$e23a: jr   z,$E23F]
	jbsr	l_e264                            	| [$e23c: call $E264]
l_e23f:
	jbsr	l_e243                            	| [$e23f: call $E243]
	rts                                    	| [$e242: ret]
l_e243:
	move.b	(A3),d0                    	| [$e243: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$e246: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e248: ret  nz] [...]
0:
	move.b	(a1),d0                         	| [$e249: ld   a,(de)]
	cmp.b	#0x03,d0                         	| [$e24a: cp   $03]
	jeq	l_e259                             	| [$e24c: jr   z,$E259]
	move.b	(0x02,a2),d0                    	| [$e24e: ld   a,(ix+$02)]
	cmp.b	#0x81,d0                         	| [$e251: cp   $81]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e253: ret  c] [...]
0:
	clr.b	d0                               	| [$e254: xor  a]
	move.b	d0,(A3)                    	| [$e255: ld   (iy+$00),a]
	rts                                    	| [$e258: ret]
l_e259:
	move.b	(0x02,a2),d0                    	| [$e259: ld   a,(ix+$02)]
	cmp.b	#0x73,d0                         	| [$e25c: cp   $73]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e25e: ret  c] [...]
0:
	clr.b	d0                               	| [$e25f: xor  a]
	move.b	d0,(A3)                    	| [$e260: ld   (iy+$00),a]
	rts                                    	| [$e263: ret]
l_e264:
	move.b	(A3),d0                    	| [$e264: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$e267: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e269: ret  z] [...]
0:
	move.b	(0x03,a2),d0                    	| [$e26a: ld   a,(ix+$03)]
	cmp.b	#0x38,d0                         	| [$e26d: cp   $38]
	jne	l_e295                             	| [$e26f: jr   nz,$E295]
	move.b	(a1),d0                         	| [$e271: ld   a,(de)]
	cmp.b	#0x02,d0                         	| [$e272: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$e274: ret  nz] [...]
0:
	move.b	(0x02,a2),d0                    	| [$e275: ld   a,(ix+$02)]
	cmp.b	#0x50,d0                         	| [$e278: cp   $50]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e27a: ret  c] [...]
0:
	move.b	(0x02,a2),d0                    	| [$e27b: ld   a,(ix+$02)]
	cmp.b	#0x55,d0                         	| [$e27e: cp   $55]
	bcs.b	0f                               	| [...]
	rts                                    	| [$e280: ret  nc] [...]
0:
l_e281:
	move.b	#0x01,d0                        	| [$e281: ld   a,$01]
	move.b	d0,(A3)                    	| [$e283: ld   (iy+$00),a]
	move.b	(A2),d0                    	| [$e286: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e289: and  $80]
	or.b	d1,d0                             	| [$e28b: or   b]
	move.b	d0,(A2)                    	| [$e28c: ld   (ix+$00),a]
	* sets intertia from slide for guard
	* fixing one bug here as guard 2 inertia overlaps $62DB pointer
	* (in real game it doesn't show as it's little endian)
	move.b	#0x20,d0                        	| [$e28f: ld   a,$20]
	move.b	d0,(0x01,a3)                    	| [$e291: ld   (iy+$01),a]
	rts                                    	| [$e294: ret]
l_e295:
	cmp.b	#0x50,d0                         	| [$e295: cp   $50]
	jne	l_e2a8                             	| [$e297: jr   nz,$E2A8]
	move.b	(a1),d0                         	| [$e299: ld   a,(de)]
	cmp.b	#0x03,d0                         	| [$e29a: cp   $03]
	beq.b	0f                               	| [...]
	rts                                    	| [$e29c: ret  nz] [...]
0:
	move.b	(0x02,a2),d0                    	| [$e29d: ld   a,(ix+$02)]
	cmp.b	#0x41,d0                         	| [$e2a0: cp   $41]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e2a2: ret  c] [...]
0:
	cmp.b	#0x50,d0                         	| [$e2a3: cp   $50]
	bcs.b	0f                               	| [...]
	rts                                    	| [$e2a5: ret  nc] [...]
0:
	jra	l_e281                             	| [$e2a6: jr   $E281]
l_e2a8:
	cmp.b	#0x53,d0                         	| [$e2a8: cp   $53]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e2aa: ret  c] [...]
0:
	cmp.b	#0x70,d0                         	| [$e2ab: cp   $70]
	bcs.b	0f                               	| [...]
	rts                                    	| [$e2ad: ret  nc] [...]
0:
	move.b	(a1),d0                         	| [$e2ae: ld   a,(de)]
	cmp.b	#0x03,d0                         	| [$e2af: cp   $03]
	beq.b	0f                               	| [...]
	rts                                    	| [$e2b1: ret  nz] [...]
0:
	move.b	(0x02,a2),d0                    	| [$e2b2: ld   a,(ix+$02)]
	cmp.b	#0x4B,d0                         	| [$e2b5: cp   $4B]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e2b7: ret  c] [...]
0:
	cmp.b	#0x60,d0                         	| [$e2b8: cp   $60]
	bcs.b	0f                               	| [...]
	rts                                    	| [$e2ba: ret  nc] [...]
0:
	move.b	(0x02,a2),d0                    	| [$e2bb: ld   a,(ix+$02)]
	add.b	#0x10,d0                         	| [$e2be: add  a,$10]
	move.b	d0,(0x03,a2)                    	| [$e2c0: ld   (ix+$03),a]
	jra	l_e281                             	| [$e2c3: jr   $E281]
l_e2c5:
	lea	guard_1_screen_6099,a1         	| [$e2c5: ld   de,guard_1_screen_6099]
	lea	guard_1_struct_6594,a2         	| [$e2c8: ld   ix,guard_1_struct_6594]
	lea	guard_1_direction_6027,a0      	| [$e2cc: ld   hl,guard_1_direction_6027]
	jbsr	l_e2ec                            	| [$e2cf: call $E2EC]
	move.b	d1,d0                           	| [$e2d2: ld   a,b]
	cmp.b	#0x01,d0                         	| [$e2d3: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_e321                            	| [$e2d5: call z,$E321]
0:
	lea	guard_2_screen_609A,a1         	| [$e2d8: ld   de,guard_2_screen_609A]
	lea	guard_2_struct_6598,a2         	| [$e2db: ld   ix,guard_2_struct_6598]
	lea	guard_2_direction_6067,a0      	| [$e2df: ld   hl,guard_2_direction_6067]
	jbsr	l_e2ec                            	| [$e2e2: call $E2EC]
	move.b	d1,d0                           	| [$e2e5: ld   a,b]
	cmp.b	#0x01,d0                         	| [$e2e6: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_e37d                            	| [$e2e8: call z,$E37D]
0:
	rts                                    	| [$e2eb: ret]
l_e2ec:
	LEA_ROM	       0xE32D,a3                      	| [$e2ec: ld   iy,$E32D]
	clr.b	d1                               	| [$e2f0: ld   b,$00]
l_e2f2:
	move.b	(a1),d0                         	| [$e2f2: ld   a,(de)]
	cmp.b	(0x02,a3),d0                     	| [$e2f3: cp   (iy+$02)]
	jne	l_e311                             	| [$e2f6: jr   nz,$E311]
	move.b	(0x02,a2),d0                    	| [$e2f8: ld   a,(ix+$02)]
	cmp.b	(A3),d0                     	| [$e2fb: cp   (iy+$00)]
	jne	l_e311                             	| [$e2fe: jr   nz,$E311]
	move.b	(0x03,a2),d0                    	| [$e300: ld   a,(ix+$03)]
	cmp.b	(0x01,a3),d0                     	| [$e303: cp   (iy+$01)]
	jne	l_e311                             	| [$e306: jr   nz,$E311]
	move.b	(a0),d0                         	| [$e308: ld   a,(hl)]
	cmp.b	(0x03,a3),d0                     	| [$e309: cp   (iy+$03)]
	jne	l_e311                             	| [$e30c: jr   nz,$E311]
	move.b	#0x01,d1                        	| [$e30e: ld   b,$01]
	rts                                    	| [$e310: ret]
l_e311:
												| [$e311: inc  iy]
	addq.w	#4,a3                           	| [$e313: inc  iy] * 4
	move.b	(A3),d0                    	| [$e319: ld   a,(iy+$00)]
	cmp.b	#0xFF,d0                         	| [$e31c: cp   $FF]
	bne.b	0f                               	| [...]
	rts                                    	| [$e31e: ret  z] [...]
0:
	jra	l_e2f2                             	| [$e31f: jr   $E2F2]
l_e321:
	lea	guard_1_struct_6594,a2         	| [$e321: ld   ix,guard_1_struct_6594]
	lea	unknown_62C4,a3                	| [$e325: ld   iy,unknown_62C4]
	jbsr	l_e487                            	| [$e329: call $E487]
	rts                                    	| [$e32c: ret]

l_e36d:
	lea	guard_1_struct_6594,a2         	| [$e36d: ld   ix,guard_1_struct_6594]
	lea	unknown_62C4,a3                	| [$e371: ld   iy,unknown_62C4]
	move.w	guard_1_logical_address_6038,d3	| [$e375: ld   de,(guard_1_logical_address_6038)]
	jbsr	l_e3f0                            	| [$e379: call $E3F0]
	rts                                    	| [$e37c: ret]
l_e37d:
	lea	guard_2_struct_6598,a2         	| [$e37d: ld   ix,guard_2_struct_6598]
	lea	unknown_62CB,a3                	| [$e381: ld   iy,unknown_62CB]
	jbsr	l_e487                            	| [$e385: call $E487]
	rts                                    	| [$e388: ret]
l_e389:
	lea	guard_2_struct_6598,a2         	| [$e389: ld   ix,guard_2_struct_6598]
	lea	unknown_62CB,a3                	| [$e38d: ld   iy,unknown_62CB]
	move.w	guard_2_logical_address_6078,d3	| [$e391: ld   de,(guard_2_logical_address_6078)]
	jbsr	l_e3f0                            	| [$e395: call $E3F0]
	rts                                    	| [$e398: ret]
l_e399:
	lea	player_struct_6580,a2          	| [$e399: ld   ix,player_struct_6580]
	lea	unknown_62BD,a3                	| [$e39d: ld   iy,unknown_62BD]
	move.b	unknown_6008,d0                 	| [$e3a1: ld   a,(unknown_6008)]
	                         	| [$e3a4: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$e3a6: ret  nz] [...]
0:
	move.b	player_in_wagon_1_601C,d0       	| [$e3a7: ld   a,(player_in_wagon_1_601C)]
	cmp.b	#0x01,d0                         	| [$e3aa: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e3ac: ret  z] [...]
0:
	move.b	player_gripping_handle_602A,d0  	| [$e3ad: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$e3b0: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e3b2: ret  z] [...]
0:
	move.b	pickup_flag_6160,d0             	| [$e3b3: ld   a,(pickup_flag_6160)]
	cmp.b	#0x01,d0                         	| [$e3b6: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e3b8: ret  nz] [...]
0:
	move.b	unknown_62AF,d0                 	| [$e3b9: ld   a,(unknown_62AF)]
	cmp.b	#0x01,d0                         	| [$e3bc: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e3be: ret  z] [...]
0:
	move.b	unknown_62B0,d0                 	| [$e3bf: ld   a,(unknown_62B0)]
	cmp.b	#0x01,d0                         	| [$e3c2: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e3c4: ret  z] [...]
0:
	jbsr	l_e463                            	| [$e3c5: call $E463]
	rts                                    	| [$e3c8: ret]
	move.b	unknown_62BC,d0                 	| [$e3c9: ld   a,(unknown_62BC)]
	cmp.b	#0x01,d0                         	| [$e3cc: cp   $01]
	jne	l_e3d8                             	| [$e3ce: jr   nz,$E3D8]
	clr.b	d0                               	| [$e3d0: xor  a]
	move.b	d0,unknown_62BC                 	| [$e3d1: ld   (unknown_62BC),a]
	jbsr	l_e463                            	| [$e3d4: call $E463]
	rts                                    	| [$e3d7: ret]
l_e3d8:
	move.b	unknown_62BC,d0                 	| [$e3d8: ld   a,(unknown_62BC)]
	addq.b	#1,d0                           	| [$e3db: inc  a]
	move.b	d0,unknown_62BC                 	| [$e3dc: ld   (unknown_62BC),a]
	rts                                    	| [$e3df: ret]
l_e3e0:
	lea	player_struct_6580,a2          	| [$e3e0: ld   ix,player_struct_6580]
	lea	unknown_62BD,a3                	| [$e3e4: ld   iy,unknown_62BD]
	move.w	player_logical_address_6009,d3	| [$e3e8: ld   de,(player_logical_address_6009)]
	jbsr	l_e3f0                            	| [$e3ec: call $E3F0]
	rts                                    	| [$e3ef: ret]
	
* < D3: character logical address
* < A2
* < A3
l_e3f0:
	move.b	(A3),d0                    	| [$e3f0: ld   a,(iy+$00)]
	                         	| [$e3f3: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e3f5: ret  z] [...]
0:
	addq.w	#1,a3
	LOAD_AX_BE_WORD_DY	a3,d6
	                  	| [$e3f6: ld   h,(iy+$01)]
	                  	| [$e3f9: ld   l,(iy+$02)]
	subq.w	#1,a3
	bsr		read_rom                         	| [$e3fc: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$e3fd: cp   $FF]
	jeq	l_e45e                             	| [$e3ff: jr   z,$E45E]

	movem.l	a2/a3,-(sp)                        	| [$e401: push ix]

	                        	| [$e403: push iy]

	move.w	d6,-(sp)                        	| [$e405: push hl]
	exg	d3,d6                              	| [$e406: ex   de,hl]
	move.b	(0x03,a3),d0                    	| [$e407: ld   a,(iy+$03)]
	cmp.b	#0x80,d0                         	| [$e40a: cp   $80]
	jne	l_e413                             	| [$e40c: jr   nz,$E413]
	jbsr	character_can_walk_left_0DCC      	| [$e40e: call character_can_walk_left_0DCC]
	jra	l_e416                             	| [$e411: jr   $E416]
l_e413:
	jbsr	character_can_walk_right_0D71     	| [$e413: call character_can_walk_right_0D71]
l_e416:
	move.b	way_clear_flag_600B,d0          	| [$e416: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$e419: cp   $02]
	movem.w	(sp)+,d6                        	| [$e41b: pop  hl]
	movem.l	(sp)+,a2/a3                        	| [$e41c: pop  iy]
	                        	| [$e41e: pop  ix]
	jne	l_e45e                             	| [$e420: jr   nz,$E45E]

	bsr		read_rom                         	| [$e422: ld   a,(hl)]
	move.b	d0,d1                           	| [$e423: ld   b,a]
	move.b	(0x03,a3),d0                    	| [$e424: ld   a,(iy+$03)]
	or.b	d1,d0                             	| [$e427: or   b]
	move.b	d0,(A2)                    	| [$e428: ld   (ix+$00),a]
	addq.w	#1,d6                           	| [$e42b: inc  hl]
 
	bsr		read_rom                         	| [$e42c: ld   a,(hl)]
	move.b	d0,d1                           	| [$e42d: ld   b,a]
	move.b	(0x04,a3),d0                    	| [$e42e: ld   a,(iy+$04)]
	                         	| [$e431: cp   $00]
	jeq	l_e43a                             	| [$e433: jr   z,$E43A]
	subq.b	#1,d0                           	| [$e435: dec  a]
	move.b	d0,(0x04,a3)                    	| [$e436: ld   (iy+$04),a]
	addq.b	#1,d1                           	| [$e439: inc  b]
l_e43a:
	move.b	(0x03,a3),d0                    	| [$e43a: ld   a,(iy+$03)]
	cmp.b	#0x80,d0                         	| [$e43d: cp   $80]
	jne	l_e445                             	| [$e43f: jr   nz,$E445]
	move.b	d1,d0                           	| [$e441: ld   a,b]
	not.b	d0                               	| [$e442: cpl]
	addq.b	#1,d0                           	| [$e443: inc  a]
	move.b	d0,d1                           	| [$e444: ld   b,a]
l_e445:
	move.b	(0x02,a2),d0                    	| [$e445: ld   a,(ix+$02)]
	add.b	d1,d0                            	| [$e448: add  a,b]
	move.b	d0,(0x02,a2)                    	| [$e449: ld   (ix+$02),a]
	addq.w	#1,d6                           	| [$e44c: inc  hl]
	bsr		read_rom                         	| [$e44d: ld   a,(hl)]
	move.b	d0,d1                           	| [$e44e: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$e44f: ld   a,(ix+$03)]
	add.b	d1,d0                            	| [$e452: add  a,b]
	move.b	d0,(0x03,a2)                    	| [$e453: ld   (ix+$03),a]
	addq.w	#1,d6                           	| [$e456: inc  hl]
	addq.w	#1,a3
	STORE_DX_BE_WORD_AY	d6,a3
								| [$e457: ld   (iy+$01),h]
								| [$e45a: ld   (iy+$02),l]
	subq.w	#1,a3
	rts                                    	| [$e45d: ret]
l_e45e:
	clr.b	d0                               	| [$e45e: xor  a]
	move.b	d0,(A3)                    	| [$e45f: ld   (iy+$00),a]
	rts                                    	| [$e462: ret]
l_e463:
	jbsr	test_pickup_flag_F4E3             	| [$e463: call test_pickup_flag_F4E3]
	move.b	d1,d0                           	| [$e466: ld   a,b]
	cmp.b	#0x01,d0                         	| [$e467: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e469: ret  nz] [...]
0:
	move.b	(A3),d0                    	| [$e46a: ld   a,(iy+$00)]
	                         	| [$e46d: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$e46f: ret  nz] [...]
0:
	* fire pressed but player not holding any object: handle jump
	move.b	#0x01,d0                        	| [$e470: ld   a,$01]
	move.b	d0,(A3)+                    	| [$e472: ld   (iy+$00),a]
	move.w	#0xE4A4,d6                      	| [$e475: ld   hl,$E4A4]
	STORE_DX_BE_WORD_AY	d6,a3
	subq.w	#1,a3                    	| [$e478: ld   (iy+$01),h]
	                    	| [$e47b: ld   (iy+$02),l]
	move.b	(A2),d0                    	| [$e47e: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e481: and  $80]
	move.b	d0,(0x03,a3)                    	| [$e483: ld   (iy+$03),a]
	rts                                    	| [$e486: ret]
l_e487:
	move.b	(A3),d0                    	| [$e487: ld   a,(iy+$00)]
	                         	| [$e48a: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$e48c: ret  nz] [...]
0:
	move.b	#0x01,d0                        	| [$e48d: ld   a,$01]
	move.b	d0,(A3)+                    	| [$e48f: ld   (iy+$00),a]
	move.w	#0xE501,d6                      	| [$e492: ld   hl,$E501]
	STORE_DX_BE_WORD_AY	d6,a3                    	| [$e495: ld   (iy+$01),h]
	subq.w	#1,a3                    	| [$e498: ld   (iy+$02),l]
	move.b	(A2),d0                    	| [$e49b: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e49e: and  $80]
	move.b	d0,(0x03,a3)                    	| [$e4a0: ld   (iy+$03),a]
	rts                                    	| [$e4a3: ret]

* < D0: screen number
* < D6: logical address

convert_logical_to_screen_address_E55E:
	cmp.b	#0x01,d0                         	| [$e55e: cp   $01]
	jne	l_e566                             	| [$e560: jr   nz,$E566]
	                           	| [$e562: ld   a,h]
	add.w	#0x5000,d6                         	| [$e563: add  a,$50]
	rts                                    	| [$e565: ret]
l_e566:
	cmp.b	#0x02,d0                         	| [$e566: cp   $02]
	jne	l_e56e                             	| [$e568: jr   nz,$E56E]
	                           	| [$e56a: ld   a,h]
	add.w	#0x4C00,d6                         	| [$e56b: add  a,$4C]
	rts                                    	| [$e56d: ret]
l_e56e:
	cmp.b	#0x03,d0                         	| [$e56e: cp   $03]
	jne	l_e576                             	| [$e570: jr   nz,$E576]
	                           	| [$e572: ld   a,h]
	add.w	#0x4800,d6                         	| [$e573: add  a,$48]
	rts                                    	| [$e575: ret]
l_e576:
	cmp.b	#0x04,d0                         	| [$e576: cp   $04]
	jne	l_e57e                             	| [$e578: jr   nz,$E57E]
	                           	| [$e57a: ld   a,h]
	add.w	#0x6000,d6                         	| [$e57b: add  a,$60]
	rts                                    	| [$e57d: ret]
l_e57e:
	cmp.b	#0x05,d0                         	| [$e57e: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$e580: ret  nz] [...]
0:
	                           	| [$e581: ld   a,h]
	add.w	#0x5C00,d6                         	| [$e582: add  a,$5C]
	rts                                    	| [$e584: ret]

memset_E585:
	move.b	d0,(A2)+                    	| [$e585: ld   (ix+$00),a]
	                           	| [$e588: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	memset_E585                        	| [$e58a: djnz memset_E585]
l_e58c:
	clr.b	d0                               	| [$e58c: xor  a]
	lea	player_has_gun_6293,a2                	| [$e58d: ld   ix,player_has_gun_6293]
	move.b	#0x24,d1                        	| [$e591: ld   b,$24]
l_e593:
	move.b	d0,(A2)+                    	| [$e593: ld   (ix+$00),a]
											| [$e596: inc  ix]
 
	subq.b	#1,d1                           	| [...]
	jne	l_e593                             	| [$e598: djnz $E593]
	
	* in case gun cheat mode is set, enable it now (after player variables
	* have been cleared)
	bsr		check_if_must_award_gun_d7a9
	                              	| [$e59a: xor  a]
	clr.b	bomb_must_detonate_62F5                 	| [$e59b: ld   (bomb_must_detonate_62F5),a]
	clr.l	bomb_explosion_tiles_pointer_62F6                 	| [$e59e: ld   (bomb_explosion_tiles_pointer_62F6),a]
                	| [$e5a1: ld   (unknown_62F7),a]
	clr.w	explosion_screen_address_62F8                 	| [$e5a4: ld   (explosion_screen_address_62F8),a]
	                 	| [$e5a7: ld   (unknown_62F9),a]
	clr.b	bomb_explosion_frame_timer_62FA                 	| [$e5aa: ld   (bomb_explosion_frame_timer_62FA),a]
	clr.b	unknown_62FB                 	| [$e5ad: ld   (unknown_62FB),a]
	clr.b	bomb_picked_up_6323                 	| [$e5b0: ld   (bomb_picked_up_6323),a]
	clr.b	bomb_timer_6324                 	| [$e5b3: ld   (bomb_timer_6324),a]
	clr.w	screen_base_screen_address_6326                 	| [$e5b6: ld   (screen_base_screen_address_6326),a]
											| [$e5b9: ld   (unknown_6327),a]
	clr.b	player_in_elevator_5_62E5                 	| [$e5bc: ld   (player_in_elevator_5_62E5),a]
	clr.b	guard_1_in_elevator_5_62E9                 	| [$e5bf: ld   (guard_1_in_elevator_5_62E9),a]
	clr.b	unknown_62EA                 	| [$e5c2: ld   (unknown_62EA),a]
	clr.b	guard_2_in_elevator_5_62ED                 	| [$e5c5: ld   (guard_2_in_elevator_5_62ED),a]
	clr.b	unknown_62EE                 	| [$e5c8: ld   (unknown_62EE),a]
	clr.b	unknown_62D2                 	| [$e5cb: ld   (unknown_62D2),a]
	jbsr	reset_barrow_position_f9cc                            	| [$e5ce: call $F9CC]
	rts                                    	| [$e5d1: ret]

test_gun_button_e5d2:
	clr.b	d1                               	| [$e5d2: ld   b,$00]
	move.b	gameplay_allowed_6054,d0        	| [$e5d4: ld   a,(gameplay_allowed_6054)]
	                         	| [$e5d7: cp   $00]
	jeq	l_e60b                             	| [$e5d9: jr   z,$E60B]
	move.b	unknown_61FD,d0                 	| [$e5db: ld   a,(unknown_61FD)]
	cmp.b	#0x01,d0                         	| [$e5de: cp   $01]
	jeq	l_e5f8                             	| [$e5e0: jr   z,$E5F8]
	move.b	player_previous_input_6050,d0   	| [$e5e2: ld   a,(player_previous_input_6050)]
	and.b	#0x04,d0                         	| [$e5e5: and  $04]
	cmp.b	#0x04,d0                         	| [$e5e7: cp   $04]
	jeq	l_e5f7                             	| [$e5e9: jr   z,$E5F7]
	move.b	player_input_6026,d0            	| [$e5eb: ld   a,(player_input_6026)]
	and.b	#0x04,d0                         	| [$e5ee: and  $04]
	cmp.b	#0x04,d0                         	| [$e5f0: cp   $04]
	jne	l_e5f7                             	| [$e5f2: jr   nz,$E5F7]
	* shoot the gun
	move.b	#0x01,d1                        	| [$e5f4: ld   b,$01]
	rts                                    	| [$e5f6: ret]
l_e5f7:
	rts                                    	| [$e5f7: ret]
l_e5f8:
	move.b	coin_start_prev_inputs_6052,d0  	| [$e5f8: ld   a,(coin_start_prev_inputs_6052)]
	and.b	#0x04,d0                         	| [$e5fb: and  $04]
	cmp.b	#0x04,d0                         	| [$e5fd: cp   $04]
	bne.b	0f                               	| [...]
	rts                                    	| [$e5ff: ret  z] [...]
0:
	move.b	coin_start_inputs_6051,d0       	| [$e600: ld   a,(coin_start_inputs_6051)]
	and.b	#0x04,d0                         	| [$e603: and  $04]
	cmp.b	#0x04,d0                         	| [$e605: cp   $04]
	beq.b	0f                               	| [...]
	rts                                    	| [$e607: ret  nz] [...]
0:
	move.b	#0x01,d1                        	| [$e608: ld   b,$01]
	rts                                    	| [$e60a: ret]
l_e60b:
	move.b	player_previous_input_6050,d0   	| [$e60b: ld   a,(player_previous_input_6050)]
	and.b	#0x04,d0                         	| [$e60e: and  $04]
	cmp.b	#0x04,d0                         	| [$e610: cp   $04]
	beq.b	0f                               	| [...]
	rts                                    	| [$e612: ret  nz] [...]
0:
	move.b	#0x01,d1                        	| [$e613: ld   b,$01]
	rts                                    	| [$e615: ret]
l_e616:
	lea	unknown_6295,a1                	| [$e616: ld   de,unknown_6295]
	jbsr	l_e629                            	| [$e619: call $E629]
	lea	unknown_629D,a1                	| [$e61c: ld   de,unknown_629D]
	jbsr	l_e629                            	| [$e61f: call $E629]
	lea	unknown_62A5,a1                	| [$e622: ld   de,unknown_62A5]
	jbsr	l_e629                            	| [$e625: call $E629]
	rts                                    	| [$e628: ret]
l_e629:
	move.b	(a1),d0                         	| [$e629: ld   a,(de)]
	                         	| [$e62a: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e62c: ret  z] [...]
0:
	subq.b	#1,d0                           	| [$e62d: dec  a]
	move.b	d0,(a1)                         	| [$e62e: ld   (de),a]
	rts                                    	| [$e62f: ret]
	
check_if_gun_is_picked_e630:
	move.b	player_screen_600D,d0           	| [$e630: ld   a,(player_screen_600D)]
	cmp.b	#0x03,d0                         	| [$e633: cp   $03]
	beq.b	0f                               	| [...]
	rts                                    	| [$e635: ret  nz] [...]
0:
	lea	player_struct_6580,a2          	| [$e636: ld   ix,player_struct_6580]
	move.b	(0x03,a2),d0                    	| [$e63a: ld   a,(ix+$03)]
	cmp.b	#0xA0,d0                         	| [$e63d: cp   $A0]
	jne	l_e667                             	| [$e63f: jr   nz,$E667]
	move.b	(0x02,a2),d0                    	| [$e641: ld   a,(ix+$02)]
	cmp.b	#0x58,d0                         	| [$e644: cp   $58]
	jcs	l_e667                             	| [$e646: jr   c,$E667]
	cmp.b	#0x60,d0                         	| [$e648: cp   $60]
	jcc	l_e667                             	| [$e64a: jr   nc,$E667]
	move.b	#0x01,d0                        	| [$e64c: ld   a,$01]
	move.b	d0,player_has_gun_6293                 	| [$e64e: ld   (player_has_gun_6293),a]
	move.b	#0x06,d0                        	| [$e651: ld   a,$06]
	move.b	d0,player_gun_nb_shots_6294                 	| [$e653: ld   (player_gun_nb_shots_6294),a]
	move.b	d0,guard_1_gun_nb_shots_629C                 	| [$e656: ld   (guard_1_gun_nb_shots_629C),a]
	move.b	d0,guard_2_gun_nb_shots_62A4                 	| [$e659: ld   (guard_2_gun_nb_shots_62A4),a]
	* remove gun from armoury
	move.b	#0xE0,d0                        	| [$e65c: ld   a,$E0]
	move.w	#0x9295,d6                       	| [$e65e: ld   ($9295),a]
    jbsr	osd_w_videoram
	move.b	#0x3F,d0                        	| [$e661: ld   a,$3F]
	move.w	#0x9A95,d6                       	| [$e663: ld   ($9A95),a]
    jbsr	osd_w_colorram
	rts                                    	| [$e666: ret]
l_e667:
	tst.b	player_gun_nb_shots_6294                 	| [$e667: ld   a,(player_gun_nb_shots_6294)]
	                         	| [$e66a: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$e66c: ret  nz] [...]
0:
	* player doesn't have any bullets: draw gun tile
	move.b	#0xBD,d0                        	| [$e66d: ld   a,$BD]
	move.w	#0x9295,d6                       	| [$e66f: ld   ($9295),a]
    jbsr	osd_w_videoram
	move.b	#0x36,d0                        	| [$e672: ld   a,$36]
	move.w	#0x9A95,d6                       	| [$e674: ld   ($9A95),a]
    jbsr	osd_w_colorram
	rts                                    	| [$e677: ret]
l_e678:
	clr.b	d0                               	| [$e678: xor  a]
	move.b	d0,unknown_6346                 	| [$e679: ld   (unknown_6346),a]
	rts                                    	| [$e67c: ret]
l_e67d:
	lea	guard_2_struct_6598,a2         	| [$e67d: ld   ix,guard_2_struct_6598]
	lea	guard_2_has_gun_62A3,a3                	| [$e681: ld   iy,guard_2_has_gun_62A3]
	move.b	guards_shoot_on_sight_6299,d0                 	| [$e685: ld   a,(guards_shoot_on_sight_6299)]
	cmp.b	#0x01,d0                         	| [$e688: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e68a: ret  nz] [...]
0:
	move.b	is_a_bullet_in_air_6297,d0                 	| [$e68b: ld   a,(is_a_bullet_in_air_6297)]
	cmp.b	#0x01,d0                         	| [$e68e: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e690: ret  z] [...]
0:
	move.b	guard_2_gun_nb_shots_62A4,d0                 	| [$e691: ld   a,(guard_2_gun_nb_shots_62A4)]
	                         	| [$e694: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e696: ret  z] [...]
0:
	jbsr	l_e853                            	| [$e697: call $E853]
	move.b	d1,d0                           	| [$e69a: ld   a,b]
	cmp.b	#0x01,d0                         	| [$e69b: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e69d: ret  z] [...]
0:
	move.b	guard_2_sees_player_right_607C,d0	| [$e69e: ld   a,(guard_2_sees_player_right_607C)]
	cmp.b	#0x80,d0                         	| [$e6a1: cp   $80]
	jne	l_e6af                             	| [$e6a3: jr   nz,$E6AF]
	move.b	(A2),d0                    	| [$e6a5: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e6a8: and  $80]
	                         	| [$e6aa: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$e6ac: ret  nz] [...]
0:
	jra	l_e6b7                             	| [$e6ad: jr   $E6B7]
l_e6af:
	move.b	(A2),d0                    	| [$e6af: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e6b2: and  $80]
	                        	| [$e6b4: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e6b6: ret  z] [...]
0:
l_e6b7:
	move.b	guard_2_screen_609A,d0          	| [$e6b7: ld   a,(guard_2_screen_609A)]
	move.b	d0,d1                           	| [$e6ba: ld   b,a]
	move.b	player_screen_600D,d0           	| [$e6bb: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$e6be: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$e6bf: ret  nz] [...]
0:
	move.b	unknown_6157,d0                 	| [$e6c0: ld   a,(unknown_6157)]
	                         	| [$e6c3: cp   $00]
	jne	l_e678                             	| [$e6c5: jr   nz,$E678]
	move.b	unknown_6346,d0                 	| [$e6c7: ld   a,(unknown_6346)]
	cmp.b	#0x0F,d0                         	| [$e6ca: cp   $0F]
	jcs	l_e6de                             	| [$e6cc: jr   c,$E6DE]
	move.b	#0x28,d2                        	| [$e6ce: ld   c,$28]
	move.b	(A2),d0                    	| [$e6d0: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e6d3: and  $80]
	or.b	d2,d0                             	| [$e6d5: or   c]
	move.b	d0,(A2)                    	| [$e6d6: ld   (ix+$00),a]
	move.b	#0x20,d0                        	| [$e6d9: ld   a,$20]
	move.b	d0,(0x02,a3)                    	| [$e6db: ld   (iy+$02),a]
l_e6de:
	jbsr	l_e82c                            	| [$e6de: call $E82C]
	move.b	unknown_6346,d0                 	| [$e6e1: ld   a,(unknown_6346)]
	addq.b	#1,d0                           	| [$e6e4: inc  a]
	move.b	d0,unknown_6346                 	| [$e6e5: ld   (unknown_6346),a]
	cmp.b	d1,d0                            	| [$e6e8: cp   b]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e6e9: ret  c] [...]
0:
	clr.b	d0                               	| [$e6ea: xor  a]
	move.b	d0,unknown_6346                 	| [$e6eb: ld   (unknown_6346),a]
	move.b	#0x28,d0                        	| [$e6ee: ld   a,$28]
	move.b	d0,d2                           	| [$e6f0: ld   c,a]
	jra	l_e7b4                             	| [$e6f1: jp   $E7B4]
l_e6f4:
	clr.b	d0                               	| [$e6f4: xor  a]
	move.b	d0,unknown_6345                 	| [$e6f5: ld   (unknown_6345),a]
	rts                                    	| [$e6f8: ret]
l_e6f9:
	lea	guard_1_struct_6594,a2         	| [$e6f9: ld   ix,guard_1_struct_6594]
	lea	guard_1_has_gun_629B,a3                	| [$e6fd: ld   iy,guard_1_has_gun_629B]
	move.b	guards_shoot_on_sight_6299,d0                 	| [$e701: ld   a,(guards_shoot_on_sight_6299)]
	cmp.b	#0x01,d0                         	| [$e704: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e706: ret  nz] [...]
0:
	move.b	is_a_bullet_in_air_6297,d0                 	| [$e707: ld   a,(is_a_bullet_in_air_6297)]
	cmp.b	#0x01,d0                         	| [$e70a: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e70c: ret  z] [...]
0:
	move.b	guard_1_gun_nb_shots_629C,d0                 	| [$e70d: ld   a,(guard_1_gun_nb_shots_629C)]
	                         	| [$e710: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e712: ret  z] [...]
0:
	jbsr	l_e853                            	| [$e713: call $E853]
	move.b	d1,d0                           	| [$e716: ld   a,b]
	cmp.b	#0x01,d0                         	| [$e717: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e719: ret  z] [...]
0:
	move.b	guard_1_sees_player_right_603C,d0	| [$e71a: ld   a,(guard_1_sees_player_right_603C)]
	cmp.b	#0x80,d0                         	| [$e71d: cp   $80]
	jne	l_e72b                             	| [$e71f: jr   nz,$E72B]
	move.b	(A2),d0                    	| [$e721: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e724: and  $80]
	                         	| [$e726: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$e728: ret  nz] [...]
0:
	jra	l_e733                             	| [$e729: jr   $E733]
l_e72b:
	move.b	(A2),d0                    	| [$e72b: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e72e: and  $80]
	                         	| [$e730: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e732: ret  z] [...]
0:
l_e733:
	move.b	guard_1_screen_6099,d0          	| [$e733: ld   a,(guard_1_screen_6099)]
	move.b	d0,d1                           	| [$e736: ld   b,a]
	move.b	player_screen_600D,d0           	| [$e737: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$e73a: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$e73b: ret  nz] [...]
0:
	move.b	unknown_6156,d0                 	| [$e73c: ld   a,(unknown_6156)]
	                         	| [$e73f: cp   $00]
	jne	l_e6f4                             	| [$e741: jr   nz,$E6F4]
	move.b	unknown_6345,d0                 	| [$e743: ld   a,(unknown_6345)]
	cmp.b	#0x0F,d0                         	| [$e746: cp   $0F]
	jcs	l_e75a                             	| [$e748: jr   c,$E75A]
	move.b	#0x28,d2                        	| [$e74a: ld   c,$28]
	move.b	(A2),d0                    	| [$e74c: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e74f: and  $80]
	or.b	d2,d0                             	| [$e751: or   c]
	move.b	d0,(A2)                    	| [$e752: ld   (ix+$00),a]
	move.b	#0x20,d0                        	| [$e755: ld   a,$20]
	move.b	d0,(0x02,a3)                    	| [$e757: ld   (iy+$02),a]
l_e75a:
	jbsr	l_e82c                            	| [$e75a: call $E82C]
	move.b	unknown_6345,d0                 	| [$e75d: ld   a,(unknown_6345)]
	addq.b	#1,d0                           	| [$e760: inc  a]
	move.b	d0,unknown_6345                 	| [$e761: ld   (unknown_6345),a]
	cmp.b	d1,d0                            	| [$e764: cp   b]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e765: ret  c] [...]
0:
	clr.b	d0                               	| [$e766: xor  a]
	move.b	d0,unknown_6345                 	| [$e767: ld   (unknown_6345),a]
	move.b	#0x28,d0                        	| [$e76a: ld   a,$28]
	move.b	d0,d2                           	| [$e76c: ld   c,a]
	jra	l_e7b4                             	| [$e76d: jr   $E7B4]

clear_gun_status:
	move.b	#0xE0,d0                        	| [$e797: ld   a,$E0]
	move.w	#0x921F,d6                       	| [$e799: ld   ($921F),a]
    jbsr	osd_w_videoram
	move.b	#0x3F,d0                        	| [$e797: ld   a,$E0]
	move.w	#0x9A1F,d6                       	| [$e77c: ld   ($9A1F),a]
    jbsr	osd_w_colorram
	rts
	
handle_player_gun_e76f:
	move.b	player_has_gun_6293,d0                 	| [$e76f: ld   a,(player_has_gun_6293)]
	cmp.b	#0x01,d0                         	| [$e772: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e774: ret  nz] [...]
0:
	* jotd: avoid flickering: either draw the gun tile or draw blank
	* but not gun then blank. Requires some adapting!
	
	tst.b	player_gun_nb_shots_6294
	bne.b	0f
	* clear gun icon if no more bullets
	jbsr		clear_gun_status
	* and exit, no bullets, nothing to do
	rts
0:
	addq.b	#0x04,gun_flash_timer_6352                 	| [$e78b: ld   a,(gun_flash_timer_6352)]
	move.b	gun_flash_timer_6352,d0                 	| [$e790: ld   (gun_flash_timer_6352),a]
	cmp.b	#0x80,d0                         	| [$e793: cp   $80]
	jcs	0f                             	| [$e795: jr   c,$E79C]
	* clear gun icon 50% of the time
	jbsr		clear_gun_status
	* test if shoot button pressed 
	jra		10f
0:
	* draw flashing gun in status bar 50% of the time
	move.b	#0xBD,d0                        	| [$e775: ld   a,$BD]
	move.w	#0x921F,d6                       	| [$e777: ld   ($921F),a]
    jbsr	osd_w_videoram
	.ifdef	__amiga__
	* almost same color, using this
	move.b	#0x36,d0                        	| [$e77a: ld   a,$35]
	.else
	move.b	#0x35,d0                        	| [$e77a: ld   a,$35]
	.endif
	move.w	#0x9A1F,d6                       	| [$e77c: ld   ($9A1F),a]
    jbsr	osd_w_colorram
10:
	tst.b	is_a_bullet_in_air_6297                 	| [$e79c: ld   a,(is_a_bullet_in_air_6297)]
	                         	| [$e79f: cp   $00]
	beq.b	1f                               	| [...]
	rts                                    	| [$e7a1: ret  nz] [...]
1:
	jbsr	test_gun_button_e5d2                            	| [$e7a2: call $E5D2]
	move.b	d1,d0                           	| [$e7a5: ld   a,b]
	                         	| [$e7a6: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e7a8: ret  z] [...]
0:
	move.b	#0x11,d0                        	| [$e7a9: ld   a,$11]
	move.b	d0,d2                           	| [$e7ab: ld   c,a]
	lea	player_struct_6580,a2          	| [$e7ac: ld   ix,player_struct_6580]
	lea	player_has_gun_6293,a3                	| [$e7b0: ld   iy,player_has_gun_6293]
l_e7b4:
	move.b	(0x01,a3),d0                    	| [$e7b4: ld   a,(iy+$01)]
	                         	| [$e7b7: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e7b9: ret  z] [...]
0:
	* consume one bullet
	tst.b	infinite_bullets_flag
	bne.b	0f
	subq.b	#1,(0x01,a3)                    	| [$e7ba: ld   a,(iy+$01)]
											| [$e7bd: dec  a]
												| [$e7be: ld   (iy+$01),a]
0:
	move.b	#0x01,d0                        	| [$e7c1: ld   a,$01]
	move.b	d0,is_a_bullet_in_air_6297                 	| [$e7c3: ld   (is_a_bullet_in_air_6297),a]
	move.b	#0x01,d1                        	| [$e7c6: ld   b,$01]
	move.b	(A2),d0                    	| [$e7c8: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e7cb: and  $80]
	cmp.b	#0x80,d0                         	| [$e7cd: cp   $80]
	jne	l_e7d3                             	| [$e7cf: jr   nz,$E7D3]
	st.b	d1                                	| [$e7d1: ld   b,$FF]
l_e7d3:
	move.b	d1,d0                           	| [$e7d3: ld   a,b]
	move.b	d0,bullet_direction_6298                 	| [$e7d4: ld   (bullet_direction_6298),a]
	move.b	(A2),d0                    	| [$e7d7: ld   a,(ix+$00)]
	and.b	#0x80,d0                         	| [$e7da: and  $80]
	or.b	d2,d0                             	| [$e7dc: or   c]
	move.b	d0,(A2)                    	| [$e7dd: ld   (ix+$00),a]
	move.b	(0x02,a2),d0                    	| [$e7e0: ld   a,(ix+$02)]
	.rept	10
	add.b	d1,d0                            	| [$e7e3: add  a,b]
	.endr								| [$e7e4: add  a,b]
									| [$e7e5: add  a,b]
									| [$e7e6: add  a,b]
									| [$e7e7: add  a,b]
									| [$e7e8: add  a,b]
									| [$e7e9: add  a,b]
									| [$e7ea: add  a,b]
									| [$e7eb: add  a,b]
									| [$e7ec: add  a,b]
									| [$e7ed: add  a,b]
	move.b	d0,bullet_x_658E                 	| [$e7ee: ld   (bullet_x_658E),a]
	move.b	(0x03,a2),d0                    	| [$e7f1: ld   a,(ix+$03)]
	move.b	d0,bullet_y_658F                 	| [$e7f4: ld   (bullet_y_658F),a]
	move.b	#0x10,d0                        	| [$e7f7: ld   a,$10]
	move.b	d0,bullet_shadow_sprite_658C   	| [$e7f9: ld   (bullet_shadow_sprite_658C),a]
	move.b	#0x0F,d0                        	| [$e7fc: ld   a,$0F]
	move.b	d0,unknown_658D                 	| [$e7fe: ld   (unknown_658D),a]
	move.b	#0x30,d0                        	| [$e801: ld   a,$30]
	move.b	d0,(0x02,a3)                    	| [$e803: ld   (iy+$02),a]
	move.b	unknown_6348,d0                 	| [$e806: ld   a,(unknown_6348)]
	cmp.b	#0x01,d0                         	| [$e809: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e80b: ret  z] [...]
0:
	move.b	gameplay_allowed_6054,d0        	| [$e80c: ld   a,(gameplay_allowed_6054)]
	                         	| [$e80f: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e811: ret  z] [...]
0:
    move.w	#SHOT_SND,d0         	| [$e812: ld   hl,$5428]
    jbsr	start_a_sound   	| [$e815: ld   (unknown_634E),hl]
        	| [$e818: xor  a]
       	| [$e819: ld   (ay_sound_start_6142),a]
	move.b	#0x02,d0                        	| [$e81c: ld   a,$02]
	move.b	d0,unknown_6348                 	| [$e81e: ld   (unknown_6348),a]
	move.b	#0x0F,d0                        	| [$e821: ld   a,$0F]
	move.b	d0,unknown_634C                 	| [$e823: ld   (unknown_634C),a]
	move.b	#0x01,d0                        	| [$e826: ld   a,$01]
	move.b	d0,unknown_634D                 	| [$e828: ld   (unknown_634D),a]
	rts                                    	| [$e82b: ret]
l_e82c:
	move.b	guard_speed_6164,d0             	| [$e82c: ld   a,(guard_speed_6164)]
	move.b	#0x18,d1                        	| [$e82f: ld   b,$18]
	rts                                    	| [$e831: ret]

l_e853:
	move.b	(0x02,a2),d0                    	| [$e853: ld   a,(ix+$02)]
	move.b	#0x01,d1                        	| [$e856: ld   b,$01]
	cmp.b	#0xD8,d0                         	| [$e858: cp   $D8]
	bcs.b	0f                               	| [...]
	rts                                    	| [$e85a: ret  nc] [...]
0:
	cmp.b	#0x18,d0                         	| [$e85b: cp   $18]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e85d: ret  c] [...]
0:
	clr.b	d1                               	| [$e85e: ld   b,$00]
	rts                                    	| [$e860: ret]


l_e861:
	move.b	is_a_bullet_in_air_6297,d0                 	| [$e861: ld   a,(is_a_bullet_in_air_6297)]
	cmp.b	#0x01,d0                         	| [$e864: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e866: ret  nz] [...]
0:
	jra	l_e888                             	| [$e867: jr   $E888]
l_e869:
	move.b	is_a_bullet_in_air_6297,d0                 	| [$e869: ld   a,(is_a_bullet_in_air_6297)]
	cmp.b	#0x01,d0                         	| [$e86c: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e86e: ret  nz] [...]
0:
	move.b	check_scenery_disabled_61ED,d0  	| [$e86f: ld   a,(check_scenery_disabled_61ED)]
	cmp.b	#0x01,d0                         	| [$e872: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e874: ret  z] [...]
0:
	jbsr	l_eacb                            	| [$e875: call $EACB]
	move.w	#0x001F,d3                      	| [$e878: ld   de,$001F] 31
	add.w	d3,d6                            	| [$e87b: add  hl,de]
	bsr		read_rom                         	| [$e87c: ld   a,(hl)]
	jbsr	check_against_space_tiles_0E05    	| [$e87d: call check_against_space_tiles_0E05]
	move.b	way_clear_flag_600B,d0          	| [$e880: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$e883: cp   $02]
	jne	l_e914                             	| [$e885: jp   nz,$E914]
l_e888:
	move.b	bullet_x_658E,d0                 	| [$e888: ld   a,(bullet_x_658E)]
	cmp.b	#0x10,d0                         	| [$e88b: cp   $10]
	jcs	l_e914                             	| [$e88d: jp   c,$E914]
	cmp.b	#0xF0,d0                         	| [$e890: cp   $F0]
	jcc	l_e914                             	| [$e892: jp   nc,$E914]

	move.l	a2,-(sp)                        	| [$e895: push ix]
	move.b	player_screen_600D,d0           	| [$e897: ld   a,(player_screen_600D)]
	move.b	d0,current_character_screen_index_6098	| [$e89a: ld   (current_character_screen_index_6098),a]
	lea	player_struct_6580,a2          	| [$e89d: ld   ix,player_struct_6580]
	lea	player_death_flag_6025,a0      	| [$e8a1: ld   hl,player_death_flag_6025]
	lea	player_death_flag_6025,a1      	| [$e8a4: ld   de,player_death_flag_6025]
	jbsr	bullet_collision_e8de                            	| [$e8a7: call $E8DE]
	bsr		is_invincible
	beq.b	0f
	clr.b	player_death_flag_6025
0:
	move.b	guard_1_screen_6099,d0          	| [$e8aa: ld   a,(guard_1_screen_6099)]
	move.b	d0,current_character_screen_index_6098	| [$e8ad: ld   (current_character_screen_index_6098),a]
	lea	guard_1_struct_6594,a2         	| [$e8b0: ld   ix,guard_1_struct_6594]
	lea	guard_1_death_flag_629F,a0                	| [$e8b4: ld   hl,guard_1_death_flag_629F]
	lea	unknown_6156,a1                	| [$e8b7: ld   de,unknown_6156]
	jbsr	bullet_collision_e8de                            	| [$e8ba: call $E8DE]
	move.b	guard_2_screen_609A,d0          	| [$e8bd: ld   a,(guard_2_screen_609A)]
	move.b	d0,current_character_screen_index_6098	| [$e8c0: ld   (current_character_screen_index_6098),a]
	lea	guard_2_struct_6598,a2         	| [$e8c3: ld   ix,guard_2_struct_6598]
	lea	guard_2_death_flag_62A7,a0                	| [$e8c7: ld   hl,guard_2_death_flag_62A7]
	lea	unknown_6157,a1                	| [$e8ca: ld   de,unknown_6157]
	jbsr	bullet_collision_e8de                            	| [$e8cd: call $E8DE]
	move.l	(sp)+,a2                        	| [$e8d0: pop  ix]
	move.b	bullet_direction_6298,d0                 	| [$e8d2: ld   a,(bullet_direction_6298)]
	move.b	d0,d1                           	| [$e8d5: ld   b,a]
	move.b	bullet_x_658E,d0                 	| [$e8d6: ld   a,(bullet_x_658E)]
	add.b	d1,d0                            	| [$e8d9: add  a,b]
	move.b	d0,bullet_x_658E                 	| [$e8da: ld   (bullet_x_658E),a]
	rts                                    	| [$e8dd: ret]
bullet_collision_e8de:
	move.b	current_character_screen_index_6098,d0	| [$e8de: ld   a,(current_character_screen_index_6098)]
	move.b	d0,d1                           	| [$e8e1: ld   b,a]
	move.b	player_screen_600D,d0           	| [$e8e2: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$e8e5: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$e8e6: ret  nz] [...]
0:
	move.b	(a1),d0                         	| [$e8e7: ld   a,(de)]
	cmp.b	#0x01,d0                         	| [$e8e8: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e8ea: ret  z] [...]
0:
	move.b	(0x02,a2),d0                    	| [$e8eb: ld   a,(ix+$02)]
	sub.b	#0x08,d0                         	| [$e8ee: sub  $08]
	move.b	d0,d1                           	| [$e8f0: ld   b,a]
	add.b	#0x10,d0                         	| [$e8f1: add  a,$10]
	move.b	d0,d2                           	| [$e8f3: ld   c,a]
	move.b	bullet_x_658E,d0                 	| [$e8f4: ld   a,(bullet_x_658E)]
	cmp.b	d1,d0                            	| [$e8f7: cp   b]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e8f8: ret  c] [...]
0:
	cmp.b	d2,d0                            	| [$e8f9: cp   c]
	bcs.b	0f                               	| [...]
	rts                                    	| [$e8fa: ret  nc] [...]
0:
	move.b	bullet_y_658F,d0                 	| [$e8fb: ld   a,(bullet_y_658F)]
	addq.b	#0x07,d0                        	| [$e8fe: add  a,$07]
	move.b	d0,d1                           	| [$e900: ld   b,a]
	sub.b	#0x0E,d0                         	| [$e901: sub  $0E]
	move.b	d0,d2                           	| [$e903: ld   c,a]
	move.b	(0x03,a2),d0                    	| [$e904: ld   a,(ix+$03)]
	cmp.b	d1,d0                            	| [$e907: cp   b]
	bcs.b	0f                               	| [...]
	rts                                    	| [$e908: ret  nc] [...]
0:
	cmp.b	d2,d0                            	| [$e909: cp   c]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e90a: ret  c] [...]
0:
	move.b	#0x01,d0                        	| [$e90b: ld   a,$01]
	move.b	d0,(a0)                         	| [$e90d: ld   (hl),a]
	move.b	d0,guards_shoot_on_sight_6299                 	| [$e90e: ld   (guards_shoot_on_sight_6299),a]
	jra	l_e914                             	| [$e911: jr   $E914]
	rts                                    	| [$e913: ret]
l_e914:
	clr.b	d0                               	| [$e914: xor  a]
	move.b	d0,is_a_bullet_in_air_6297                 	| [$e915: ld   (is_a_bullet_in_air_6297),a]
	move.b	d0,bullet_y_658F                 	| [$e918: ld   (bullet_y_658F),a]
	rts                                    	| [$e91b: ret]
l_e91c:
	lea	player_struct_6580,a2          	| [$e91c: ld   ix,player_struct_6580]
	lea	unknown_62AF,a3                	| [$e920: ld   iy,unknown_62AF]
	move.b	player_screen_600D,d0           	| [$e924: ld   a,(player_screen_600D)]
	jbsr	l_e94f                            	| [$e927: call $E94F]
	lea	guard_1_struct_6594,a2         	| [$e92a: ld   ix,guard_1_struct_6594]
	lea	unknown_62B5,a3                	| [$e92e: ld   iy,unknown_62B5]
	move.b	guard_1_screen_6099,d0          	| [$e932: ld   a,(guard_1_screen_6099)]
	jbsr	l_e94f                            	| [$e935: call $E94F]
	lea	guard_2_struct_6598,a2         	| [$e938: ld   ix,guard_2_struct_6598]
	lea	unknown_62B9,a3                	| [$e93c: ld   iy,unknown_62B9]
	move.b	guard_2_screen_609A,d0          	| [$e940: ld   a,(guard_2_screen_609A)]
	jbsr	l_e94f                            	| [$e943: call $E94F]
	rts                                    	| [$e946: ret]
l_e947:
	clr.b	d0                               	| [$e947: xor  a]
	move.b	d0,(A3)                    	| [$e948: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$e94b: ld   (iy+$01),a]
	rts                                    	| [$e94e: ret]
l_e94f:
	cmp.b	#0x01,d0                         	| [$e94f: cp   $01]
	jne	l_e947                             	| [$e951: jr   nz,$E947]
	jbsr	l_e97c                            	| [$e953: call $E97C]
	jbsr	l_e9bf                            	| [$e956: call $E9BF]
	jbsr	l_e99e                            	| [$e959: call $E99E]
	move.b	(A3),d0                    	| [$e95c: ld   a,(iy+$00)]
	                         	| [$e95f: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$e961: ret  z] [...]
0:
	move.b	(0x01,a3),d0                    	| [$e962: ld   a,(iy+$01)]
	cmp.b	#0x01,d0                         	| [$e965: cp   $01]
	jeq	l_e974                             	| [$e967: jr   z,$E974]
	jbsr	osd_disable_vblank_interrupt	| di
	move.b	(0x03,a2),d0                    	| [$e96a: ld   a,(ix+$03)]
	cmp.b	#0x39,d0                         	| [$e96d: cp   $39]
	jcs	l_e974                             	| [$e96f: jr   c,$E974]
	subq.b	#1,(0x03,a2)                    	| [$e971: dec  (ix+$03)]
l_e974:
	addq.b	#2,(0x02,a2)                    	| [$e974: inc  (ix+$02)]
	                    	| [$e977: inc  (ix+$02)]
	jbsr	osd_enable_vblank_interrupt | ei
	rts                                    	| [$e97b: ret]
l_e97c:
	move.b	(0x02,a2),d0                    	| [$e97c: ld   a,(ix+$02)]
	cmp.b	#0x48,d0                         	| [$e97f: cp   $48]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e981: ret  c] [...]
0:
	cmp.b	#0x50,d0                         	| [$e982: cp   $50]
	bcs.b	0f                               	| [...]
	rts                                    	| [$e984: ret  nc] [...]
0:
	move.b	(0x03,a2),d0                    	| [$e985: ld   a,(ix+$03)]
	cmp.b	#0x70,d0                         	| [$e988: cp   $70]
	beq.b	0f                               	| [...]
	rts                                    	| [$e98a: ret  nz] [...]
0:
	move.b	mechanical_stair_frame_62AD,d0                 	| [$e98b: ld   a,(mechanical_stair_frame_62AD)]
		                         	| [$e98e: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$e990: ret  nz] [...]
0:
	move.b	#0x01,d0                        	| [$e991: ld   a,$01]
	move.b	d0,(A3)                    	| [$e993: ld   (iy+$00),a]
	move.b	(0x03,a2),d0                    	| [$e996: ld   a,(ix+$03)]
	addq.b	#1,d0                           	| [$e999: inc  a]
	move.b	d0,(0x03,a2)                    	| [$e99a: ld   (ix+$03),a]
	rts                                    	| [$e99d: ret]
l_e99e:
	move.b	(0x02,a2),d0                    	| [$e99e: ld   a,(ix+$02)]
	cmp.b	#0xB8,d0                         	| [$e9a1: cp   $B8]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e9a3: ret  c] [...]
0:
	cmp.b	#0xC0,d0                         	| [$e9a4: cp   $C0]
	bcs.b	0f                               	| [...]
	rts                                    	| [$e9a6: ret  nc] [...]
0:
	move.b	(0x03,a2),d0                    	| [$e9a7: ld   a,(ix+$03)]
	cmp.b	#0x38,d0                         	| [$e9aa: cp   $38]
	jeq	l_e9b6                             	| [$e9ac: jr   z,$E9B6]
	cmp.b	#0x37,d0                         	| [$e9ae: cp   $37]
	beq.b	0f                               	| [...]
	rts                                    	| [$e9b0: ret  nz] [...]
0:
	move.b	#0x38,d0                        	| [$e9b1: ld   a,$38]
	move.b	d0,(0x03,a2)                    	| [$e9b3: ld   (ix+$03),a]
l_e9b6:
	move.b	#0x01,d0                        	| [$e9b6: ld   a,$01]
	move.b	d0,(A3)                    	| [$e9b8: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$e9bb: ld   (iy+$01),a]
	rts                                    	| [$e9be: ret]
l_e9bf:
	move.b	(A3),d0                    	| [$e9bf: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$e9c2: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e9c4: ret  nz] [...]
0:
	move.b	(0x03,a2),d0                    	| [$e9c5: ld   a,(ix+$03)]
	cmp.b	#0x39,d0                         	| [$e9c8: cp   $39]
	bcs.b	0f                               	| [...]
	rts                                    	| [$e9ca: ret  nc] [...]
0:
	clr.b	d0                               	| [$e9cb: xor  a]
	move.b	d0,(A3)                    	| [$e9cc: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$e9cf: ld   (iy+$01),a]
	rts                                    	| [$e9d2: ret]
l_e9d3:
	move.b	unknown_62AC,d0                 	| [$e9d3: ld   a,(unknown_62AC)]
	cmp.b	#0x03,d0                         	| [$e9d6: cp   $03]
	bcc.b	0f                               	| [...]
	rts                                    	| [$e9d8: ret  c] [...]
0:
	clr.b	d0                               	| [$e9d9: xor  a]
	move.b	d0,unknown_62AC                 	| [$e9da: ld   (unknown_62AC),a]
	move.b	player_screen_600D,d0           	| [$e9dd: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$e9e0: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$e9e2: ret  nz] [...]
0:
	move.b	check_scenery_disabled_61ED,d0  	| [$e9e3: ld   a,(check_scenery_disabled_61ED)]
	cmp.b	#0x01,d0                         	| [$e9e6: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$e9e8: ret  z] [...]
0:
	* handle mechanical stairs
	LEA_ROM	       0x1B87,a2                      	| [$e9e9: ld   ix,$1B87]
	move.w	mechanical_stair_frame_62AD,d3             	| [$e9ed: ld   de,(mechanical_stair_frame_62AD)]
	add.w	d3,a2                            	| [$e9f1: add  ix,de]
	move.w	#0x92D0,d6                      	| [$e9f3: ld   hl,$92D0]
	jbsr	draw_mechanical_stair_ea3c                            	| [$e9f6: call $EA3C]
	LEA_ROM	       0x1B87,a2                      	| [$e9f9: ld   ix,$1B87]
	add.w	d3,a2                            	| [$e9fd: add  ix,de]
	move.w	#0x928F,d6                      	| [$e9ff: ld   hl,$928F]
	jbsr	draw_mechanical_stair_ea3c                            	| [$ea02: call $EA3C]
	move.w	#0x924E,d6                      	| [$ea05: ld   hl,$924E]
	jbsr	draw_mechanical_stair_ea3c                            	| [$ea08: call $EA3C]
	move.w	#0x920D,d6                      	| [$ea0b: ld   hl,$920D]
	jbsr	draw_mechanical_stair_ea3c                            	| [$ea0e: call $EA3C]
	move.w	#0x91CC,d6                      	| [$ea11: ld   hl,$91CC]
	jbsr	draw_mechanical_stair_ea3c                            	| [$ea14: call $EA3C]
	move.w	#0x918B,d6                      	| [$ea17: ld   hl,$918B]
	jbsr	draw_mechanical_stair_ea3c                            	| [$ea1a: call $EA3C]
	move.w	#0x914A,d6                      	| [$ea1d: ld   hl,$914A]
	jbsr	draw_mechanical_stair_ea3c                            	| [$ea20: call $EA3C]
	movem.w	d3/d4,-(sp)                    	| [$ea23: push de]
	move.l	a1,-(sp)                        	| [$ea23: push de]
	jbsr	l_e91c                            	| [$ea24: call $E91C]
	move.l	(sp)+,a1                        	| [$ea27: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$ea27: pop  de]
	addq.w	#4,d3                           	| [$ea28: inc  de] * 4
 	move.w	d3,mechanical_stair_frame_62AD                 	| [$ea2c: ld   (mechanical_stair_frame_62AD),de]
	move.b	d3,d0                           	| [$ea30: ld   a,e]
	cmp.b	#0x20,d0                         	| [$ea31: cp   $20]
	bcc.b	0f                               	| [...]
	rts                                    	| [$ea33: ret  c] [...]
0:
	                      	| [$ea34: ld   de,$0000] 0
	clr.w	mechanical_stair_frame_62AD                 	| [$ea37: ld   (mechanical_stair_frame_62AD),de]
	rts                                    	| [$ea3b: ret]

draw_mechanical_stair_ea3c:
	move.b	(A2),d0                    	| [$ea3c: ld   a,(ix+$00)]
	jbsr	osd_w_videoram                         	| [$ea3f: ld   (hl),a]
	subq.w	#1,d6                           	| [$ea40: dec  hl]
	move.b	(0x02,a2),d0                    	| [$ea41: ld   a,(ix+$02)]
	jbsr	osd_w_videoram                         	| [$ea44: ld   (hl),a]
                  	| [$ea45: push de]
                   	| [$ea45: push de]
	                      	| [$ea46: ld   de,$FFE0]
	sub.w	#0x20,d6                            	| [$ea49: add  hl,de]
								| [$ea4a: pop  de]
								| [$ea4a: pop  de]
	move.b	(0x03,a2),d0                    	| [$ea4b: ld   a,(ix+$03)]
	jbsr	osd_w_videoram                         	| [$ea4e: ld   (hl),a]
	addq.w	#1,d6                           	| [$ea4f: inc  hl]
	move.b	(0x01,a2),d0                    	| [$ea50: ld   a,(ix+$01)]
	jbsr	osd_w_videoram                         	| [$ea53: ld   (hl),a]
	rts                                    	| [$ea54: ret]

handle_player_destroying_wall_EA55:
	move.b	player_screen_600D,d0           	| [$ea55: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$ea58: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$ea5a: ret  nz] [...]
0:
	move.b	player_y_6583,d0                	| [$ea5b: ld   a,(player_y_6583)]
	cmp.b	#0x98,d0                         	| [$ea5e: cp   $98]
	beq.b	0f                               	| [...]
	rts                                    	| [$ea60: ret  nz] [...]
0:
	move.b	player_x_6582,d0                	| [$ea61: ld   a,(player_x_6582)]
	cmp.b	#0x88,d0                         	| [$ea64: cp   $88]
	beq.b	0f                               	| [...]
	rts                                    	| [$ea66: ret  nz] [...]
0:
	move.b	has_pick_61CF,d0                	| [$ea67: ld   a,(has_pick_61CF)]
	                         	| [$ea6a: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$ea6c: ret  z] [...]
0:
	move.b	object_held_struct_659C,d0      	| [$ea6d: ld   a,(object_held_struct_659C)]
	cmp.b	#0xB8,d0                         	| [$ea70: cp   $B8]
	jeq	check_destroyable_wall_tile_ea77                             	| [$ea72: jr   z,$EA77]
	cmp.b	#0xB7,d0                         	| [$ea74: cp   $B7]
	beq.b	0f                               	| [...]
	rts                                    	| [$ea76: ret  nz] [...]
0:
check_destroyable_wall_tile_ea77:
	move.w	#0x91F3,d6                       	| [$ea77: ld   a,($91F3)]
	jbsr	osd_r_videoram
	cmp.b	#0xE0,d0                         	| [$ea7a: cp   $E0]
	bne.b	0f                               	| [...]
	rts                                    	| [$ea7c: ret  z] [...]
0:
	cmp.b	#0xE6,d0                         	| [$ea7d: cp   $E6]
	bne.b	0f                               	| [...]
	rts                                    	| [$ea7f: ret  z] [...]
0:
	cmp.b	#0xE4,d0                         	| [$ea80: cp   $E4]
	bne.b	0f                               	| [...]
	rts                                    	| [$ea82: ret  z] [...]
0:
	cmp.b	#0xD0,d0                         	| [$ea83: cp   $D0]
	bne.b	0f                               	| [...]
	rts                                    	| [$ea85: ret  z] [...]
0:
	move.w	#0x91F3,d6                       	| [$ea86: ld   a,($91F3)]
    jbsr	osd_r_videoram
	cmp.b	#0x02,d0                         	| [$ea89: cp   $02]
	jeq	l_ea98                             	| [$ea8b: jr   z,$EA98]
	subq.b	#2,d0                           	| [$ea8d: dec  a] * 2
	move.w	#0x91F3,d6                       	| [$ea8f: ld   ($91F3),a]
	jbsr	osd_w_videoram
	subq.b	#1,d0                           	| [$ea92: dec  a]
	move.w	#0x91F4,d6                       	| [$ea93: ld   ($91F4),a]
    jbsr	osd_w_videoram
	jra	l_eaa0                             	| [$ea96: jr   $EAA0]
l_ea98:
	move.b	#0xE0,d0                        	| [$ea98: ld   a,$E0]
	move.w	#0x91F3,d6                       	| [$ea9a: ld   ($91F3),a]
    jbsr	osd_w_videoram
	move.w	#0x91F4,d6                       	| [$ea9d: ld   ($91F4),a]
    jbsr	osd_w_videoram
l_eaa0:
	* read the value of the time, save it
	move.w	#0x91F3,d6                       	| [$eaa0: ld   a,($91F3)]
    jbsr	osd_r_videoram
	move.b	d0,tile_at_the_destroyable_wall_location_627D                 	| [$eaa3: ld   (tile_at_the_destroyable_wall_location_627D),a]
	rts                                    	| [$eaa6: ret]
update_player_screen_address_from_xy_eaa7:
	lea	player_struct_6580,a2          	| [$eaa7: ld   ix,player_struct_6580]
	lea	player_logical_address_6009,a3 	| [$eaab: ld   iy,player_logical_address_6009]
	move.b	player_screen_600D,d0           	| [$eae5: ld   a,(player_screen_600D)]
	jra	l_eae8                             	| [$eaaf: jr   $EAE5]
update_guard_1_screen_address_from_xy_eab1:
	lea	guard_1_struct_6594,a2         	| [$eab1: ld   ix,guard_1_struct_6594]
	lea	guard_1_logical_address_6038,a3	| [$eab5: ld   iy,guard_1_logical_address_6038]
	move.b	guard_1_screen_6099,d0          	| [$eab9: ld   a,(guard_1_screen_6099)]
	jra	l_eae8                             	| [$eabc: jr   $EAE8]
update_guard_2_screen_address_from_xy_EABE:
	lea	guard_2_struct_6598,a2         	| [$eabe: ld   ix,guard_2_struct_6598]
	lea	guard_2_logical_address_6078,a3	| [$eac2: ld   iy,guard_2_logical_address_6078]
	move.b	guard_2_screen_609A,d0          	| [$eac6: ld   a,(guard_2_screen_609A)]
	jra	l_eae8                             	| [$eac9: jr   $EAE8]
l_eacb:
	lea	bullet_shadow_sprite_658C,a2  	| [$eacb: ld   ix,bullet_shadow_sprite_658C]
	lea	unknown_62B2,a3                	| [$eacf: ld   iy,unknown_62B2]
	move.b	player_screen_600D,d0           	| [$ead3: ld   a,(player_screen_600D)]
	                             	| [$ead6: jr   $EAE8]
						
l_eae8:
	move.b	d0,current_character_screen_index_6098	| [$eae8: ld   (current_character_screen_index_6098),a]
	jbsr	compute_logical_address_from_xy_EAEF	| [$eaeb: call compute_logical_address_from_xy_EAEF]
	rts                                    	| [$eaee: ret]

* compute logical address from x,y:	rounded by 8
* < ix: character structure
* < iy: where to update
* > D6 logical address

compute_logical_address_from_xy_EAEF:
	jbsr	process_x_eb0e                            	| [$eaef: call $EB0E]
	* > D6.W logical ROM address
	jbsr	process_y_eafc                            	| [$eaf2: call $EAFC]
	* store as big endian now
	STORE_DX_BE_WORD_AY	d6,a3                    	| [$eaf5: ld   (iy+$00),l]
	                    	| [$eaf8: ld   (iy+$01),h]
	rts                                    	| [$eafb: ret]
	
process_y_eafc:
	* align Y coord
	moveq	#0,d0
	move.b	(0x03,a2),d0                    	| [$559a: ld   a,(ix+$03)]  character y value
	add.b	#0x10,d0                         	| [$559d: add  a,$10]
	lsr.b	#3,d0                            	| [$559f: srl  a] * 3
	add.w	d0,d6
											| [$55a5: add  a,l]
										| [$55a6: ld   l,a]
										| [$55a7: ld   a,h]
			                            | [adc  a,$00]
			
										| [$55aa: ld   h,a]
	rts                                    	| [$55ab: ret]
	
process_x_eb0e:
	* align X coord
	move.b	(0x02,a2),d0                    	| [$eb0e: ld   a,(ix+$02)]
	addq.b	#0x07,d0                        	| [$eb11: add  a,$07]
	not.b	d0                               	| [$eb13: cpl]
	and.b	#0xF8,d0                         	| [$eb14: and  $F8]
	clr.w	d6                               	| [$eb16: ld   h,$00]
	move.b	d0,d6                           	| [$eb18: ld   l,a]
	asl.w	#2,d6                            	| [$eb19: sla  l]
	                           	| [$eb1b: rl   h]
	                            	| [$eb1d: sla  l]
	                           	| [$eb1f: rl   h]
	                          	| [$eb21: ld   a,h]
	add.w	#0x4000,d6                          	| [$eb22: or   $40]
	                           	| [$eb24: ld   h,a]
	move.b	current_character_screen_index_6098,d0	| [$eb25: ld   a,(current_character_screen_index_6098)]
	cmp.b	#0x01,d0                         	| [$eb28: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$eb2a: ret  z] [...]
0:
	cmp.b	#0x02,d0                         	| [$eb2b: cp   $02]
	jne	l_eb34                             	| [$eb2d: jr   nz,$EB34]
	                           	| [$eb2f: ld   a,h]
	add.w	#0x0400,d6                        	| [$eb30: add  a,$04]
	                           	| [$eb32: ld   h,a]
	rts                                    	| [$eb33: ret]
l_eb34:
	cmp.b	#0x03,d0                         	| [$eb34: cp   $03]
	jne	l_eb3d                             	| [$eb36: jr   nz,$EB3D]
	                           	| [$eb38: ld   a,h]
	add.w	#0x0800,d6                         	| [$eb39: add  a,$08]
	                           	| [$eb3b: ld   h,a]
	rts                                    	| [$eb3c: ret]
l_eb3d:
	cmp.b	#0x04,d0                         	| [$eb3d: cp   $04]
	jne	l_eb46                             	| [$eb3f: jr   nz,$EB46]
	                           	| [$eb41: ld   a,h]
	sub.w	#0x1000,d6                         	| [$eb42: sub  $10]
	                           	| [$eb44: ld   h,a]
	rts                                    	| [$eb45: ret]
l_eb46:
	cmp.b	#0x05,d0                         	| [$eb46: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$eb48: ret  nz] [...]
0:
	                          	| [$eb49: ld   a,h]
	sub.w	#0x0C00,d6                         	| [$eb4a: sub  $0C]
	                           	| [$eb4c: ld   h,a]
	rts                                    	| [$eb4d: ret]
	
check_if_bomb_kills_character_eb4e:
	move.b	(0x02,a2),d0                    	| [$eb4e: ld   a,(ix+$02)]
	cmp.b	d1,d0                            	| [$eb51: cp   b]
	bcc.b	0f                               	| [...]
	rts                                    	| [$eb52: ret  c] [...]
0:
	cmp.b	d2,d0                            	| [$eb53: cp   c]
	bcs.b	0f                               	| [...]
	rts                                    	| [$eb54: ret  nc] [...]
0:
	jbsr	exx                               	| [$eb55: exx]
	move.b	(0x03,a2),d0                    	| [$eb56: ld   a,(ix+$03)]
	cmp.b	d1,d0                            	| [$eb59: cp   b]
	bcc.b	0f                               	| [...]
	rts                                    	| [$eb5a: ret  c] [...]
0:
	cmp.b	d2,d0                            	| [$eb5b: cp   c]
	bcs.b	0f                               	| [...]
	rts                                    	| [$eb5c: ret  nc] [...]
0:
	jbsr	exx                               	| [$eb5d: exx]
	move.b	#0x01,d0                        	| [$eb5e: ld   a,$01]
	move.b	d0,(A3)                    	| [$eb60: ld   (iy+$00),a]
	rts                                    	| [$eb63: ret]
	
l_eb64:
	move.b	d6,d0                           	| [$eb64: ld   a,l]
	asl.b	#3,d0                            	| [$eb65: sla  a] * 3
	sub.b	#0x08,d0                         	| [$eb6b: sub  $08]
	move.b	d0,d1                           	| [$eb6d: ld   b,a]
	add.b	#0x10,d0                         	| [$eb6e: add  a,$10]
	move.b	d0,d2                           	| [$eb70: ld   c,a]

	lsr.w	#2,d6                            	| [$eb71: srl  h]
	                           	| [$eb73: rr   l]
	                            	| [$eb75: srl  h]
	                           	| [$eb77: rr   l]
	move.b	d6,d0                           	| [$eb79: ld   a,l]
	jbsr	exx                               	| [$eb7a: exx]
	and.b	#0xF8,d0                         	| [$eb7b: and  $F8]
	addq.b	#0x07,d0                        	| [$eb7d: add  a,$07]
	not.b	d0                               	| [$eb7f: cpl]
	sub.b	#0x08,d0                         	| [$eb80: sub  $08]
	move.b	d0,d1                           	| [$eb82: ld   b,a]
	add.b	#0x25,d0                         	| [$eb83: add  a,$25]
	move.b	d0,d2                           	| [$eb85: ld   c,a]
	rts                                    	| [$eb86: ret]
	
* < D0: screen number
* > D1: logical address 0x4800-0x6000

compute_logical_screen_address_eb87:
	move.w	#0x5000,d1                        	| [$eb87: ld   b,$50]
	cmp.b	#0x01,d0                         	| [$eb89: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$eb8b: ret  z] [...]
0:
	move.w	#0x4C00,d1                        	| [$eb8c: ld   b,$4C]
	cmp.b	#0x02,d0                         	| [$eb8e: cp   $02]
	bne.b	0f                               	| [...]
	rts                                    	| [$eb90: ret  z] [...]
0:
	move.w	#0x4800,d1                        	| [$eb91: ld   b,$48]
	cmp.b	#0x03,d0                         	| [$eb93: cp   $03]
	bne.b	0f                               	| [...]
	rts                                    	| [$eb95: ret  z] [...]
0:
	move.w	#0x6000,d1                        	| [$eb96: ld   b,$60]
	cmp.b	#0x04,d0                         	| [$eb98: cp   $04]
	bne.b	0f                               	| [...]
	rts                                    	| [$eb9a: ret  z] [...]
0:
	move.w	#0x5C00,d1                        	| [$eb9b: ld   b,$5C]
	rts                                    	| [$eb9d: ret]
lose_barrow_eb9e:
	move.b	holds_barrow_61C7,d0            	| [$eb9e: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$eba1: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$eba3: ret  nz] [...]
0:
	jbsr	l_ebe9                            	| [$eba4: call $EBE9]
	move.b	holds_barrow_61C7,d0            	| [$eba7: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$ebaa: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$ebac: ret  nz] [...]
0:
	move.b	sprite_object_x_659E,d0         	| [$ebad: ld   a,(sprite_object_x_659E)]
	sub.b	#0x20,d0                         	| [$ebb0: sub  $20]
	move.b	d0,sprite_object_x_659E         	| [$ebb2: ld   (sprite_object_x_659E),a]
	jbsr	l_ebe9                            	| [$ebb5: call $EBE9]
	move.b	holds_barrow_61C7,d0            	| [$ebb8: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$ebbb: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$ebbd: ret  nz] [...]
0:
	move.b	sprite_object_x_659E,d0         	| [$ebbe: ld   a,(sprite_object_x_659E)]
	sub.b	#0x08,d0                         	| [$ebc1: sub  $08]
	move.b	d0,sprite_object_x_659E         	| [$ebc3: ld   (sprite_object_x_659E),a]
	jbsr	l_ebe9                            	| [$ebc6: call $EBE9]
	move.b	holds_barrow_61C7,d0            	| [$ebc9: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$ebcc: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$ebce: ret  nz] [...]
0:
	move.b	sprite_object_x_659E,d0         	| [$ebcf: ld   a,(sprite_object_x_659E)]
	sub.b	#0x08,d0                         	| [$ebd2: sub  $08]
	move.b	d0,sprite_object_x_659E         	| [$ebd4: ld   (sprite_object_x_659E),a]
	jbsr	l_ebe9                            	| [$ebd7: call $EBE9]
	move.b	holds_barrow_61C7,d0            	| [$ebda: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$ebdd: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$ebdf: ret  nz] [...]
0:
	move.b	sprite_object_x_659E,d0         	| [$ebe0: ld   a,(sprite_object_x_659E)]
	add.b	#0x30,d0                         	| [$ebe3: add  a,$30]
	move.b	d0,sprite_object_x_659E         	| [$ebe5: ld   (sprite_object_x_659E),a]
	rts                                    	| [$ebe8: ret]
l_ebe9:
	movem.w	d1/d2,-(sp)                    	| [$ebe9: push bc]

	move.l	a3,-(sp)                        	| [$ebea: push iy]
	lea	holds_barrow_61C7,a4       	| [$ebec: ld   bc,holds_barrow_61C7] None
	jbsr	exx                               	| [$ebef: exx]
	lea	barrow_screen_params_61C4,a3   	| [$ebf0: ld   iy,barrow_screen_params_61C4]
	move.b	#0x28,d0                        	| [$ebf4: ld   a,$28]
	move.b	d0,(0x05,a3)                    	| [$ebf6: ld   (iy+$05),a]
	move.b	#0xEC,d0                        	| [$ebf9: ld   a,$EC]
	move.b	d0,(0x06,a3)                    	| [$ebfb: ld   (iy+$06),a]
	jbsr	drop_object_FC55                  	| [$ebfe: call drop_object_FC55]
	move.l	(sp)+,a3                        	| [$ec01: pop  iy]

	movem.w	(sp)+,d1/d2                    	| [$ec03: pop  bc]
	rts                                    	| [$ec04: ret]

l_ec05:
	move.b	is_key_hunt_phase_6341,d0                 	| [$ec05: ld   a,(is_key_hunt_phase_6341)]
	cmp.b	#0x01,d0                         	| [$ec08: cp   $01]
	jeq	l_ec20                             	| [$ec0a: jr   z,$EC20]
	addq.w	#1,d6                           	| [$ec0c: inc  hl]
	bsr		osd_r_videoram	                         	| [$ec0d: ld   a,(hl)]
	cmp.b	#0xED,d0                         	| [$ec0e: cp   $ED]
	bne.b	0f                               	| [...]
	rts                                    	| [$ec10: ret  z] [...]
0:
	cmp.b	#0xEF,d0                         	| [$ec11: cp   $EF]
	bne.b	0f                               	| [...]
	rts                                    	| [$ec13: ret  z] [...]
0:
	                           	| [$ec14: ld   a,l]
	add.w	#0x20,d6                         	| [$ec15: add  a,$20]
									| [$ec17: ld   l,a]
									| [$ec18: ld   a,h]
			
									| [$ec1b: ld   h,a]
	bsr		osd_r_videoram                         	| [$ec1c: ld   a,(hl)]
	cmp.b	#0xED,d0                         	| [$ec1d: cp   $ED]
	rts                                    	| [$ec1f: ret]
l_ec20:
	addq.w	#1,d6                           	| [$ec20: inc  hl]
	bsr		osd_r_videoram                         	| [$ec21: ld   a,(hl)]
	cmp.b	#0xBF,d0                         	| [$ec22: cp   $BF]
	bne.b	0f                               	| [...]
	rts                                    	| [$ec24: ret  z] [...]
0:
	movem.w	d3/d4,-(sp)                    	| [$ec25: push de]
	move.l	a1,-(sp)                        	| [$ec25: push de]
	move.w	#0x0020,d3                      	| [$ec26: ld   de,$0020] 32
	add.w	d3,d6                            	| [$ec29: add  hl,de]
	bsr		osd_r_videoram                         	| [$ec2a: ld   a,(hl)]
	cmp.b	#0xBF,d0                         	| [$ec2b: cp   $BF]
	jeq	l_ec35                             	| [$ec2d: jr   z,$EC35]
	add.w	d3,d6                            	| [$ec2f: add  hl,de]
	bsr		osd_r_videoram                         	| [$ec30: ld   a,(hl)]
	cmp.b	#0xBF,d0                         	| [$ec31: cp   $BF]
	jeq	l_ec35                             	| [$ec33: jr   z,$EC35]
l_ec35:
	move.l	(sp)+,a1                        	| [$ec35: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$ec35: pop  de]
	rts                                    	| [$ec36: ret]
l_ec37:
	move.b	player_y_6583,d0                	| [$ec37: ld   a,(player_y_6583)]
	subq.b	#0x02,d0                        	| [$ec3a: sub  $02]
	move.b	d0,sprite_object_y_659F         	| [$ec3c: ld   (sprite_object_y_659F),a]
	move.b	player_struct_6580,d0           	| [$ec3f: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$ec42: and  $7F]
	cmp.b	#0x12,d0                         	| [$ec44: cp   $12]
	bne.b	0f                               	| [...]
	rts                                    	| [$ec46: ret  z] [...]
0:
	move.b	player_struct_6580,d0           	| [$ec47: ld   a,(player_struct_6580)]
	and.b	#0x80,d0                         	| [$ec4a: and  $80]
	cmp.b	#0x80,d0                         	| [$ec4c: cp   $80]
	jeq	l_ec5e                             	| [$ec4e: jr   z,$EC5E]
	move.b	player_x_6582,d0                	| [$ec50: ld   a,(player_x_6582)]
	add.b	#0x08,d0                         	| [$ec53: add  a,$08]
	move.b	d0,sprite_object_x_659E         	| [$ec55: ld   (sprite_object_x_659E),a]
	move.b	#0x31,d0                        	| [$ec58: ld   a,$31]
	move.b	d0,object_held_struct_659C      	| [$ec5a: ld   (object_held_struct_659C),a]
	rts                                    	| [$ec5d: ret]
l_ec5e:
	move.b	player_x_6582,d0                	| [$ec5e: ld   a,(player_x_6582)]
	sub.b	#0x08,d0                         	| [$ec61: sub  $08]
	move.b	d0,sprite_object_x_659E         	| [$ec63: ld   (sprite_object_x_659E),a]
	move.b	#0xB1,d0                        	| [$ec66: ld   a,$B1]
	move.b	d0,object_held_struct_659C      	| [$ec68: ld   (object_held_struct_659C),a]
	rts                                    	| [$ec6b: ret]
write_game_over_ec6c:
	move.w	#0x926E,d6                      	| [$ec6c: ld   hl,$926E]
	LEA_ROM	       0x56A1,a1                      	| [$ec6f: ld   de,$56A1]
	jbsr	display_localized_text_CA67       	| [$ec72: call display_localized_text_CA67]
	rts                                    	| [$ec75: ret]
wait_a_while_ec76:

	move.w	#20,d0
	jbsr	osd_wait
					| [$ec76: ld   b,$18]
			
						| [$ec78: ld   hl,$3000]
			
					| [$ec7b: dec  hl]

					| [$ec7c: ld   a,h]
					| [$ec7d: cp   $00]
					| [$ec7f: jr   nz,$EC7B]
					| [...]
					| [$ec81: djnz $EC78]
	rts                                    	| [$ec83: ret]

play_sample_EC84:
	move.b	must_play_music_6210,d0         	| [$ec84: ld   a,(must_play_music_6210)]
	cmp.b	#0x01,d0                         	| [$ec87: cp   $01]
	jeq	l_ec9a                             	| [$ec89: jr   z,$EC9A]
	move.b	gameplay_allowed_6054,d0        	| [$ec8b: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$ec8e: cp   $01]
	jeq	l_ec9a                             	| [$ec90: jr   z,$EC9A]
	jbsr	osd_read_dipswitches                       	| [$ec92: ld   a,($B000)]
	and.b	#0x40,d0                         	| [$ec95: and  $40]
	cmp.b	#0x40,d0                         	| [$ec97: cp   $40]
	beq.b	0f                               	| [...]
	rts                                    	| [$ec99: ret  nz] [...]
0:
l_ec9a:
	lea	unknown_61BD,a1                	| [$ec9a: ld   de,unknown_61BD]
	move.w	#0x06,d1                        	| [$ec9d: ld   bc,$0006] 6
	jbsr	ldir                              	| [$eca0: ldir]
	move.b	#0x01,d0                        	| [$eca2: ld   a,$01]
	move.b	d0,unknown_61F3                 	| [$eca4: ld   (unknown_61F3),a]
	rts                                    	| [$eca7: ret]

game_startup_eca8:
    jbsr	osd_disable_vblank_interrupt   	| [$eca8: xor  a]
      	| [$eca9: ld   (interrupt_control_A000),a]

	move.b	#1,d0                           	| [$ecad: inc  a]
	jra	startup_C000                       	| [$ecae: jp   startup_C000]

l_ecc1:
	jbsr	play_intro_1218                   	| [$ecc1: call play_intro_1218]
	jbsr	set_bags_coordinates_easy_level_CFDB	| [$ecc4: call set_bags_coordinates_easy_level_CFDB]
	jbsr	set_bags_coordinates_player_2_CFE7         	| [$ecc7: call set_bags_coordinates_player_2_CFE7]
	* TODO sound
*	LEA_ROM	       0x513C,a0                      	| [$ecca: ld   hl,$513C]
*	move.b	a0,ay_sound_pointer_6140        	| [$eccd: ld   (ay_sound_pointer_6140),hl]
*	move.b	a0,unknown_634E                 	| [$ecd0: ld   (unknown_634E),hl]
	move.b	#0x38,d0                        	| [$ecd3: ld   a,$38]
	move.b	d0,unknown_634D                 	| [$ecd5: ld   (unknown_634D),a]
	clr.b	d0                               	| [$ecd8: xor  a]
	move.b	d0,unknown_6348                 	| [$ecd9: ld   (unknown_6348),a]
l_ecdc:
	jbsr	osd_disable_vblank_interrupt 		| di
	            	| [$ecdd: ld   a,(io_read_shit_B800)]
	jbsr	init_new_game_F951                	| [$ece0: call init_new_game_F951]
	jbsr	init_guard_directions_and_wagons_C314	| [$ece3: call init_guard_directions_and_wagons_C314]
	                               	| [$ece6: xor  a]
	clr.b	player_death_flag_6025       	| [$ece7: ld   (player_death_flag_6025),a]
											| [$ecea: inc  a]
	move.b	#1,guard_2_screen_609A          	| [$eceb: ld   (guard_2_screen_609A),a]
	                        	| [$ecee: ld   a,$03]
	move.b	#3,guard_1_screen_6099          	| [$ecf0: ld   (guard_1_screen_6099),a]
	jbsr	init_bombs_locations_and_other_stuff_dfbf                            	| [$ecf3: call $DFBF]
	jbsr	check_if_must_award_gun_d7a9                            	| [$ecf6: call $D7A9]
mainloop_ecf9:
	move.b	#0x01,d0                        	| [$ecf9: ld   a,$01]
	jbsr	osd_enable_vblank_interrupt		| [$ecfd: ld   (interrupt_control_A000),a]

	                       	| [$ed01: ld   a,($A800)]
	jbsr	wait_for_vblank_cf34                            	| [$ed04: call $CF34]
	jbsr	l_c02e                            	| [$ed07: call $C02E]
	lea	player_struct_6580,a2          	| [$ed0a: ld   ix,player_struct_6580]
	lea	guard_1_struct_6594,a3         	| [$ed0e: ld   iy,guard_1_struct_6594]
	move.w	#0x0004,d3                      	| [$ed12: ld   de,$0004] 4
	move.b	player_screen_600D,d0           	| [$ed15: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$ed18: ld   b,a]
	move.b	guard_1_screen_6099,d0          	| [$ed19: ld   a,(guard_1_screen_6099)]
	cmp.b	d1,d0                            	| [$ed1c: cp   b]
	jne	l_ed32                             	| [$ed1d: jr   nz,$ED32]
	jbsr	guard_collision_5537                            	| [$ed1f: call $5537]
	tst.b	d0                         	| [$ed22: cp   $00]
	jeq	l_ed32                             	| [$ed24: jr   z,$ED32]
	move.b	unknown_6156,d0                 	| [$ed26: ld   a,(unknown_6156)]
	                         	| [$ed29: cp   $00]
	jne	l_ed32                             	| [$ed2b: jr   nz,$ED32]
	jbsr  is_invincible
	bne.b	l_ed32
	                        	| [$ed2d: ld   a,$01]
	move.b	#1,player_death_flag_6025       	| [$ed2f: ld   (player_death_flag_6025),a]
l_ed32:
	lea	player_struct_6580,a2          	| [$ed32: ld   ix,player_struct_6580]
	lea	guard_2_struct_6598,a3         	| [$ed36: ld   iy,guard_2_struct_6598]
	move.w	#0x0004,d3                      	| [$ed3a: ld   de,$0004] 4
	move.b	player_screen_600D,d0           	| [$ed3d: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$ed40: ld   b,a]
	move.b	guard_2_screen_609A,d0          	| [$ed41: ld   a,(guard_2_screen_609A)]
	cmp.b	d1,d0                            	| [$ed44: cp   b]
	jne	l_ed5a                             	| [$ed45: jr   nz,$ED5A]
	jbsr	guard_collision_5537                            	| [$ed47: call $5537]
	                         	| [$ed4a: cp   $00]
	jeq	l_ed5a                             	| [$ed4c: jr   z,$ED5A]
	move.b	unknown_6157,d0                 	| [$ed4e: ld   a,(unknown_6157)]
	                         	| [$ed51: cp   $00]
	jne	l_ed5a                             	| [$ed53: jr   nz,$ED5A]
	jbsr  is_invincible
	bne.b	l_ed5a
	                        	| [$ed55: ld   a,$01]
	move.b	#1,player_death_flag_6025       	| [$ed57: ld   (player_death_flag_6025),a]
l_ed5a:
	move.b	gameplay_allowed_6054,d0        	| [$ed5a: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$ed5d: cp   $01]
	jeq	l_edc5                             	| [$ed5f: jr   z,$EDC5]
	move.b	#0x01,d0                        	| [$ed61: ld   a,$01]
	jbsr	hw_video_shit_d8e2                            	| [$ed63: call $D8E2]
	move.b	game_locked_6053,d0             	| [$ed66: ld   a,(game_locked_6053)]
	cmp.b	#0x01,d0                         	| [$ed69: cp   $01]
	jne	l_edc5                             	| [$ed6b: jr   nz,$EDC5]
	move.b	must_play_music_6210,d0         	| [$ed6d: ld   a,(must_play_music_6210)]
	cmp.b	#0x01,d0                         	| [$ed70: cp   $01]
	jeq	l_edc5                             	| [$ed72: jr   z,$EDC5]
	jbsr	osd_disable_vblank_interrupt				| di
	move.b	unknown_6055,d0                 	| [$ed75: ld   a,(unknown_6055)]
	cmp.b	#0x01,d0                         	| [$ed78: cp   $01]
	jeq	l_ed9f                             	| [$ed7a: jr   z,$ED9F]
	            	| [$ed7c: ld   a,(io_read_shit_B800)]
	jbsr	l_c3e3                            	| [$ed7f: call $C3E3]
	jbsr	display_player_ids_and_credit_F8A4	| [$ed82: call display_player_ids_and_credit_F8A4]
	jbsr	write_credits_and_lives_162e                            	| [$ed85: call $162E]
	* TODO sound!
	*LEA_ROM	       0x5B68,a0                      	| [$ed88: ld   hl,$5B68]
	*move.b	a0,ay_sound_pointer_6140        	| [$ed8b: ld   (ay_sound_pointer_6140),hl]
	*clr.b	d0                               	| [$ed8e: xor  a]
	*move.b	d0,ay_sound_start_6142          	| [$ed8f: ld   (ay_sound_start_6142),a]
	move.b	#0x01,d0                        	| [$ed92: ld   a,$01]
	move.b	d0,unknown_6055                 	| [$ed94: ld   (unknown_6055),a]
	move.b	gameplay_allowed_6054,d0        	| [$ed97: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$ed9a: cp   $01]
	jeq	mainloop_ecf9                             	| [$ed9c: jp   z,$ECF9]
l_ed9f:
	move.b	must_play_music_6210,d0         	| [$ed9f: ld   a,(must_play_music_6210)]
	cmp.b	#0x01,d0                         	| [$eda2: cp   $01]
	jeq	l_edc5                             	| [$eda4: jr   z,$EDC5]
	move.b	number_of_credits_6000,d0       	| [$eda6: ld   a,(number_of_credits_6000)]
	cmp.b	#0x01,d0                         	| [$eda9: cp   $01]
	jne	l_edb9                             	| [$edab: jr   nz,$EDB9]
	LEA_ROM	       0x56DF,a1                      	| [$edad: ld   de,$56DF]
	move.w	#0x9311,d6                      	| [$edb0: ld   hl,$9311]
	jbsr	display_localized_text_CA67       	| [$edb3: call display_localized_text_CA67]
	jra	mainloop_ecf9                             	| [$edb6: jp   $ECF9]
l_edb9:
	LEA_ROM	       0x56F2,a1                      	| [$edb9: ld   de,$56F2]
	move.w	#0x9311,d6                      	| [$edbc: ld   hl,$9311]
	jbsr	display_localized_text_CA67       	| [$edbf: call display_localized_text_CA67]
	jra	mainloop_ecf9                             	| [$edc2: jp   $ECF9]
l_edc5:
	jbsr	l_f8f7                            	| [$edc5: call $F8F7]
	cmp.b	#0x01,d0                         	| [$edc8: cp   $01]
	jeq	l_ecdc                             	| [$edca: jp   z,$ECDC]
	move.b	time_61E8,d0                    	| [$edcd: ld   a,(time_61E8)]
	                         	| [$edd0: cp   $00]
	jne	l_eddc                             	| [$edd2: jr   nz,$EDDC]
	jbsr	l_f92d                            	| [$edd4: call $F92D]
	cmp.b	#0x01,d0                         	| [$edd7: cp   $01]
	jeq	l_ecdc                             	| [$edd9: jp   z,$ECDC]
l_eddc:
	jbsr	l_f937                            	| [$eddc: call $F937]
	            	| [$eddf: ld   (io_read_shit_B800),a]
	jbsr	handle_guard_1_views_player_F6F2  	| [$ede2: call handle_guard_1_views_player_F6F2]
	* copyright tampering protection
	move.b	#0x4C,d0                       	| [$ede5: ld   a,($58A3)]
	move.b	d0,unknown_6273                 	| [$ede8: ld   (unknown_6273),a]
	            	| [$edeb: ld   a,(io_read_shit_B800)]
	move.b	player_screen_600D,d0           	| [$edee: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$edf1: ld   b,a]
	move.b	guard_1_screen_6099,d0          	| [$edf2: ld   a,(guard_1_screen_6099)]
	cmp.b	d1,d0                            	| [$edf5: cp   b]
	bne.b	0f                               	| [...]
	jbsr	l_f66d                            	| [$edf6: call z,$F66D]
0:
	jbsr	osd_enable_vblank_interrupt			| ei
	jbsr	handle_guard_2_views_player_F78B  	| [$edfa: call handle_guard_2_views_player_F78B]
	* copyright tampering protection
	move.b	#0x44,d0                       	| [$edfd: ld   a,($570F)]
	move.b	d0,unknown_6270                 	| [$ee00: ld   (unknown_6270),a]
	            	| [$ee03: ld   a,(io_read_shit_B800)]
	            	| [$ee06: ld   a,(io_read_shit_B800)]
	move.b	player_screen_600D,d0           	| [$ee09: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$ee0c: ld   b,a]
	move.b	guard_2_screen_609A,d0          	| [$ee0d: ld   a,(guard_2_screen_609A)]
	cmp.b	d1,d0                            	| [$ee10: cp   b]
	bne.b	0f                               	| [...]
	jbsr	l_f756                            	| [$ee11: call z,$F756]
0:
	jbsr	osd_enable_vblank_interrupt			| ei
                      	| [$ee15: ld   ($B000),a]
 	move.b	guard_1_screen_6099,d0          	| [$ee18: ld   a,(guard_1_screen_6099)]
	move.b	d0,current_character_screen_index_6098	| [$ee1b: ld   (current_character_screen_index_6098),a]
	move.l	#guard_1_struct_6594,guard_struct_pointer_6093         	| [$ee1e: ld   iy,guard_1_struct_6594]
	    	| [$ee22: ld   (guard_struct_pointer_6093),iy]
	lea	guard_1_direction_6027,a2      	| [$ee26: ld   ix,guard_1_direction_6027]
	move.l	a2,guard_direction_pointer_6095 	| [$ee2a: ld   (guard_direction_pointer_6095),ix]
	lea	guard_1_ladder_frame_6035,a2   	| [$ee2e: ld   ix,guard_1_ladder_frame_6035]
	lea	guard_1_struct_6594,a3         	| [$ee32: ld   iy,guard_1_struct_6594]
	* leave the load in d3 as it's needed by analyse_guard_direction_change_F50B
	move.w	guard_1_logical_address_6038,d3
	move.w	d3,guard_logical_address_6091	| [$ee36: ld   de,(guard_1_logical_address_6038)]
	  	| [$ee3a: ld   (guard_logical_address_6091),de]
	            	| [$ee3e: ld   a,(io_read_shit_B800)]
	jbsr	analyse_guard_direction_change_F50B	| [$ee41: call analyse_guard_direction_change_F50B]
	lea	guard_1_in_elevator_603B,a2    	| [$ee44: ld   ix,guard_1_in_elevator_603B]
	lea	guard_1_not_moving_timeout_counter_6057,a0	| [$ee48: ld   hl,guard_1_not_moving_timeout_counter_6057]
	lea	guard_1_not_moving_flag_6148,a1                	| [$ee4b: ld   de,guard_1_not_moving_flag_6148]
	jbsr	check_for_not_moving_timeout_F42E 	| [$ee4e: call check_for_not_moving_timeout_F42E]
	move.b	guard_1_not_moving_flag_6148,d0                 	| [$ee51: ld   a,(guard_1_not_moving_flag_6148)]
	                         	| [$ee54: cp   $00]
	jne	l_ee85                             	| [$ee56: jr   nz,$EE85]
	move.b	guard_1_not_moving_timeout_counter_6057,d0	| [$ee58: ld   a,(guard_1_not_moving_timeout_counter_6057)]
	cmp.b	#0xF0,d0                         	| [$ee5b: cp   $F0]
	bcs.b	0f                               	| [...]
	jbsr	maybe_reset_guard_position_cb58                            	| [$ee5d: call nc,$CB58]
0:
	lea	guard_1_struct_6594,a3         	| [$ee62: ld   iy,guard_1_struct_6594]
	move.l	a3,guard_struct_pointer_6093    	| [$ee66: ld   (guard_struct_pointer_6093),iy]
	lea	guard_1_direction_6027,a2      	| [$ee6a: ld   ix,guard_1_direction_6027]
	move.l	a2,guard_direction_pointer_6095 	| [$ee6e: ld   (guard_direction_pointer_6095),ix]
	lea	guard_1_struct_6594,a3         	| [$ee72: ld   iy,guard_1_struct_6594]
	move.w	guard_1_logical_address_6038,guard_logical_address_6091	| [$ee76: ld   de,(guard_1_logical_address_6038)]
	   	| [$ee7a: ld   (guard_logical_address_6091),de]
	lea	guard_1_ladder_frame_6035,a2   	| [$ee7e: ld   ix,guard_1_ladder_frame_6035]
	cmp.b	#0x10,d0                         	| [$ee60: cp   $10]
	bcs.b	0f                               	| [...]
	jbsr	choose_guard_random_direction_FBB8	| [$ee82: call nc,choose_guard_random_direction_FBB8]
0:
l_ee85:
	move.b	guard_2_screen_609A,d0          	| [$ee85: ld   a,(guard_2_screen_609A)]
	move.b	d0,current_character_screen_index_6098	| [$ee88: ld   (current_character_screen_index_6098),a]
	lea	guard_2_struct_6598,a3         	| [$ee8b: ld   iy,guard_2_struct_6598]
	move.l	a3,guard_struct_pointer_6093    	| [$ee8f: ld   (guard_struct_pointer_6093),iy]
	lea	guard_2_direction_6067,a2      	| [$ee93: ld   ix,guard_2_direction_6067]
	move.l	a2,guard_direction_pointer_6095 	| [$ee97: ld   (guard_direction_pointer_6095),ix]
	lea	guard_2_ladder_frame_6075,a2   	| [$ee9b: ld   ix,guard_2_ladder_frame_6075]
	lea	guard_2_struct_6598,a3         	| [$ee9f: ld   iy,guard_2_struct_6598]
	* load d3, don't copy right away as analyse_guard_direction_change_F50B needs it
	move.w	guard_2_logical_address_6078,d3	| [$eea3: ld   de,(guard_2_logical_address_6078)]
	move.w	d3,guard_logical_address_6091		| [$eea7: ld   (guard_logical_address_6091),de]
	            	| [$eeab: ld   a,(io_read_shit_B800)]
	* copyright tampering protection
	move.b	#0x41,d0                       	| [$eeae: ld   a,($570C)]
	move.b	d0,unknown_6271                 	| [$eeb1: ld   (unknown_6271),a]
	jbsr	analyse_guard_direction_change_F50B	| [$eeb4: call analyse_guard_direction_change_F50B]
	lea	guard_2_in_elevator_607B,a2    	| [$eeb7: ld   ix,guard_2_in_elevator_607B]
	lea	guard_2_not_moving_timeout_counter_6097,a0	| [$eebb: ld   hl,guard_2_not_moving_timeout_counter_6097]
	lea	guard_2_not_moving_flag_6149,a1                	| [$eebe: ld   de,guard_2_not_moving_flag_6149]
	jbsr	check_for_not_moving_timeout_F42E 	| [$eec1: call check_for_not_moving_timeout_F42E]
	move.b	guard_2_not_moving_flag_6149,d0                 	| [$eec4: ld   a,(guard_2_not_moving_flag_6149)]
	                         	| [$eec7: cp   $00]
	jne	l_eef8                             	| [$eec9: jr   nz,$EEF8]
	move.b	guard_2_not_moving_timeout_counter_6097,d0	| [$eecb: ld   a,(guard_2_not_moving_timeout_counter_6097)]
	cmp.b	#0xF0,d0                         	| [$eece: cp   $F0]
	bcs.b	0f                               	| [...]
	jbsr	maybe_guard_2_is_stuck_cb7d                            	| [$eed0: call nc,$CB7D]
0:
	lea	guard_2_struct_6598,a3         	| [$eed5: ld   iy,guard_2_struct_6598]
	move.l	a3,guard_struct_pointer_6093    	| [$eed9: ld   (guard_struct_pointer_6093),iy]
	lea	guard_2_direction_6067,a2      	| [$eedd: ld   ix,guard_2_direction_6067]
	move.l	a2,guard_direction_pointer_6095 	| [$eee1: ld   (guard_direction_pointer_6095),ix]
	lea	guard_2_struct_6598,a3         	| [$eee5: ld   iy,guard_2_struct_6598]
	move.w	guard_2_logical_address_6078,guard_logical_address_6091	| [$eee9: ld   de,(guard_2_logical_address_6078)]
	   	| [$eeed: ld   (guard_logical_address_6091),de]
	lea	guard_2_ladder_frame_6075,a2   	| [$eef1: ld   ix,guard_2_ladder_frame_6075]
	cmp.b	#0x10,d0                         	| [$eed3: cp   $10]
	bcs.b	0f                               	| [...]
	jbsr	choose_guard_random_direction_FBB8	| [$eef5: call nc,choose_guard_random_direction_FBB8]
0:
l_eef8:
	jbsr	osd_enable_vblank_interrupt  |  ei
	move.b	guard_2_in_elevator_5_62ED,d0                 	| [$eef9: ld   a,(guard_2_in_elevator_5_62ED)]
	cmp.b	#0x01,d0                         	| [$eefc: cp   $01]
	jeq	l_ef10                             	| [$eefe: jr   z,$EF10]
	move.w	guard_2_logical_address_6078,d6	| [$ef00: ld   hl,(guard_2_logical_address_6078)]
	jbsr	l_f18e                            	| [$ef03: call $F18E]
	jeq	l_ef0b                             	| [$ef06: jp   z,$EF0B]
	jra	l_ef10                             	| [$ef09: jr   $EF10]
l_ef0b:
	move.b	#0x01,d0                        	| [$ef0b: ld   a,$01]
	move.b	d0,guard_2_in_elevator_6077     	| [$ef0d: ld   (guard_2_in_elevator_6077),a]
l_ef10:
	move.w	guard_1_logical_address_6038,d6	| [$ef10: ld   hl,(guard_1_logical_address_6038)]
	move.b	guard_1_in_elevator_5_62E9,d0                 	| [$ef13: ld   a,(guard_1_in_elevator_5_62E9)]
	cmp.b	#0x01,d0                         	| [$ef16: cp   $01]
	jeq	l_ef26                             	| [$ef18: jr   z,$EF26]
	jbsr	l_f18e                            	| [$ef1a: call $F18E]
	jeq	l_ef21                             	| [$ef1d: jr   z,$EF21]
	jra	l_ef26                             	| [$ef1f: jr   $EF26]
l_ef21:
	move.b	#0x01,d0                        	| [$ef21: ld   a,$01]
	move.b	d0,guard_1_in_elevator_6037     	| [$ef23: ld   (guard_1_in_elevator_6037),a]
l_ef26:
	move.w	guard_1_logical_address_6038,d6	| [$ef26: ld   hl,(guard_1_logical_address_6038)]
	lea	guard_1_in_elevator_6037,a3    	| [$ef29: ld   iy,guard_1_in_elevator_6037]
	lea	guard_1_struct_6594,a2         	| [$ef2d: ld   ix,guard_1_struct_6594]
	jbsr	maybe_align_character_y_on_8_c12a                            	| [$ef31: call $C12A]
	move.w	#-0x20,d1                        	| [$ef34: ld   bc,$FFE0] 65504
	move.w	guard_1_logical_address_6038,d6	| [$ef37: ld   hl,(guard_1_logical_address_6038)]
	lea	guard_1_struct_6594,a2         	| [$ef3a: ld   ix,guard_1_struct_6594]
	* initialize A4 properly, to be able to detect
	* when A4 is bogus (which originally happens too, but works
	* by luck because BC is often $FFxx it points on ROM and
	* the values are 1) non writable 2) compatible)
	* if A4 is set to whatever the value, first it corrupts the memory
	* it points to and second it can be > 3 which makes game release the
	* pickaxe / bomb / barrow immediately (or rather lose it)
	sub.l	a4,a4
	jbsr	l_c098                            	| [$ef3e: call $C098]
	move.w	guard_2_logical_address_6078,d6	| [$ef41: ld   hl,(guard_2_logical_address_6078)]
	lea	guard_2_in_elevator_6077,a3    	| [$ef44: ld   iy,guard_2_in_elevator_6077]
	lea	guard_2_struct_6598,a2         	| [$ef48: ld   ix,guard_2_struct_6598]
	jbsr	maybe_align_character_y_on_8_c12a                            	| [$ef4c: call $C12A]
	move.w	#-0x20,d1                        	| [$ef4f: ld   bc,$FFE0] 65504
	move.w	guard_2_logical_address_6078,d6	| [$ef52: ld   hl,(guard_2_logical_address_6078)]
	lea	guard_2_struct_6598,a2         	| [$ef55: ld   ix,guard_2_struct_6598]
	* zero a4 (see above)
	sub.l	a4,a4
	jbsr	l_c098                            	| [$ef59: call $C098]
	            	| [$ef5c: ld   a,(io_read_shit_B800)]
	move.w	player_logical_address_6009,d6	| [$ef5f: ld   hl,(player_logical_address_6009)]
	jbsr	osd_enable_vblank_interrupt		| ei
	jbsr	l_f18e                            	| [$ef63: call $F18E]
	jeq	l_ef76                             	| [$ef66: jr   z,$EF76]
	move.b	fatal_fall_height_reached_604E,d0	| [$ef68: ld   a,(fatal_fall_height_reached_604E)]
	cmp.b	#0x01,d0                         	| [$ef6b: cp   $01]
	jeq	l_ef7b                             	| [$ef6d: jr   z,$EF7B]
	clr.b	d0                               	| [$ef6f: ld   a,$00]
	move.b	d0,unknown_6008                 	| [$ef71: ld   (unknown_6008),a]
	jra	l_ef7b                             	| [$ef74: jr   $EF7B]
l_ef76:
	move.b	#0x01,d0                        	| [$ef76: ld   a,$01]
	move.b	d0,unknown_6008                 	| [$ef78: ld   (unknown_6008),a]
l_ef7b:
	move.w	player_logical_address_6009,d6	| [$ef7b: ld   hl,(player_logical_address_6009)]
	lea	unknown_6008,a3                	| [$ef7e: ld   iy,unknown_6008]
	lea	player_struct_6580,a2          	| [$ef82: ld   ix,player_struct_6580]
	jbsr	maybe_align_character_y_on_8_c12a                            	| [$ef86: call $C12A]
	move.w	player_logical_address_6009,d6	| [$ef89: ld   hl,(player_logical_address_6009)]
	lea	player_struct_6580,a2          	| [$ef8c: ld   ix,player_struct_6580]
	lea	unknown_633A,a4            	| [$ef90: ld   bc,unknown_633A] None
	jbsr	l_c098                            	| [$ef93: call $C098]
	move.b	#0x01,d0                        	| [$ef96: ld   a,$01]
	move.b	d0,unknown_626F                 	| [$ef98: ld   (unknown_626F),a]
	            	| [$ef9b: ld   a,(io_read_shit_B800)]
	jbsr	l_cbeb                            	| [$ef9e: call $CBEB]
	clr.b	d0                               	| [$efa1: ld   a,$00]
	move.b	d0,unknown_626F                 	| [$efa3: ld   (unknown_626F),a]
	jbsr	l_f82d                            	| [$efa6: call $F82D]
	cmp.b	#0x01,d0                         	| [$efa9: cp   $01]
	jeq	l_ecdc                             	| [$efab: jp   z,$ECDC]
	lea	guard_1_sees_player_right_603C,a2	| [$efae: ld   ix,guard_1_sees_player_right_603C]
	move.b	#0x04,d1                        	| [$efb2: ld   b,$04]
l_efb4:
	move.b	(A2),d0                    	| [$efb4: ld   a,(ix+$00)]
	                         	| [$efb7: cp   $00]
	jne	guard_2_sees_player_EFEB           	| [$efb9: jr   nz,guard_2_sees_player_EFEB]
	addq.w	#1,a2                           	| [$efbb: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_efb4                             	| [$efbd: djnz $EFB4]
	lea	guard_1_in_elevator_5_62E9,a0                	| [$efbf: ld   hl,guard_1_in_elevator_5_62E9]
	move.l	a0,unknown_pointer_633D                 	| [$efc2: ld   (unknown_633D),hl]
	lea	guard_1_direction_6027,a0      	| [$efc5: ld   hl,guard_1_direction_6027]
	move.l	a0,guard_direction_pointer_6095 	| [$efc8: ld   (guard_direction_pointer_6095),hl]
	lea	unknown_6144,a0                	| [$efcb: ld   hl,unknown_6144]
	move.l	a0,unknown_pointer_6146         	| [$efce: ld   (unknown_pointer_6146),hl]
	move.b	guard_1_screen_6099,d0          	| [$efd1: ld   a,(guard_1_screen_6099)]
	move.b	d0,current_character_screen_index_6098	| [$efd4: ld   (current_character_screen_index_6098),a]
	lea	player_struct_6580,a2          	| [$efd7: ld   ix,player_struct_6580]
	lea	guard_1_struct_6594,a3         	| [$efdb: ld   iy,guard_1_struct_6594]
	move.w	guard_1_logical_address_6038,d3	| [$efdf: ld   de,(guard_1_logical_address_6038)]
	lea	guard_1_in_elevator_603B,a0    	| [$efe3: ld   hl,guard_1_in_elevator_603B]
	jbsr	guard_wait_for_elevator_test_C4BC 	| [$efe6: call guard_wait_for_elevator_test_C4BC]
	jra	l_efef                             	| [$efe9: jr   $EFEF]

guard_2_sees_player_EFEB:
	clr.b	d0                               	| [$efeb: xor  a]
	move.b	d0,guard_1_not_moving_flag_6148                 	| [$efec: ld   (guard_1_not_moving_flag_6148),a]
l_efef:
	lea	guard_2_sees_player_right_607C,a2	| [$efef: ld   ix,guard_2_sees_player_right_607C]
	move.b	#0x04,d1                        	| [$eff3: ld   b,$04]
l_eff5:
	move.b	(A2),d0                    	| [$eff5: ld   a,(ix+$00)]
	                         	| [$eff8: cp   $00]
	jne	guard_1_sees_player_F02C           	| [$effa: jr   nz,guard_1_sees_player_F02C]
	addq.w	#1,a2                           	| [$effc: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_eff5                             	| [$effe: djnz $EFF5]
	lea	guard_2_in_elevator_5_62ED,a0                	| [$f000: ld   hl,guard_2_in_elevator_5_62ED]
	move.l	a0,unknown_pointer_633D                 	| [$f003: ld   (unknown_633D),hl]
	lea	guard_2_direction_6067,a0      	| [$f006: ld   hl,guard_2_direction_6067]
	move.l	a0,guard_direction_pointer_6095 	| [$f009: ld   (guard_direction_pointer_6095),hl]
	lea	unknown_6145,a0                	| [$f00c: ld   hl,unknown_6145]
	move.l	a0,unknown_pointer_6146         	| [$f00f: ld   (unknown_pointer_6146),hl]
	move.b	guard_2_screen_609A,d0          	| [$f012: ld   a,(guard_2_screen_609A)]
	move.b	d0,current_character_screen_index_6098	| [$f015: ld   (current_character_screen_index_6098),a]
	lea	player_struct_6580,a2          	| [$f018: ld   ix,player_struct_6580]
	lea	guard_2_struct_6598,a3         	| [$f01c: ld   iy,guard_2_struct_6598]
	move.w	guard_2_logical_address_6078,d3	| [$f020: ld   de,(guard_2_logical_address_6078)]
	lea	guard_2_in_elevator_607B,a0    	| [$f024: ld   hl,guard_2_in_elevator_607B]
	jbsr	guard_wait_for_elevator_test_C4BC 	| [$f027: call guard_wait_for_elevator_test_C4BC]
	jra	l_f030                             	| [$f02a: jr   $F030]

guard_1_sees_player_F02C:
	clr.b	d0                               	| [$f02c: xor  a]
	move.b	d0,guard_2_not_moving_flag_6149                 	| [$f02d: ld   (guard_2_not_moving_flag_6149),a]
l_f030:
	move.b	pickup_flag_6160,d0             	| [$f030: ld   a,(pickup_flag_6160)]
	move.b	d0,unknown_632A                 	| [$f033: ld   (unknown_632A),a]
	move.w	player_logical_address_6009,d6	| [$f036: ld   hl,(player_logical_address_6009)]
	jbsr	l_f2cb                            	| [$f039: call $F2CB]
    jbsr   osd_enable_vblank_interrupt  | ei
	jbsr	l_dabd                            	| [$f03d: call $DABD]
	jbsr	l_d73e                            	| [$f040: call $D73E]
	jeq	l_f048                             	| [$f043: jr   z,$F048]
	jbsr	l_e399                            	| [$f045: call $E399]
l_f048:
    jbsr   osd_enable_vblank_interrupt  | ei
	move.b	has_pick_61CF,d0                	| [$f049: ld   a,(has_pick_61CF)]
	                         	| [$f04c: cp   $00]
	jeq	l_f077                             	| [$f04e: jr   z,$F077]
	move.b	guard_1_screen_6099,d0          	| [$f050: ld   a,(guard_1_screen_6099)]
	move.b	d0,d1                           	| [$f053: ld   b,a]
	move.b	unknown_6270,d0                 	| [$f054: ld   a,(unknown_6270)]
	cmp.b	d1,d0                            	| [$f057: cp   b]
	move.b	player_screen_600D,d0           	| [$f058: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$f05b: cp   b]
	jne	l_f077                             	| [$f05c: jr   nz,$F077]
	lea	guard_1_struct_6594,a2         	| [$f05e: ld   ix,guard_1_struct_6594]
	lea	object_held_struct_659C,a3     	| [$f062: ld   iy,object_held_struct_659C]
	clr.b	d2                               	| [$f066: ld   c,$00]
	move.b	#0x06,d1                        	| [$f068: ld   b,$06]
	jbsr	l_c497                            	| [$f06a: call $C497]
	cmp.b	#0x01,d0                         	| [$f06d: cp   $01]
	jne	l_f077                             	| [$f06f: jr   nz,$F077]
	jbsr	l_fcf4                            	| [$f071: call $FCF4]
	jbsr	l_caad                            	| [$f074: call $CAAD]
l_f077:
	move.b	guard_1_death_flag_629F,d0                 	| [$f077: ld   a,(guard_1_death_flag_629F)]
	cmp.b	#0x01,d0                         	| [$f07a: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_fcf4                            	| [$f07c: call z,$FCF4]
0:
	clr.b	d0                               	| [$f07f: xor  a]
	move.b	d0,guard_1_death_flag_629F                 	| [$f080: ld   (guard_1_death_flag_629F),a]
	tst.b	has_pick_61CF                	| [$f083: ld   a,(has_pick_61CF)]
	                         	| [$f086: cp   $00]
	jeq	l_f0ad                             	| [$f088: jr   z,$F0AD]
	* player has pickaxe
	lea	guard_2_struct_6598,a2         	| [$f08a: ld   ix,guard_2_struct_6598]
	lea	object_held_struct_659C,a3     	| [$f08e: ld   iy,object_held_struct_659C]
	move.b	guard_2_screen_609A,d0          	| [$f092: ld   a,(guard_2_screen_609A)]
	move.b	d0,d1                           	| [$f095: ld   b,a]
	move.b	player_screen_600D,d0           	| [$f096: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$f099: cp   b]
	jne	l_f0ad                             	| [$f09a: jr   nz,$F0AD]
	clr.b	d2                               	| [$f09c: ld   c,$00]
	move.b	#0x06,d1                        	| [$f09e: ld   b,$06]
	jbsr	l_c497                            	| [$f0a0: call $C497]
	cmp.b	#0x01,d0                         	| [$f0a3: cp   $01]
	jne	l_f0ad                             	| [$f0a5: jr   nz,$F0AD]
	jbsr	l_fd33                            	| [$f0a7: call $FD33]
	jbsr	l_caad                            	| [$f0aa: call $CAAD]
l_f0ad:
	move.b	guard_2_death_flag_62A7,d0                 	| [$f0ad: ld   a,(guard_2_death_flag_62A7)]
	cmp.b	#0x01,d0                         	| [$f0b0: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_fd33                            	| [$f0b2: call z,$FD33]
0:
	clr.b	d0                               	| [$f0b5: xor  a]
	move.b	d0,guard_2_death_flag_62A7                 	| [$f0b6: ld   (guard_2_death_flag_62A7),a]
	lea	player_struct_6580,a2          	| [$f0b9: ld   ix,player_struct_6580]
	lea	elevator_struct_6584,a3        	| [$f0bd: ld   iy,elevator_struct_6584]
	jbsr	guard_collision_with_pick_C493    	| [$f0c1: call guard_collision_with_pick_C493]
	cmp.b	#0x01,d0                         	| [$f0c4: cp   $01]
	jne	l_f0d9                             	| [$f0c6: jr   nz,$F0D9]
	                        	| [$f0c8: ld   a,$01]
	jbsr  is_invincible
	bne.b	0f
	move.b	#1,player_death_flag_6025       	| [$f0ca: ld   (player_death_flag_6025),a]
0:
	clr.b	d0                               	| [$f0cd: xor  a]
	move.b	d0,player_in_wagon_flag_6029    	| [$f0ce: ld   (player_in_wagon_flag_6029),a]
	jbsr	l_f82d                            	| [$f0d1: call $F82D]
	cmp.b	#0x01,d0                         	| [$f0d4: cp   $01]
	jeq	l_ecdc                             	| [$f0d6: jp   z,$ECDC]
l_f0d9:
    jbsr   osd_enable_vblank_interrupt  | ei
	jbsr	compute_guard_speed_from_dipsw_C5EE	| [$f0da: call compute_guard_speed_from_dipsw_C5EE]
	jbsr	l_d27e                            	| [$f0dd: call $D27E]
	move.b	check_scenery_disabled_61ED,d0  	| [$f0e0: ld   a,(check_scenery_disabled_61ED)]
	                         	| [$f0e3: cp   $00]
	bne.b	0f                               	| [...]
	jbsr	draw_object_tiles_FD72            	| [$f0e5: call z,draw_object_tiles_FD72]
0:
	move.b	guard_2_sees_player_right_607C,d0	| [$f0e8: ld   a,(guard_2_sees_player_right_607C)]
	move.b	d0,d1                           	| [$f0eb: ld   b,a]
	move.b	guard_2_sees_player_left_607D,d0	| [$f0ec: ld   a,(guard_2_sees_player_left_607D)]
	or.b	d1,d0                             	| [$f0ef: or   b]
	                         	| [$f0f0: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	l_e67d                            	| [$f0f2: call nz,$E67D]
0:
	move.b	guard_1_sees_player_right_603C,d0	| [$f0f5: ld   a,(guard_1_sees_player_right_603C)]
	move.b	d0,d1                           	| [$f0f8: ld   b,a]
	move.b	guard_1_sees_player_left_603D,d0	| [$f0f9: ld   a,(guard_1_sees_player_left_603D)]
	or.b	d1,d0                             	| [$f0fc: or   b]
												| [$f0fd: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	l_e6f9                            	| [$f0ff: call nz,$E6F9]
0:
	jbsr	l_e2c5                            	| [$f102: call $E2C5]
	jbsr	l_e1ed                            	| [$f105: call $E1ED]
	jbsr	l_e20d                            	| [$f108: call $E20D]
	jbsr	l_e228                            	| [$f10b: call $E228]
	jbsr	animate_jail_buddy_def7                            	| [$f10e: call $DEF7]
	jbsr	handle_characters_in_elevator_5_d708                            	| [$f111: call $D708]
	move.b	jail_buddy_free_6343,d0                 	| [$f114: ld   a,(jail_buddy_free_6343)]
	cmp.b	#0x01,d0                         	| [$f117: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	check_if_level_completed_D12F     	| [$f119: call z,check_if_level_completed_D12F]
0:
	move.b	has_bomb_6311,d0                 	| [$f11c: ld   a,(has_bomb_6311)]
	cmp.b	#0x01,d0                         	| [$f11f: cp   $01]
	jeq	l_f152                             	| [$f121: jr   z,$F152]
	move.b	bomb_picked_up_6323,d0                 	| [$f123: ld   a,(bomb_picked_up_6323)]
	cmp.b	#0x01,d0                         	| [$f126: cp   $01]
	jne	l_f15c                             	| [$f128: jr   nz,$F15C]
	move.b	bomb_just_dropped_6334,d0                 	| [$f12a: ld   a,(bomb_just_dropped_6334)]
	cmp.b	#0x01,d0                         	| [$f12d: cp   $01]
	jeq	l_f15c                             	| [$f12f: jr   z,$F15C]
	subq.b	#1,bomb_timer_6324                 	| [$f131: ld   a,(bomb_timer_6324)]
											| [$f134: dec  a]														| [$f135: ld   (bomb_timer_6324),a]
											| [$f138: cp   $00]
	jne	l_f14d                             	| [$f13a: jr   nz,$F14D]
	* bomb goes off / detonates
	move.b	#0x01,d0                        	| [$f13c: ld   a,$01]
	move.b	d0,bomb_must_detonate_62F5                 	| [$f13e: ld   (bomb_must_detonate_62F5),a]
	move.b	#0x01,d0                        	| [$f141: ld   a,$01]
	move.b	d0,unknown_6351                 	| [$f143: ld   (unknown_6351),a]
	clr.b	d0                               	| [$f146: xor  a]
	move.b	d0,bomb_picked_up_6323                 	| [$f147: ld   (bomb_picked_up_6323),a]
	jra	l_f15c                             	| [$f14a: jp   $F15C]
l_f14d:
	jbsr	l_da55                            	| [$f14d: call $DA55]
	jra	l_f15c                             	| [$f150: jr   $F15C]
l_f152:
	move.b	#0x01,d0                        	| [$f152: ld   a,$01]
	move.b	d0,bomb_picked_up_6323                 	| [$f154: ld   (bomb_picked_up_6323),a]
	move.b	#0x20,d0                        	| [$f157: ld   a,$20]
	move.b	d0,bomb_timer_6324                 	| [$f159: ld   (bomb_timer_6324),a]
l_f15c:
	move.b	unknown_62B6,d0                 	| [$f15c: ld   a,(unknown_62B6)]
	cmp.b	#0x01,d0                         	| [$f15f: cp   $01]
	jne	l_f168                             	| [$f161: jr   nz,$F168]
	move.b	#0x80,d0                        	| [$f163: ld   a,$80]
	move.b	d0,guard_1_direction_6027       	| [$f165: ld   (guard_1_direction_6027),a]
l_f168:
	move.b	unknown_62BA,d0                 	| [$f168: ld   a,(unknown_62BA)]
	cmp.b	#0x01,d0                         	| [$f16b: cp   $01]
	jne	l_f174                             	| [$f16d: jr   nz,$F174]
	move.b	#0x80,d0                        	| [$f16f: ld   a,$80]
	move.b	d0,guard_2_direction_6067       	| [$f171: ld   (guard_2_direction_6067),a]
l_f174:
	move.b	unknown_6156,d0                 	| [$f174: ld   a,(unknown_6156)]
												| [$f177: cp   $00]
	jeq	l_f17f                             	| [$f179: jr   z,$F17F]
	clr.b	d0                               	| [$f17b: xor  a]
	move.b	d0,guard_1_not_moving_timeout_counter_6057	| [$f17c: ld   (guard_1_not_moving_timeout_counter_6057),a]
l_f17f:
	move.b	unknown_6157,d0                 	| [$f17f: ld   a,(unknown_6157)]
	                         	| [$f182: cp   $00]
	jeq	l_f18a                             	| [$f184: jr   z,$F18A]
	clr.b	d0                               	| [$f186: xor  a]
	move.b	d0,guard_2_not_moving_timeout_counter_6097	| [$f187: ld   (guard_2_not_moving_timeout_counter_6097),a]
l_f18a:
	                                    	| [$f18a: nop]
	jra	mainloop_ecf9                             	| [$f18b: jp   $ECF9]
l_f18e:
	bsr		read_rom                         	| [$f18e: ld   a,(hl)]
	LEA_ROM	       0x239E,a0                      	| [$f18f: ld   hl,$239E]
	addq.w	#1,a0                           	| [$f192: inc  hl]
	move.w	#0x09,d1                        	| [$f193: ld   bc,$0009] 9
	jbsr	cpir                              	| [$f196: cpir]
	rts                                    	| [$f198: ret]
l_f199:
	move.b	bag_sliding_615E,d0             	| [$f199: ld   a,(bag_sliding_615E)]
	                         	| [$f19c: cp   $00]
	jne	l_f1a6                             	| [$f19e: jr   nz,$F1A6]
	move.b	bag_falling_6159,d0             	| [$f1a0: ld   a,(bag_falling_6159)]
	                         	| [$f1a3: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$f1a5: ret  z] [...]
0:
l_f1a6:
	lea	object_held_struct_659C,a2     	| [$f1a6: ld   ix,object_held_struct_659C]
	lea	unknown_615A,a3                	| [$f1aa: ld   iy,unknown_615A]
	move.b	player_screen_600D,d0           	| [$f1ae: ld   a,(player_screen_600D)]
	move.b	d0,current_character_screen_index_6098	| [$f1b1: ld   (current_character_screen_index_6098),a]
	subq.b	#1,(0x03,a2)                    	| [$f1b4: dec  (ix+$03)]
	jbsr	compute_logical_address_from_xy_EAEF	| [$f1b7: call compute_logical_address_from_xy_EAEF]
	lea	object_held_struct_659C,a2     	| [$f1ba: ld   ix,object_held_struct_659C]
	addq.b	#1,(0x03,a2)                    	| [$f1be: inc  (ix+$03)]
	bsr		read_rom                         	| [$f1c1: ld   a,(hl)]

	movem.l	a0,-(sp)                        	| [$f1c2: push hl]
	LEA_ROM	       0x5B24,a0                      	| [$f1c3: ld   hl,$5B24]
	move.w	#0x07,d1                        	| [$f1c6: ld   bc,$0007] 7
	jbsr	cpdr                              	| [$f1c9: cpdr]
	movem.l	(sp)+,a0                        	| [$f1cb: pop  hl]
	jne	l_f1d9                             	| [$f1cc: jp   nz,$F1D9]

	move.b	#0x01,d0                        	| [$f1cf: ld   a,$01]
	move.b	d0,bag_sliding_615E             	| [$f1d1: ld   (bag_sliding_615E),a]
	clr.b	d0                               	| [$f1d4: xor  a]
	move.b	d0,bag_falling_6159             	| [$f1d5: ld   (bag_falling_6159),a]
	rts                                    	| [$f1d8: ret]
l_f1d9:
	clr.b	d0                               	| [$f1d9: xor  a]
	move.b	d0,bag_sliding_615E             	| [$f1da: ld   (bag_sliding_615E),a]
	addq.b	#1,d0                           	| [$f1dd: inc  a]
	move.b	d0,bag_falling_6159             	| [$f1de: ld   (bag_falling_6159),a]
	lea	object_held_struct_659C,a2     	| [$f1e1: ld   ix,object_held_struct_659C]
	lea	unknown_615A,a3                	| [$f1e5: ld   iy,unknown_615A]
	move.b	player_screen_600D,d0           	| [$f1e9: ld   a,(player_screen_600D)]
	move.b	d0,current_character_screen_index_6098	| [$f1ec: ld   (current_character_screen_index_6098),a]
	jbsr	compute_logical_address_from_xy_EAEF	| [$f1ef: call compute_logical_address_from_xy_EAEF]
	bsr		read_rom                         	| [$f1f2: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$f1f3: push hl]
	LEA_ROM	       0x21E3,a0                      	| [$f1f4: ld   hl,$21E3]
	move.w	#0x17,d1                        	| [$f1f7: ld   bc,$0017] 23
	jbsr	cpdr                              	| [$f1fa: cpdr]
	movem.l	(sp)+,a0                        	| [$f1fc: pop  hl]
	bne.b	0f                               	| [...]
	rts                                    	| [$f1fd: ret  z] [...]
0:
	clr.b	bag_sliding_615E             	| [$f1ff: ld   (bag_sliding_615E),a]
	clr.b	bag_falling_6159             	| [$f202: ld   (bag_falling_6159),a]
	move.l	unknown_pointer_615C,a3     	| [$f205: ld   iy,(unknown_pointer_615C)]
 	move.b	player_screen_600D,d0           	| [$f209: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$f20c: ld   (iy+$02),a]
	jbsr	convert_logical_to_screen_address_f2b2                            	| [$f20f: call $F2B2]
	bsr		osd_r_videoram                         	| [$f212: ld   a,(hl)]
	                              	| [$f213: ex   de,hl]
	LEA_ROM	       0x21E3,a0                      	| [$f214: ld   hl,$21E3]
	move.w	#0x17,d1                        	| [$f217: ld   bc,$0017] 23
	jbsr	cpdr                              	| [$f21a: cpdr]
	                             	| [$f21c: ex   de,hl]
	jeq	l_f225                             	| [$f21d: jr   z,$F225]
	move.w	#0x0020,d3                      	| [$f21f: ld   de,$0020] 32
	add.w	d3,d6                            	| [$f222: add  hl,de]
	jra	l_f246                             	| [$f223: jr   $F246]
l_f225:
	move.w	#0x0020,d3                      	| [$f225: ld   de,$0020] 32

	move.w	d6,-(sp)                        	| [$f228: push hl]
	add.w	d3,d6                            	| [$f229: add  hl,de]
	bsr		osd_r_videoram                         	| [$f22a: ld   a,(hl)]
	move.w	(sp)+,d6                        	| [$f22b: pop  hl]
	cmp.b	#0xEC,d0                         	| [$f22c: cp   $EC]
	jeq	l_f246                             	| [$f22e: jr   z,$F246]
	cmp.b	#0xEE,d0                         	| [$f230: cp   $EE]
	jeq	l_f246                             	| [$f232: jr   z,$F246]
                              	| [$f234: ex   de,hl]
	LEA_ROM	       0x21E3,a0                      	| [$f235: ld   hl,$21E3]
	move.w	#0x17,d1                        	| [$f238: ld   bc,$0017] 23
	jbsr	cpdr                              	| [$f23b: cpdr]
	                              	| [$f23d: ex   de,hl]
	jeq	l_f246                             	| [$f23e: jr   z,$F246]
	move.w	#0x0020,d3                      	| [$f240: ld   de,$0020] 32
												| [$f243: xor  a]
	sub.w	d3,d6                            	| [$f244: sbc  hl,de]
l_f246:
	jbsr	osd_disable_vblank_interrupt  | di
	STORE_DX_BE_WORD_AY	d6,a3                    	| [$f247: ld   (iy+$00),l]
*	move.b	d6,d0                           	| [$f24a: ld   a,l]
*	cmp.b	#0xC0,d0                         	| [$f24b: cp   $C0]
*	jne	l_f251                             	| [$f24d: jr   nz,$F251]
*	move.b	#0x68,d0                        	| [$f24f: ld   a,$68] will be overwritten just after
*l_f251:
	                    	| [$f251: ld   (iy+$01),h]
	move.b	player_screen_600D,d0           	| [$f254: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$f257: ld   (iy+$02),a]
	jbsr	osd_enable_vblank_interrupt		| ei
	jbsr	l_ec05                            	| [$f25b: call $EC05]
	jeq	l_f262                             	| [$f25e: jr   z,$F262]
	jra	l_f2a4                             	| [$f260: jr   $F2A4]
l_f262:

	move.l	a2,-(sp)                        	| [$f262: push ix]
	jbsr	award_timer_score_f2c2                            	| [$f264: call $F2C2]
	move.b	object_held_color_attrs_659D,d0                 	| [$f267: ld   a,(object_held_color_attrs_659D)]
	cmp.b	#0x24,d0                         	| [$f26a: cp   $24]
	jne	l_f279                             	| [$f26c: jr   nz,$F279]
	* blue bag: double score
	move.b	#0x20,d0                        	| [$f26e: ld   a,$20]
	move.b	d0,object_held_color_attrs_659D                 	| [$f270: ld   (object_held_color_attrs_659D),a]
	jbsr	award_timer_score_f2c2                            	| [$f273: call $F2C2]
	jbsr	award_timer_score_f2c2                            	| [$f276: call $F2C2]
l_f279:
	* plays "a moi le magot" sample
	move.w	#REWARD_TALK_SND,d0                      	| [$1775: ld   hl,$3F1B]
	jbsr	start_a_sound                            	| [$1778: call $2018]
	* plays "bag dropped in barrow" music
	move.w	#REWARD_TUNE_SND,d0				| [$1780: ld   hl,$5B78]
	jbsr	start_a_sound					| [$1783: ld   (ay_sound_pointer_6140),hl]

	move.l	(sp)+,a2                        	| [$f28e: pop  ix]
    jbsr   osd_disable_vblank_interrupt  | di
	clr.b	d0                               	| [$f291: xor  a]
	move.b	d0,(A3)                    	| [$f292: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$f295: ld   (iy+$01),a]
	move.b	d0,(0x02,a3)                    	| [$f298: ld   (iy+$02),a]
    jbsr   osd_enable_vblank_interrupt  | ei
	move.b	#0x40,d0                        	| [$f29c: ld   a,$40]
	tst.b	very_easy_flag
	beq.b	0f
	add.b	#0x20,d0			| 6000 not 4000
0:
	move.b	d0,time_61E8                    	| [$f29e: ld   (time_61E8),a]
	jbsr	check_if_level_completed_D12F     	| [$f2a1: call check_if_level_completed_D12F]
l_f2a4:
	clr.b	d0                               	| [$f2a4: xor  a]
	lea	object_held_struct_659C,a2     	| [$f2a5: ld   ix,object_held_struct_659C]
	move.b	d0,(0x02,a2)                    	| [$f2a9: ld   (ix+$02),a]
	st.b	d0                                	| [$f2ac: ld   a,$FF]
	move.b	d0,(0x03,a2)                    	| [$f2ae: ld   (ix+$03),a]
	rts                                    	| [$f2b1: ret]
	
* example
* in: HL=4625
* in: A=2
*    BC=4C00
* out: HL=9203

convert_logical_to_screen_address_f2b2:
	jbsr	compute_logical_screen_address_eb87                            	| [$f2b2: call $EB87]
	           	| [$f2b5: ld   a,h]
	            	| [$f2b6: add  a,b]
	           	| [$f2b7: ld   h,a]
	            	| [$f2b8: xor  a]
	           	| [$f2b9: ld   a,l]
	sub.w	#0x22,d1                         	| [$f2ba: sub  $22]
	add.w	d1,d6                           	| [$f2bc: ld   l,a]
												| [$f2bd: ld   a,h]
												| [$f2be: sbc  a,$00]
										
												| [$f2c0: ld   h,a]
	rts                                    	| [$f2c1: ret]



award_timer_score_f2c2:
	move.b	timer_high_prec_61E7+1,d6     	| [$f2c2: ld   hl,(timer_high_prec_61E7)]
	lsl.w	#8,d6                               	| [$f2c5: ld   l,$00]
	jbsr	add_to_score_5C90                 	| [$f2c7: call add_to_score_5C90]
	rts                                    	| [$f2ca: ret]
l_f2cb:
	move.b	unknown_62D2,d0                 	| [$f2cb: ld   a,(unknown_62D2)]
	cmp.b	#0x01,d0                         	| [$f2ce: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f2d0: ret  z] [...]
0:
	move.b	unknown_633A,d0                 	| [$f2d1: ld   a,(unknown_633A)]
	cmp.b	#0x01,d0                         	| [$f2d4: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f2d6: ret  z] [...]
0:
	move.b	has_bag_6158,d0                 	| [$f2d7: ld   a,(has_bag_6158)]
	                         	| [$f2da: cp   $00]
	jne	l_f4a7                             	| [$f2dc: jp   nz,$F4A7]
	move.b	has_pick_61CF,d0                	| [$f2df: ld   a,(has_pick_61CF)]
	cmp.b	#0x01,d0                         	| [$f2e2: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f2e4: ret  z] [...]
0:
	move.b	holds_barrow_61C7,d0            	| [$f2e5: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$f2e8: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f2ea: ret  z] [...]
0:
	move.b	bag_falling_6159,d0             	| [$f2eb: ld   a,(bag_falling_6159)]
	cmp.b	#0x01,d0                         	| [$f2ee: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f2f0: ret  z] [...]
0:
	move.b	has_bomb_6311,d0                 	| [$f2f1: ld   a,(has_bomb_6311)]
	cmp.b	#0x01,d0                         	| [$f2f4: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f2f6: ret  z] [...]
0:
	move.b	bag_sliding_615E,d0             	| [$f2f7: ld   a,(bag_sliding_615E)]
	cmp.b	#0x01,d0                         	| [$f2fa: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f2fc: ret  z] [...]
0:
	move.b	bomb_just_dropped_6334,d0                 	| [$f2fd: ld   a,(bomb_just_dropped_6334)]
	cmp.b	#0x01,d0                         	| [$f300: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f302: ret  z] [...]
0:
	* for bags, it's different from other items
	* scan if player is at the same position as a bag
	* do it permanently
	lea	bags_coordinates_609C,a3       	| [$f303: ld   iy,bags_coordinates_609C]
	move.b	#0x12,d1                        	| [$f307: ld   b,$12]
	move.w	player_logical_address_6009,d6	| [$f309: ld   hl,(player_logical_address_6009)]
	move.b	#0x24,d0                        	| [$f30c: ld   a,$24]
	move.b	d0,unknown_627B                 	| [$f30e: ld   (unknown_627B),a]
l_f311:
	move.b	(0x02,a3),d0                    	| [$f311: ld   a,(iy+$02)]
	movem.w	d1/d2,-(sp)                    	| [$f314: push bc]
	move.b	d0,d1                           	| [$f315: ld   b,a]
	move.b	player_screen_600D,d0           	| [$f316: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$f319: cp   b]

	movem.w	(sp)+,d1/d2                    	| [$f31a: pop  bc]
	jne	l_f335                             	| [$f31b: jp   nz,$F335]
	LOAD_AX_BE_WORD_DY	a3,d3
										| [$f31e: ld   d,(iy+$01)]
									| [$f321: ld   e,(iy+$00)]
	addq.w	#2,d3                           	| [$f324: inc  de] * 2
	jbsr	compute_backbuffer_tile_address_F47B	| [$f326: call compute_backbuffer_tile_address_F47B]
	clr.b	d0                               	| [$f329: xor  a]

	                        	| [$f32a: push hl]
	cmp.w	d3,d6                            	| [$f32b: sbc  hl,de]
	                        	| [$f32d: pop  hl]
	jeq	l_f343                             	| [$f32e: jr   z,$F343]
	jbsr	compare_d3_d6_20_offset_d00b                            	| [$f330: call $D00B]
	jeq	l_f343                             	| [$f333: jr   z,$F343]
l_f335:
	addq.w	#3,a3                           	| [$f335: inc  iy]
	                          	| [$f337: inc  iy] * 2
	move.b	#0x20,d0                        	| [$f33b: ld   a,$20]
	move.b	d0,unknown_627B                 	| [$f33d: ld   (unknown_627B),a]
	subq.b	#1,d1                           	| [...]
	jne	l_f311                             	| [$f340: djnz $F311]
	rts                                    	| [$f342: ret]
l_f343:
	* player is at the same X/Y as a bag (in a position
	* that is compatible with picking it up)
	jbsr	test_pickup_flag_F4E3             	| [$f343: call test_pickup_flag_F4E3]
	move.b	d1,d0                           	| [$f346: ld   a,b]
	                         	| [$f347: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$f349: ret  z] [...]
0:
	tst.b	has_pick_61CF                	| [$f34a: ld   a,(has_pick_61CF)]
	                         	| [$f34d: cp   $00]
	jeq	l_f370                             	| [$f34f: jr   z,$F370]

	move.l	a3,-(sp)                        	| [$f351: push iy]

	move.l	a0,-(sp)                        	| [$f353: push hl]
	lea		has_pick_61CF,a4           	| [$f354: ld   bc,has_pick_61CF] None
	lea	current_pickaxe_screen_params_61CC,a3	| [$f357: ld   iy,current_pickaxe_screen_params_61CC]
	move.b	#0x38,d0                        	| [$f35b: ld   a,$38]
	move.b	d0,(0x04,a3)                    	| [$f35d: ld   (iy+$04),a]
	move.b	#0x28,d0                        	| [$f360: ld   a,$28]
	move.b	d0,(0x05,a3)                    	| [$f362: ld   (iy+$05),a]
	move.b	#0xE4,d0                        	| [$f365: ld   a,$E4]
	move.b	d0,unknown_61D2                 	| [$f367: ld   (unknown_61D2),a]
	jbsr	drop_object_FC55                  	| [$f36a: call drop_object_FC55]
	move.l	(sp)+,a0                        	| [$f36d: pop  hl]
	move.l	(sp)+,a3                        	| [$f36e: pop  iy]
l_f370:
	lea	player_struct_6580,a2          	| [$f370: ld   ix,player_struct_6580]
	move.b	is_key_hunt_phase_6341,d0                 	| [$f374: ld   a,(is_key_hunt_phase_6341)]
	cmp.b	#0x01,d0                         	| [$f377: cp   $01]
	jne	l_f395                             	| [$f379: jr   nz,$F395]
	move.b	#0x31,d0                        	| [$f37b: ld   a,$31]
	move.b	d0,(0x1c,a2)                    	| [$f37d: ld   (ix+$1c),a]
	move.b	#0x24,d0                        	| [$f380: ld   a,$24]
	move.b	d0,(0x1d,a2)                    	| [$f382: ld   (ix+$1d),a]
	move.b	(0x03,a2),d0                    	| [$f385: ld   a,(ix+$03)]
	move.b	d0,(0x1f,a2)                    	| [$f388: ld   (ix+$1f),a]
	move.b	(0x02,a2),d0                    	| [$f38b: ld   a,(ix+$02)]
	sub.b	#0x08,d0                         	| [$f38e: sub  $08]
	move.b	d0,(0x1e,a2)                    	| [$f390: ld   (ix+$1e),a]
	jra	l_f3ae                             	| [$f393: jr   $F3AE]
l_f395:
	move.b	#0x3F,d0                        	| [$f395: ld   a,$3F]
	move.b	d0,(0x1c,a2)                    	| [$f397: ld   (ix+$1c),a]
	move.b	unknown_627B,d0                 	| [$f39a: ld   a,(unknown_627B)]
	move.b	d0,(0x1d,a2)                    	| [$f39d: ld   (ix+$1d),a]
	move.b	(0x03,a2),d0                    	| [$f3a0: ld   a,(ix+$03)]
	move.b	d0,(0x1f,a2)                    	| [$f3a3: ld   (ix+$1f),a]
	move.b	(0x02,a2),d0                    	| [$f3a6: ld   a,(ix+$02)]
	sub.b	#0x08,d0                         	| [$f3a9: sub  $08]
	move.b	d0,(0x1e,a2)                    	| [$f3ab: ld   (ix+$1e),a]
l_f3ae:
	move.w	#TAKE_BAG_SND,d0      	
	jbsr	start_a_sound         	
										| [$f3ae: call is_ay_sound_playing_D4D9]
							
								| [$f3b1: jr   nz,$F3BD]
										| [$f3b3: ld   hl,$5BA8]
								| [$f3b6: ld   (ay_sound_pointer_6140),hl]
								| [$f3b9: xor  a]
								| [$f3ba: ld   (ay_sound_start_6142),a]
l_f3bd:
	move.b	#0x01,d0                        	| [$f3bd: ld   a,$01]
	move.b	d0,has_bag_6158                 	| [$f3bf: ld   (has_bag_6158),a]
	move.l	a3,unknown_pointer_615C         	| [$f3c2: ld   (unknown_pointer_615C),iy]
	LOAD_AX_BE_WORD_DY	a3,d6
										| [$f3c6: ld   h,(iy+$01)]
									| [$f3c9: ld   l,(iy+$00)]
	move.w	d6,picked_up_object_screen_address_61F6	| [$f3cc: ld   (picked_up_object_screen_address_61F6),hl]
	clr.b	d0                               	| [$f3cf: xor  a]
	move.b	d0,unknown_627E                 	| [$f3d0: ld   (unknown_627E),a]
    jbsr   osd_disable_vblank_interrupt  | di
	move.b	d0,(A3)                    	| [$f3d4: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$f3d7: ld   (iy+$01),a]
	move.b	d0,(0x02,a3)                    	| [$f3da: ld   (iy+$02),a]
    jbsr   osd_enable_vblank_interrupt  | ei
	move.b	unknown_627B,d0                 	| [$f3de: ld   a,(unknown_627B)]
	cmp.b	#0x24,d0                         	| [$f3e1: cp   $24]
	clr.b	d0                               	| [$f3e3: ld   a,$00]
	jne	l_f3e9                             	| [$f3e5: jr   nz,$F3E9]
	move.b	#0x01,d0                        	| [$f3e7: ld   a,$01]
l_f3e9:
	move.b	d0,player_has_blue_bag_flag_627C	| [$f3e9: ld   (player_has_blue_bag_flag_627C),a]
	rts                                    	| [$f3ec: ret]
l_f3ed:
	move.b	unknown_627E,d0                 	| [$f3ed: ld   a,(unknown_627E)]
	cmp.b	#0x07,d0                         	| [$f3f0: cp   $07]
	bcs.b	0f                               	| [...]
	rts                                    	| [$f3f2: ret  nc] [...]
0:
restore_object_background_f3f3:
	move.w	picked_up_object_screen_address_61F6,d6	| [$f3f3: ld   hl,(picked_up_object_screen_address_61F6)]
 	lsr.w	#8,d6                           	| [$f3f6: ld   a,h]
	                         	| [$f3f7: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$f3f9: ret  z] [...]
0:
	move.w	picked_up_object_screen_address_61F6,d6
	move.b	d6,d0                           	| [$f3fa: ld   a,l]
	and.b	#0x1F,d0                         	| [$f3fb: and  $1F]
	                         	| [$f3fd: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$f3ff: ret  z] [...]
0:
	jbsr	restore_background_tile_F465      	| [$f400: call restore_background_tile_F465]
	jbsr	color_background_tile_F43B        	| [$f403: call color_background_tile_F43B]
	addq.w	#1,d6                           	| [$f406: inc  hl]
	jbsr	restore_background_tile_F465      	| [$f407: call restore_background_tile_F465]
	jbsr	color_background_tile_F43B        	| [$f40a: call color_background_tile_F43B]
	move.w	#0x0020,d3                      	| [$f40d: ld   de,$0020] 32
	add.w	d3,d6                            	| [$f410: add  hl,de]
	jbsr	restore_background_tile_F465      	| [$f411: call restore_background_tile_F465]
	jbsr	color_background_tile_F43B        	| [$f414: call color_background_tile_F43B]
	subq.w	#1,d6                           	| [$f417: dec  hl]
	jbsr	restore_background_tile_F465      	| [$f418: call restore_background_tile_F465]
	jbsr	color_background_tile_F43B        	| [$f41b: call color_background_tile_F43B]
	move.b	unknown_627E,d0                 	| [$f41e: ld   a,(unknown_627E)]
	addq.b	#1,d0                           	| [$f421: inc  a]
	move.b	d0,unknown_627E                 	| [$f422: ld   (unknown_627E),a]
	move.b	player_screen_600D,d0           	| [$f425: ld   a,(player_screen_600D)]
	cmp.b	#0x05,d0                         	| [$f428: cp   $05]
	bne.b	0f                               	| [...]
	jbsr	switch_to_screen_5_CE4D           	| [$f42a: call z,switch_to_screen_5_CE4D]
0:
	rts                                    	| [$f42d: ret]
	
* < A0 points on guard_x_not_moving_timeout_counter_xxxx
* < A1 points on guard_x_not_moving_flag_xxxx
* < A2 points on guard_x_in_elevator_xxxx

check_for_not_moving_timeout_F42E:
	move.b	(A2),d0                    	| [$f42e: ld   a,(ix+$00)]
	cmp.b	#0x01,d0                         	| [$f431: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f433: ret  z] [...]
0:
	* guard not in elevator, check if not moving for a looong time
	move.b	(a0),d0                         	| [$f434: ld   a,(hl)]
	cmp.b	#0xF0,d0                         	| [$f435: cp   $F0]
	bcc.b	0f                               	| [...]
	rts                                    	| [$f437: ret  c] [...]
0:
	* ok, not moving but short time, reset not moving flag
	clr.b	d0                               	| [$f438: xor  a]
	move.b	d0,(a1)                         	| [$f439: ld   (de),a]
	rts                                    	| [$f43a: ret]
	
color_background_tile_F43B:
	move.b	#0x1F,d1                        	| [$f43b: ld   b,$1F]
	jbsr	osd_r_videoram                         	| [$f43d: ld   a,(hl)]
	cmp.b	#0x49,d0                         	| [$f43e: cp   $49]
	jeq	l_f458                             	| [$f440: jr   z,$F458]
	cmp.b	#0x4A,d0                         	| [$f442: cp   $4A]
	jeq	l_f458                             	| [$f444: jr   z,$F458]
	cmp.b	#0x4B,d0                         	| [$f446: cp   $4B]
	jeq	l_f458                             	| [$f448: jr   z,$F458]
	cmp.b	#0x51,d0                         	| [$f44a: cp   $51]
	jeq	l_f461                             	| [$f44c: jr   z,$F461]
	cmp.b	#0x52,d0                         	| [$f44e: cp   $52]
	jeq	l_f461                             	| [$f450: jr   z,$F461]
	cmp.b	#0x57,d0                         	| [$f452: cp   $57]
	jeq	l_f461                             	| [$f454: jr   z,$F461]
	move.b	#0x3F,d1                        	| [$f456: ld   b,$3F]
l_f458:

	move.w	d6,-(sp)                        	| [$f458: push hl]
	add.w	#0x800,d6                    	| [$f459: ld   a,h]
	                     	| [$f45a: add  a,$08]
	                    	| [$f45c: ld   h,a]
	move.b	d1,d0           	| [$f45d: ld   a,b]
	jbsr	osd_w_colorram                         	| [$f45e: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$f45f: pop  hl]
	rts                                    	| [$f460: ret]
l_f461:
	move.b	#0x32,d1                        	| [$f461: ld   b,$32]
	jra	l_f458                             	| [$f463: jr   $F458]

restore_background_tile_F465:
	* D6 contains screen memory, copy to D3
	move.w	d6,d3                           	| [$192f: ld   a,h]
												| [$1930: ld   d,a]
												| [$1931: ld   a,l]
												| [$1932: ld   e,a]
	jbsr	compute_backbuffer_tile_address_F47B                          	| [$1933: call $1945]

	* D3 points to ROM now, copy tile data back to screen
	exg		d3,d6
	bsr		read_rom			| [$1936: ld   a,(de)]
	exg		d3,d6
	                         	
	jbsr	osd_w_videoram                         	| [$1937: ld   (hl),a]
	* loop until write succeeds... no need for this!
												| [$1938: ld   a,(de)]
												| [$1939: cp   (hl)]
											| [$193a: jr   nz,$1936]

	move.w	d6,-(sp)                        	| [$193c: push hl]
	                           	| [$193d: ld   a,h]
	add.w	#0x0800,d6                         	| [$193e: add  a,$08]
	                           	| [$1940: ld   h,a]
	clr.b	d0                               	| [$1941: xor  a]
	jbsr	osd_w_colorram                         	| [$1942: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$1943: pop  hl]
	rts                                    	| [$1944: ret]
	
compute_backbuffer_tile_address_F47B:
	.ifndef	RELEASE
	cmp.w	#0x9000,d3
	bcs.b	0f
	cmp.w	#0x9400,d3
	bcs.b	1f
0:
	jbsr	osd_break
	moveq	#0,d3
	rts
1:
	.endif

	move.b	player_screen_600D,d0           	| [$f47b: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$f47e: cp   $01]
	jne	l_f487                             	| [$f480: jr   nz,$F487]
	                           	| [$f482: ld   a,d]
	sub.w	#0x5000,d3                         	| [$f483: sub  $50]
	                           	| [$f485: ld   d,a]
	rts                                    	| [$f486: ret]
l_f487:
	cmp.b	#0x02,d0                         	| [$f487: cp   $02]
	jne	l_f490                             	| [$f489: jr   nz,$F490]
	                           	| [$f48b: ld   a,d]
	sub.w	#0x4C00,d3                         	| [$f48c: sub  $4C]
	                           	| [$f48e: ld   d,a]
	rts                                    	| [$f48f: ret]
l_f490:
	cmp.b	#0x03,d0                         	| [$f490: cp   $03]
	jne	l_f499                             	| [$f492: jr   nz,$F499]
	                          	| [$f494: ld   a,d]
	sub.w	#0x4800,d3                         	| [$f495: sub  $48]
	                          	| [$f497: ld   d,a]
	rts                                    	| [$f498: ret]
l_f499:
	cmp.b	#0x04,d0                         	| [$f499: cp   $04]
	jne	l_f4a2                             	| [$f49b: jr   nz,$F4A2]
	                           	| [$f49d: ld   a,d]
	sub.w	#0x6000,d3                         	| [$f49e: sub  $60]
	                           	| [$f4a0: ld   d,a]
	rts                                    	| [$f4a1: ret]
l_f4a2:
	                           	| [$f4a2: ld   a,d]
	sub.w	#0x5C00,d3                         	| [$f4a3: sub  $5C]
	                           	| [$f4a5: ld   d,a]
	rts                                    	| [$f4a6: ret]
l_f4a7:
	move.b	bag_falling_6159,d0             	| [$f4a7: ld   a,(bag_falling_6159)]
	cmp.b	#0x01,d0                         	| [$f4aa: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f4ac: ret  z] [...]
0:
	move.b	sprite_object_x_659E,d0         	| [$f4ad: ld   a,(sprite_object_x_659E)]
	cmp.b	#0xE0,d0                         	| [$f4b0: cp   $E0]
	bcs.b	0f                               	| [...]
	rts                                    	| [$f4b2: ret  nc] [...]
0:
	cmp.b	#0x18,d0                         	| [$f4b3: cp   $18]
	bcc.b	0f                               	| [...]
	rts                                    	| [$f4b5: ret  c] [...]
0:
	jbsr	test_pickup_flag_F4E3             	| [$f4b6: call test_pickup_flag_F4E3]
	move.b	d1,d0                           	| [$f4b9: ld   a,b]
	                         	| [$f4ba: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$f4bc: ret  z] [...]
0:	
	lea	object_held_struct_659C,a2     	| [$f4bd: ld   ix,object_held_struct_659C]
	lea	unknown_615A,a3                	| [$f4c1: ld   iy,unknown_615A]
	move.b	player_screen_600D,d0           	| [$f4c5: ld   a,(player_screen_600D)]
	move.b	d0,current_character_screen_index_6098	| [$f4c8: ld   (current_character_screen_index_6098),a]
	jbsr	compute_logical_address_from_xy_EAEF	| [$f4cb: call compute_logical_address_from_xy_EAEF]
    jbsr   osd_enable_vblank_interrupt  | ei
	subq.w	#1,d6                           	| [$f4cf: dec  hl]

	bsr		read_rom                         	| [$f4d0: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$f4d1: push hl]
	jbsr	l_f4f2                            	| [$f4d2: call $F4F2]
	movem.l	(sp)+,a0                        	| [$f4d5: pop  hl]
	beq.b	0f                               	| [...]
	rts                                    	| [$f4d6: ret  nz] [...]
0:
	clr.b	d0                               	| [$f4d7: xor  a]
	move.b	d0,has_bag_6158                 	| [$f4d8: ld   (has_bag_6158),a]
	move.b	d0,player_has_blue_bag_flag_627C	| [$f4db: ld   (player_has_blue_bag_flag_627C),a]
	addq.b	#1,d0                           	| [$f4de: inc  a]
	move.b	d0,bag_falling_6159             	| [$f4df: ld   (bag_falling_6159),a]
	rts                                    	| [$f4e2: ret]

test_pickup_flag_F4E3:
	clr.b	d1                               	| [$f4e3: ld   b,$00]
	tst.b	pickup_flag_6160             	| [$f4e5: ld   a,(pickup_flag_6160)]
	                         	| [$f4e8: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$f4ea: ret  z] [...]
0:
										| [$f4eb: xor  a]
	clr.b	pickup_flag_6160             	| [$f4ec: ld   (pickup_flag_6160),a]
	move.b	#0x01,d1                        	| [$f4ef: ld   b,$01]
	rts                                    	| [$f4f1: ret]
l_f4f2:
	CLEAR_XC_FLAG
	move.w	d3,d4
	LEA_ROM	       0x2384,a0                      	| [$f4f2: ld   hl,$2384]
	                        	| [$f4f5: ld   bc,$0013] 19
	move.w	#0x13,d1                        	| [$f4f5: ld   bc,$0013] 19
	move.w	d0,-(sp)                        	| [$f4f8: push af]
	move.b	is_key_hunt_phase_6341,d0                 	| [$f4f9: ld   a,(is_key_hunt_phase_6341)]
	* was cmp but cmp doesn't set X flag, sub does
	subq.b	#0x01,d0                         	| [$f4fc: cp   $01]
	roxr.b	#1,d4                           	| [$f4fe: rr   e]
	move.w	(sp)+,d0                        	| [$f500: pop  af]
	roxl.b	#1,d4                           	| [$f501: rl   e]
	jcs	l_f508                             	| [$f503: jr   c,$F508]
	                        	| [$f505: ld   bc,$0015] 21
	move.w	#0x15,d1                        	| [$f505: ld   bc,$0015] 21
l_f508:
	jbsr	cpdr                              	| [$f508: cpdr]
	rts                                    	| [$f50a: ret]
 * < $6095:	pointer on direction ($6027/$6067)
 * < d3:	guard screen address
 * < $6098:	guard screen index
 * < a2:	6035 or 6057 guard ladder frame pointer
 * < a3:	guard struct
analyse_guard_direction_change_F50B:
	move.l	a3,-(sp)                        	| [$f50b: push iy]
	jbsr	choose_screen_intersections_table_1918                            	| [$f50d: call $1918]
 * loop to look for branches (ladders, etc)
l_f510:
	LOAD_AX_BE_WORD_DY	a3,d6                    	| [$f510: ld   a,(iy+$00)]
	        	| [$f513: ld   h,a]
	        	| [$f514: ld   a,(iy+$01)]
	        	| [$f517: ld   l,a]
	         	| [$f518: xor  a]
	cmp.w	d3,d6                            	| [$f519: sbc  hl,de] compare guard & intersection position
	jeq	l_f534                             	| [$f51b: jr   z,$F534]
	addq.w	#3,a3                           	| [$f51d: inc  iy] * 3
	            	| [$f523: ld   a,(io_read_shit_B800)]
	* branch (direction change) flag (just test end of path!)
	cmp.b	#0xFF,(0x02,a3)                    	| [$f526: ld   a,(iy+$02)]
	                         	| [$f529: cp   $FF]
	jne	l_f510                             	| [$f52b: jr   nz,$F510]
	                               	| [$f52d: xor  a]
	clr.b	(0x11,a2)                    	| [$f52e: ld   (ix+$11),a]
	move.l	(sp)+,a3                        	| [$f531: pop  iy]
	rts                                    	| [$f533: ret]
	
 * branch found:	what do we decide??
l_f534:
	move.l	a2,-(sp)                        	| [$f534: push ix]
	move.l	a3,unknown_pointer_604B         	| [$f536: ld   (unknown_pointer_604B),iy]
	move.b	current_character_screen_index_6098,d0	| [$f53a: ld   a,(current_character_screen_index_6098)]
	move.b	d0,d1                           	| [$f53d: ld   b,a]
	move.b	player_screen_600D,d0           	| [$f53e: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$f541: cp   b]
	jeq	l_f547                             	| [$f542: jr   z,$F547]
	jbsr	guide_guard_on_hidden_screen_193A 	| [$f544: call guide_guard_on_hidden_screen_193A]
l_f547:
	move.b	#0x08,d1                        	| [$f547: ld   b,$08]
	move.b	(0x11,a2),d0                    	| [$f549: ld   a,(ix+$11)]
	cmp.b	#0x01,d0                         	| [$f54c: cp   $01]
	jeq	l_f644                             	| [$f54e: jp   z,$F644]
l_f551:
	move.b	(0x07,a2),d0                    	| [$f551: ld   a,(ix+$07)]
	                         	| [$f554: cp   $00]
	jne	l_f644                             	| [$f556: jp   nz,$F644]
	addq.w	#1,a2                           	| [$f559: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_f551                             	| [$f55b: djnz $F551]
	move.l	(sp)+,a2                        	| [$f55d: pop  ix]
	clr.b	d0                               	| [$f55f: xor  a]
	move.b	d0,(0x15,a2)                    	| [$f560: ld   (ix+$15),a]
	move.b	player_just_moved_flag_6047,d0  	| [$f563: ld   a,(player_just_moved_flag_6047)]
	                         	| [$f566: cp   $00]
	jeq	l_f595                             	| [$f568: jp   z,$F595]
	move.b	player_x_6582,d0                	| [$f56b: ld   a,(player_x_6582)]
	move.b	d0,d1                           	| [$f56e: ld   b,a]
	move.l	(sp),a3                        	| [$f56f: pop  iy]
	move.b	(0x02,a3),d0                    	| [$f571: ld   a,(iy+$02)]

	                        	| [$f574: push iy]
	cmp.b	d1,d0                            	| [$f576: cp   b]
	                        	| [$f577: push af]
	bcs.b	0f                               	| [...]
	jbsr	guard_goes_left_F649              	| [$f578: call nc,guard_goes_left_F649]
	bra.b	1f                               	| [...]
0:
	                        	| [$f57b: pop  af]
	jbsr	guard_goes_right_F652             	| [$f57c: call c,guard_goes_right_F652]
1:
	move.b	player_y_6583,d0                	| [$f57f: ld   a,(player_y_6583)]
	move.b	d0,d1                           	| [$f582: ld   b,a]
	move.l	(sp)+,a3                        	| [$f583: pop  iy]
	move.b	(0x03,a3),d0                    	| [$f585: ld   a,(iy+$03)]

	move.l	a3,-(sp)                        	| [$f588: push iy]
	cmp.b	d1,d0                            	| [$f58a: cp   b]
	bcc.b	0f                               	| [...]
	jbsr	guard_goes_down_F664              	| [$f58c: call c,guard_goes_down_F664]
	jra	1f                               	| [...]
0:
	jbsr	guard_goes_up_F65B                	| [$f590: call nc,guard_goes_up_F65B]
1:
	jra	l_f5ed                             	| [$f593: jr   $F5ED]
l_f595:
	jbsr  osd_get_random       	| [$f595: ld   a,(interrupt_control_A000)]

	move.l	a0,-(sp)                        	| [$f598: push hl]
	LEA_ROM	       0x2385,a0  	| [$f599: ld   hl,direction_index_table_2385]
	and.b	#0x03,d0                         	| [$f59c: and  $03] random 0 1 2 3
                           	| [$f59e: add  a,l]
                          	| [$f59f: ld   l,a]
                          	| [$f5a0: ld   a,h]

                          	| [$f5a3: ld   h,a]
	            	| [$f5a4: ld   a,(io_read_shit_B800)]
	move.b	(a0,d0.w),d0                         	| [$f5a7: ld   a,(hl)] turns to random 8 4 2 1 thanks to table @2385
	movem.w	d1/d2,-(sp)                    	| [$f5a8: push bc]

	move.l	a2,-(sp)                        	| [$f5a9: push ix]
	move.l	guard_direction_pointer_6095,a2	| [$f5ab: ld   ix,(guard_direction_pointer_6095)]
	* save random chosen direction in d1
	move.b	d0,d1                           	| [$f5af: ld   b,a]  set 8 4 2 1 value to b
	move.b	(A2),d0                    	| [$f5b0: ld   a,(ix+$00)] guard current direction
 * divide by 16 (ror+and => lsr, faster & clearer)
	lsr.b	#4,d0                            	| [$f5b3: rrc  a] * 4
 * shift so guard current direction flag matches the 8 4 2 1 values computed by random
 * now compute the opposite of current direction, check against that
 * because we don't want the guard to reverse direction
												| [$f5bb: and  $0F]
	cmp.b	#0x01,d0                         	| [$f5bd: cp   $01]
	jne	l_f5c5                             	| [$f5bf: jr   nz,$F5C5]
 * direction is "up" (1) => opposite is "down" (2)
	move.b	#0x02,d0                        	| [$f5c1: ld   a,$02]
	jra	l_f5db                             	| [$f5c3: jr   $F5DB]
l_f5c5:
	cmp.b	#0x02,d0                         	| [$f5c5: cp   $02]
	jne	l_f5cd                             	| [$f5c7: jr   nz,$F5CD]
	* direction is "down" => opposite is "up" (1)
	move.b	#0x01,d0                        	| [$f5c9: ld   a,$01]
	jra	l_f5db                             	| [$f5cb: jr   $F5DB]
l_f5cd:
	cmp.b	#0x04,d0                         	| [$f5cd: cp   $04]
	jne	l_f5d5                             	| [$f5cf: jr   nz,$F5D5]
	* direction is "left", opposite is "right"
	move.b	#0x08,d0                        	| [$f5d1: ld   a,$08]
	jra	l_f5db                             	| [$f5d3: jr   $F5DB]
l_f5d5:
	* direction is "right", opposite is "left"
	cmp.b	#0x08,d0                         	| [$f5d5: cp   $08]
	jne	l_f5db                             	| [$f5d7: jr   nz,$F5DB]
	move.b	#0x04,d0                        	| [$f5d9: ld   a,$04]
l_f5db:
	* check if chosen direction is the opposite of the current one
	cmp.b	d1,d0                            	| [$f5db: cp   b]
	jne	l_f5e5                             	| [$f5dc: jr   nz,$F5E5] ok:	 random did not give the opposite
	* opposite direction chosen: invalid: retry
	move.l	(sp)+,a2                        	| [$f5de: pop  ix]

	movem.w	(sp)+,d1/d2                    	| [$f5e0: pop  bc]
	move.l	(sp)+,a0                        	| [$f5e1: pop  hl]
	jra	l_f595                             	| [$f5e2: jp   $F595] retry until random gives something else than the opposite
l_f5e5:
	* chosen direction at random is not the opposite of the current direction
	* but we don't know if this direction is possible
	move.l	(sp)+,a2                        	| [$f5e5: pop  ix]
	move.b	d1,d0                           	| [$f5e7: ld   a,b]

	movem.w	(sp)+,d1/d2                    	| [$f5e8: pop  bc]
	move.l	(sp)+,a0                        	| [$f5e9: pop  hl]
	move.b	d0,(0x15,a2)                    	| [$f5ea: ld   (ix+$15),a]  save a
l_f5ed:
	clr.b	d0                               	| [$f5ed: xor  a]
	move.l	unknown_pointer_604B,a3     	| [$f5ee: ld   iy,(unknown_pointer_604B)]
 	move.b	(0x02,a3),d0                    	| [$f5f2: ld   a,(iy+$02)]
	ror.b	#4,d0                            	| [$f5f5: rrc  a] * 4
	move.b	d0,d1                           	| [$f5fd: ld   b,a]
	move.b	(0x15,a2),d0                    	| [$f5fe: ld   a,(ix+$15)]  restore a
	* check if possible directions are compatible with chosen direction:
	* mask out the incompatible direction
	and.b	d1,d0                            	| [$f601: and  b]
	move.w	guard_logical_address_6091,d6	| [$f604: ld   hl,(guard_logical_address_6091)]
	move.b	d0,stored_logical_address_6044  	| [$f607: ld   (stored_logical_address_6044),a]
	lea	guard_1_struct_6594,a3         	| [$f60a: ld   iy,guard_1_struct_6594]
	move.l	a3,guard_struct_pointer_6093    	| [$f60e: ld   (guard_struct_pointer_6093),iy]
	move.l	guard_direction_pointer_6095,a0	| [$f612: ld   hl,(guard_direction_pointer_6095)] contains guard direction pointer unknown_6027 or unknown_6067
	ror.b	#1,d0                            	| [$f602: rrc  a]
	jcc	l_f61c                             	| [$f615: jr   nc,$F61C]
	jbsr	set_guard_direction_up_F6E8       	| [$f617: call set_guard_direction_up_F6E8]
	jra	l_f63c                             	| [$f61a: jr   $F63C]
l_f61c:
	ror.b	#1,d0                            	| [$f61c: rrc  a]
	jcc	l_f625                             	| [$f61e: jr   nc,$F625]
	jbsr	set_guard_direction_down_F6DE     	| [$f620: call set_guard_direction_down_F6DE]
	jra	l_f63c                             	| [$f623: jr   $F63C]
l_f625:
	ror.b	#1,d0                            	| [$f625: rrc  a]
	jcc	l_f62e                             	| [$f627: jr   nc,$F62E]
	jbsr	set_guard_direction_left_F6C0     	| [$f629: call set_guard_direction_left_F6C0]
	jra	l_f635                             	| [$f62c: jr   $F635]
l_f62e:
	ror.b	#1,d0                            	| [$f62e: rrc  a]
	jcc	l_f63c                             	| [$f630: jr   nc,$F63C]
	jbsr	set_guard_direction_right_F6A2    	| [$f632: call set_guard_direction_right_F6A2]
l_f635:
	move.b	way_clear_flag_600B,d0          	| [$f635: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$f638: cp   $02]
	jne	l_f641                             	| [$f63a: jr   nz,$F641]
l_f63c:
	move.b	#0x01,d0                        	| [$f63c: ld   a,$01]
	move.b	d0,(0x11,a2)                    	| [$f63e: ld   (ix+$11),a]
l_f641:
	move.l	(sp)+,a3                        	| [$f641: pop  iy]
	rts                                    	| [$f643: ret]
l_f644:
	move.l	(sp)+,a2                        	| [$f644: pop  ix]
	move.l	(sp)+,a3                        	| [$f646: pop  iy]
	rts                                    	| [$f648: ret]
	
guard_goes_left_F649:
	move.b	(0x15,a2),d0                    	| [$f649: ld   a,(ix+$15)]
	or.b	#0x04,d0                          	| [$f64c: or   $04]
	move.b	d0,(0x15,a2)                    	| [$f64e: ld   (ix+$15),a]
	rts                                    	| [$f651: ret]
guard_goes_right_F652:
	move.b	(0x15,a2),d0                    	| [$f652: ld   a,(ix+$15)]
	or.b	#0x08,d0                          	| [$f655: or   $08]
	move.b	d0,(0x15,a2)                    	| [$f657: ld   (ix+$15),a]
	rts                                    	| [$f65a: ret]
guard_goes_up_F65B:
	move.b	(0x15,a2),d0                    	| [$f65b: ld   a,(ix+$15)]
	or.b	#0x01,d0                          	| [$f65e: or   $01]
	move.b	d0,(0x15,a2)                    	| [$f660: ld   (ix+$15),a]
	rts                                    	| [$f663: ret]
guard_goes_down_F664:
	move.b	(0x15,a2),d0                    	| [$f664: ld   a,(ix+$15)]
	or.b	#0x02,d0                          	| [$f667: or   $02]
	move.b	d0,(0x15,a2)                    	| [$f669: ld   (ix+$15),a]
	rts                                    	| [$f66c: ret]
l_f66d:
	move.w	guard_1_logical_address_6038,d6	| [$f66d: ld   hl,(guard_1_logical_address_6038)]
	move.w	d6,guard_logical_address_6091   	| [$f670: ld   (guard_logical_address_6091),hl]
	lea	guard_1_struct_6594,a3         	| [$f673: ld   iy,guard_1_struct_6594]
	move.l	a3,guard_struct_pointer_6093    	| [$f677: ld   (guard_struct_pointer_6093),iy]
	lea	guard_1_direction_6027,a0      	| [$f67b: ld   hl,guard_1_direction_6027]
	move.l	a0,guard_direction_pointer_6095 	| [$f67e: ld   (guard_direction_pointer_6095),hl]
	move.b	guard_1_sees_player_right_603C,d0	| [$f681: ld   a,(guard_1_sees_player_right_603C)]
	                         	| [$f684: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	set_guard_direction_right_F6A2    	| [$f686: call nz,set_guard_direction_right_F6A2]
0:
	move.b	guard_1_sees_player_left_603D,d0	| [$f689: ld   a,(guard_1_sees_player_left_603D)]
	                         	| [$f68c: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	set_guard_direction_left_F6C0     	| [$f68e: call nz,set_guard_direction_left_F6C0]
0:
	move.b	guard_1_sees_player_up_603E,d0  	| [$f691: ld   a,(guard_1_sees_player_up_603E)]
	                         	| [$f694: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	set_guard_direction_up_F6E8       	| [$f696: call nz,set_guard_direction_up_F6E8]
0:
	move.b	guard_1_sees_player_down_603F,d0	| [$f699: ld   a,(guard_1_sees_player_down_603F)]
	                         	| [$f69c: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	set_guard_direction_down_F6DE     	| [$f69e: call nz,set_guard_direction_down_F6DE]
0:
	rts                                    	| [$f6a1: ret]
set_guard_direction_right_F6A2:
	move.w	guard_logical_address_6091,d6	| [$f6a2: ld   hl,(guard_logical_address_6091)]
	move.l	a2,-(sp)                        	| [$f6a5: push ix]
	move.l	guard_struct_pointer_6093,a2	| [$f6a7: ld   ix,(guard_struct_pointer_6093)]
	jbsr	character_can_walk_right_0D71     	| [$f6ab: call character_can_walk_right_0D71]
	move.l	(sp)+,a2                        	| [$f6ae: pop  ix]
	move.b	way_clear_flag_600B,d0          	| [$f6b0: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$f6b3: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$f6b5: ret  nz] [...]
0:

	move.l	a0,-(sp)                        	| [$f6b6: push hl]
	move.l	guard_direction_pointer_6095,a0	| [$f6b7: ld   hl,(guard_direction_pointer_6095)]
	clr.b	d0                               	| [$f6ba: xor  a]
	bset.b	#7,d0                           	| [$f6bb: set  7,a]
	move.b	d0,(a0)                         	| [$f6bd: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$f6be: pop  hl]
	rts                                    	| [$f6bf: ret]
set_guard_direction_left_F6C0:
	move.w	guard_logical_address_6091,d6	| [$f6c0: ld   hl,(guard_logical_address_6091)]

	move.l	a2,-(sp)                        	| [$f6c3: push ix]
	move.l	guard_struct_pointer_6093,a2	| [$f6c5: ld   ix,(guard_struct_pointer_6093)]
	jbsr	character_can_walk_left_0DCC      	| [$f6c9: call character_can_walk_left_0DCC]
	move.l	(sp)+,a2                        	| [$f6cc: pop  ix]
	move.b	way_clear_flag_600B,d0          	| [$f6ce: ld   a,(way_clear_flag_600B)]
	cmp.b	#0x02,d0                         	| [$f6d1: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$f6d3: ret  nz] [...]
0:

	move.l	a0,-(sp)                        	| [$f6d4: push hl]
	move.l	guard_direction_pointer_6095,a0	| [$f6d5: ld   hl,(guard_direction_pointer_6095)]
 	clr.b	d0                               	| [$f6d8: xor  a]
	bset.b	#6,d0                           	| [$f6d9: set  6,a]
	move.b	d0,(a0)                         	| [$f6db: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$f6dc: pop  hl]
	rts                                    	| [$f6dd: ret]
set_guard_direction_down_F6DE:
	clr.b	d0                               	| [$f6de: xor  a]

	move.l	a0,-(sp)                        	| [$f6df: push hl]
	* can be 6067 or 6027
	
	move.l	guard_direction_pointer_6095,a0	| [$f6e0: ld   hl,(guard_direction_pointer_6095)]
	bset.b	#5,d0                           	| [$f6e3: set  5,a] set direction to down
	move.b	d0,(a0)                         	| [$f6e5: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$f6e6: pop  hl]
	rts                                    	| [$f6e7: ret]
set_guard_direction_up_F6E8:
	clr.b	d0                               	| [$f6e8: xor  a]

	move.l	a0,-(sp)                        	| [$f6e9: push hl]
	move.l	guard_direction_pointer_6095,a0	| [$f6ea: ld   hl,(guard_direction_pointer_6095)]
	bset.b	#4,d0                           	| [$f6ed: set  4,a]
	move.b	d0,(a0)                         	| [$f6ef: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$f6f0: pop  hl]
	rts                                    	| [$f6f1: ret]
handle_guard_1_views_player_F6F2:
	move.b	player_screen_600D,d0           	| [$f6f2: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$f6f5: ld   b,a]
	move.b	guard_1_screen_6099,d0          	| [$f6f6: ld   a,(guard_1_screen_6099)]
	cmp.b	d1,d0                            	| [$f6f9: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$f6fa: ret  nz] [...]
0:
	lea	guard_1_sees_player_left_603D,a2	| [$f6fb: ld   ix,guard_1_sees_player_left_603D]
	move.w	guard_1_logical_address_6038,d6	| [$f6ff: ld   hl,(guard_1_logical_address_6038)]
 	move.w	#-0x20,d1                        	| [$f702: ld   bc,$FFE0] 65504
	move.b	#0x40,d0                        	| [$f70a: ld   a,$40]
	tst.b	has_pick_61CF                	| [$f705: ld   a,(has_pick_61CF)]
	                         	| [$f708: cp   $00]
	jne	l_f714                             	| [$f70c: jr   nz,$F714]
	lea	guard_1_sees_player_right_603C,a2	| [$f70e: ld   ix,guard_1_sees_player_right_603C]
	move.b	#0x80,d0                        	| [$f712: ld   a,$80]
l_f714:
	exg	d0,d7                              	| [$f714: ex   af,af']

	jbsr	is_way_clear_to_player_F7F5       	| [$f715: call is_way_clear_to_player_F7F5]
	move.w	guard_1_logical_address_6038,d6	| [$f718: ld   hl,(guard_1_logical_address_6038)]
	lea	guard_1_sees_player_right_603C,a2	| [$f71b: ld   ix,guard_1_sees_player_right_603C]
	move.w	#0x0020,d1                        	| [$f71f: ld   bc,$0020] 32
	move.b	#0x80,d0                        	| [$f727: ld   a,$80]
	tst.b	has_pick_61CF                	| [$f722: ld   a,(has_pick_61CF)]
	jne	l_f731                             	| [$f729: jr   nz,$F731]
	lea	guard_1_sees_player_left_603D,a2	| [$f72b: ld   ix,guard_1_sees_player_left_603D]
	move.b	#0x40,d0                        	| [$f72f: ld   a,$40]
l_f731:
	exg	d0,d7                              	| [$f731: ex   af,af']

	jbsr	is_way_clear_to_player_F7F5       	| [$f732: call is_way_clear_to_player_F7F5]
	move.w	guard_1_logical_address_6038,d6	| [$f735: ld   hl,(guard_1_logical_address_6038)]
	move.w	#0xffff,d1                        	| [$f738: ld   bc,$FFFF] 65535
	move.b	#0x10,d0                        	| [$f73b: ld   a,$10]
	exg	d0,d7                              	| [$f73d: ex   af,af']

	lea	guard_1_sees_player_up_603E,a2 	| [$f73e: ld   ix,guard_1_sees_player_up_603E]
	jbsr	is_way_clear_to_player_F7F5       	| [$f742: call is_way_clear_to_player_F7F5]
	move.w	guard_1_logical_address_6038,d6	| [$f745: ld   hl,(guard_1_logical_address_6038)]
 	lea	guard_1_sees_player_down_603F,a2	| [$f748: ld   ix,guard_1_sees_player_down_603F]
	move.w	#0x0001,d1                        	| [$f74c: ld   bc,$0001] 1
	move.b	#0x20,d0                        	| [$f74f: ld   a,$20]
	exg	d0,d7                              	| [$f751: ex   af,af']

	jbsr	is_way_clear_to_player_F7F5       	| [$f752: call is_way_clear_to_player_F7F5]
	rts                                    	| [$f755: ret]
l_f756:
	move.w	guard_2_logical_address_6078,d6	| [$f756: ld   hl,(guard_2_logical_address_6078)]
	move.w	d6,guard_logical_address_6091   	| [$f759: ld   (guard_logical_address_6091),hl]
	lea	guard_2_struct_6598,a3         	| [$f75c: ld   iy,guard_2_struct_6598]
	move.l	a3,guard_struct_pointer_6093    	| [$f760: ld   (guard_struct_pointer_6093),iy]
	lea	guard_2_direction_6067,a0      	| [$f764: ld   hl,guard_2_direction_6067]
	move.l	a0,guard_direction_pointer_6095 	| [$f767: ld   (guard_direction_pointer_6095),hl]
	move.b	guard_2_sees_player_right_607C,d0	| [$f76a: ld   a,(guard_2_sees_player_right_607C)]
	                         	| [$f76d: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	set_guard_direction_right_F6A2    	| [$f76f: call nz,set_guard_direction_right_F6A2]
0:
	move.b	guard_2_sees_player_left_607D,d0	| [$f772: ld   a,(guard_2_sees_player_left_607D)]
	                         	| [$f775: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	set_guard_direction_left_F6C0     	| [$f777: call nz,set_guard_direction_left_F6C0]
0:
	move.b	guard_2_sees_player_up_607E,d0  	| [$f77a: ld   a,(guard_2_sees_player_up_607E)]
	                         	| [$f77d: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	set_guard_direction_up_F6E8       	| [$f77f: call nz,set_guard_direction_up_F6E8]
0:
	move.b	guard_2_sees_player_down_607F,d0	| [$f782: ld   a,(guard_2_sees_player_down_607F)]
	                         	| [$f785: cp   $00]
	beq.b	0f                               	| [...]
	jbsr	set_guard_direction_down_F6DE     	| [$f787: call nz,set_guard_direction_down_F6DE]
0:
	rts                                    	| [$f78a: ret]
handle_guard_2_views_player_F78B:
	move.b	player_screen_600D,d0           	| [$f78b: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$f78e: ld   b,a]
	move.b	guard_2_screen_609A,d0          	| [$f78f: ld   a,(guard_2_screen_609A)]
	cmp.b	d1,d0                            	| [$f792: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$f793: ret  nz] [...]
0:
	lea	guard_2_sees_player_left_607D,a2	| [$f794: ld   ix,guard_2_sees_player_left_607D]
	move.w	guard_2_logical_address_6078,d6	| [$f798: ld   hl,(guard_2_logical_address_6078)]
	move.w	#-0x20,d1                        	| [$f79b: ld   bc,$FFE0] 65504
* if player has pick reverts tests:	 if sees on the right, actually
*  pretend he saw him on the left
	move.b	#0x40,d0                        	| [$f7a3: ld   a,$40]
	tst.b	has_pick_61CF                	| [$f79e: ld   a,(has_pick_61CF)]
	jne	l_f7ad                             	| [$f7a5: jr   nz,$F7AD]
	lea	guard_2_sees_player_right_607C,a2	| [$f7a7: ld   ix,guard_2_sees_player_right_607C]
	move.b	#0x80,d0                        	| [$f7ab: ld   a,$80]
l_f7ad:
	exg	d0,d7                              	| [$f7ad: ex   af,af']

	jbsr	is_way_clear_to_player_F7F5       	| [$f7ae: call is_way_clear_to_player_F7F5]
	move.w	guard_2_logical_address_6078,d6	| [$f7b1: ld   hl,(guard_2_logical_address_6078)]
	move.w	#0x20,d1                        	| [$f7b4: ld   bc,$0020] 32
	lea	guard_2_sees_player_right_607C,a2	| [$f7b7: ld   ix,guard_2_sees_player_right_607C]
* if player has pick reverts tests:	 if sees on the left, actually
*  pretend he saw him on the right
* protection??? reads video memory stores is somewhere
	move.w	d6,-(a7)
	move.w	#0x91B2,d6                       	| [$1cfe: ld   a,($91B2)]
	jbsr	osd_r_videoram
	move.b	d0,unknown_6272                 	| [$1d01: ld   (unknown_6272),a]
	move.w	(a7)+,d6
* protection ends
	move.b	#0x80,d0                        	| [$f7c6: ld   a,$80]
	tst.b	has_pick_61CF                	| [$f7bb: ld   a,(has_pick_61CF)]
	jne	l_f7d0                             	| [$f7c8: jr   nz,$F7D0]
	lea	guard_2_sees_player_left_607D,a2	| [$f7ca: ld   ix,guard_2_sees_player_left_607D]
	move.b	#0x40,d0                        	| [$f7ce: ld   a,$40]
l_f7d0:
	exg	d0,d7                              	| [$f7d0: ex   af,af']

	jbsr	is_way_clear_to_player_F7F5       	| [$f7d1: call is_way_clear_to_player_F7F5]
 * up and down (note that having the pick has no effect on those tests)
	move.w	guard_2_logical_address_6078,d6	| [$f7d4: ld   hl,(guard_2_logical_address_6078)]
	move.w	#-1,d1                        	| [$f7d7: ld   bc,$FFFF] 65535
	move.b	#0x10,d0                        	| [$f7da: ld   a,$10]
	exg	d0,d7                              	| [$f7dc: ex   af,af']

	lea	guard_2_sees_player_up_607E,a2 	| [$f7dd: ld   ix,guard_2_sees_player_up_607E]
	jbsr	is_way_clear_to_player_F7F5       	| [$f7e1: call is_way_clear_to_player_F7F5]
	move.w	guard_2_logical_address_6078,d6	| [$f7e4: ld   hl,(guard_2_logical_address_6078)]
 	lea	guard_2_sees_player_down_607F,a2	| [$f7e7: ld   ix,guard_2_sees_player_down_607F]
	move.w	#0x01,d1                        	| [$f7eb: ld   bc,$0001] 1
	move.b	#0x20,d0                        	| [$f7ee: ld   a,$20]
	exg	d0,d7                              	| [$f7f0: ex   af,af']
	jbsr	is_way_clear_to_player_F7F5       	| [$f7f1: call is_way_clear_to_player_F7F5]
	rts                                    	| [$f7f4: ret]

* test if there's something blocking the view from guard to player
* works for all directions (up,down,left,right)
*
* params:
* d7:	direction value to set if test works ($40:to left, $80:to right, $10:up, $20:down)
* a2: store a or 0 in (ix)
* d6: logical address
* d1: direction increment (1:	down, -1: up, 32: right, -32: left)
is_way_clear_to_player_F7F5:
	subq.w	#2,d6                           	| [$1d33: dec  hl] * 2
l_f7f7:
	clr.b	(a2)                               	| [$f7f7: xor  a]
                  	| [$f7f8: ld   (ix+$00),a]
	add.w	d1,d6					| [adc  hl,bc]
	jbsr		read_rom                         	| [$f7fd: ld   a,(hl)]
	movem.w	d1/d2,-(sp)                    	| [$f7fe: push bc]
	move.b	#0x15,d1                        	| [$f7ff: ld   b,$15]
 * 15 tests
	LEA_ROM	       0x2389,a3                      	| [$f801: ld   iy,$2389]
l_f805:
	cmp.b	(A3)+,d0                     	| [$f805: cp   (iy+$00)]
	jeq	l_f810                             	| [$f808: jr   z,$F810]
					| [$f80a: inc  iy]
 	subq.b	#1,d1                           	| [...]
	jne	l_f805                             	| [$f80c: djnz $F805]
	* there's an obstacle between player and guard: forget it

	movem.w	(sp)+,d1/d2                    	| [$f80e: pop  bc]
	rts                                    	| [$f80f: ret]
l_f810:

	movem.w	(sp)+,d1/d2                    	| [$f810: pop  bc]

	                        	| [$f811: push hl]
	move.w	player_logical_address_6009,d3	| [$f812: ld   de,(player_logical_address_6009)]
	subq.w	#2,d3                           	| [$f816: dec  de] * 2
                               	| [$f818: xor  a]
	cmp.w  d3,d6                            	| [$f819: sbc  hl,de]
	                        	| [$f81b: pop  hl]
	jeq	l_f828                             	| [$f81c: jr   z,$F828]

                       	| [$f81e: push hl]
	addq.w	#1,d3                           	| [$f81f: inc  de]
 	                               	| [$f820: xor  a]
	cmp.w  d3,d6                            	| [$f821: sbc  hl,de]
                       	| [$f823: pop  hl]
	jeq	l_f828                             	| [$f824: jr   z,$F828]
 	jra	l_f7f7                             	| [$f826: jr   $F7F7]
l_f828:
	* way is clear, set way clear direction
	exg	d0,d7                              	| [$f828: ex   af,af']

	move.b	d0,(A2)                    	| [$f829: ld   (ix+$00),a]
	rts                                    	| [$f82c: ret]
l_f82d:
	move.b	player_in_wagon_flag_6029,d0    	| [$f82d: ld   a,(player_in_wagon_flag_6029)]
	cmp.b	#0x01,d0                         	| [$f830: cp   $01]
	jeq	l_f83c                             	| [$f832: jr   z,$F83C]
	move.b	player_death_flag_6025,d0       	| [$f834: ld   a,(player_death_flag_6025)]
	cmp.b	#0x01,d0                         	| [$f837: cp   $01]
	jeq	player_dies_F9E1                   	| [$f839: jp   z,player_dies_F9E1]
l_f83c:
	clr.b	d0                               	| [$f83c: xor  a]
	rts                                    	| [$f83d: ret]
wagon_player_collision_F83E:
	move.b	player_death_flag_6025,d0       	| [$f83e: ld   a,(player_death_flag_6025)]
	cmp.b	#0x01,d0                         	| [$f841: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f843: ret  z] return immediately if player dies [...]
0:
	move.b	player_in_wagon_flag_6029,d0    	| [$f844: ld   a,(player_in_wagon_flag_6029)]
	cmp.b	#0x01,d0                         	| [$f847: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f849: ret  z] [...]
0:
	lea	player_x_6582,a2               	| [$f84a: ld   ix,player_x_6582]
	lea	wagon_data_658A,a3             	| [$f84e: ld   iy,wagon_data_658A]
	lea	unknown_6022,a0                	| [$f852: ld   hl,unknown_6022]
	move.w	#0x0004,d3                      	| [$f855: ld   de,$0004] 4
	move.b	player_gripping_handle_602A,d0  	| [$f858: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$f85b: cp   $01]
	bne.b	0f                               	| [...]
	* don't test collisions if player is holding the handle
	rts                                    	| [$f85d: ret  z] [...]
0:
	jbsr	l_f862                            	| [$f85e: call $F862]
	rts                                    	| [$f861: ret]
l_f862:
	move.b	(0x01,a3),d0                    	| [$f862: ld   a,(iy+$01)]
	subq.b	#0x04,d0                        	| [$f865: sub  $04]
	cmp.b	(0x01,a2),d0                     	| [$f867: cp   (ix+$01)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$f86a: ret  nc] [...]
0:
	move.b	(0x01,a3),d0                    	| [$f86b: ld   a,(iy+$01)]
	add.b	#0x0E,d0                         	| [$f86e: add  a,$0E]
	cmp.b	(0x01,a2),d0                     	| [$f870: cp   (ix+$01)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$f873: ret  c] [...]
0:
	move.b	(A3),d0                    	| [$f874: ld   a,(iy+$00)]
	sub.b	#0x0D,d0                         	| [$f877: sub  $0D]
	move.b	d0,d1                           	| [$f879: ld   b,a]
	addq.b	#0x04,d0                        	| [$f87a: add  a,$04]
	move.b	d0,d2                           	| [$f87c: ld   c,a]
	jbsr	l_f896                            	| [$f87d: call $F896]
	move.b	d0,player_death_flag_6025       	| [$f880: ld   (player_death_flag_6025),a]
	cmp.b	#0x01,d0                         	| [$f883: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f885: ret  z] [...]
0:
	move.b	(A3),d0                    	| [$f886: ld   a,(iy+$00)]
	add.b	#0x0A,d0                         	| [$f889: add  a,$0A]
	move.b	d0,d1                           	| [$f88b: ld   b,a]
	addq.b	#0x04,d0                        	| [$f88c: add  a,$04]
	move.b	d0,d2                           	| [$f88e: ld   c,a]
	jbsr	l_f896                            	| [$f88f: call $F896]
	move.b	d0,player_death_flag_6025       	| [$f892: ld   (player_death_flag_6025),a]
	rts                                    	| [$f895: ret]
l_f896:
	jbsr	is_invincible
	bne.b	l_f8a2
	move.b	(A2),d0                    	| [$f896: ld   a,(ix+$00)]
	cmp.b	d1,d0                            	| [$f899: cp   b]
	jcs	l_f8a2                             	| [$f89a: jr   c,$F8A2]
	cmp.b	d2,d0                            	| [$f89c: cp   c]
	jcc	l_f8a2                             	| [$f89d: jr   nc,$F8A2]
* collision with wagon
	move.b	#0x01,d0                        	| [$f89f: ld   a,$01]
	rts                                    	| [$f8a1: ret]
l_f8a2:
	clr.b	d0                               	| [$f8a2: xor  a]
	rts                                    	| [$f8a3: ret]

* display PLAYER 1
display_player_ids_and_credit_F8A4:
	LEA_ROM	       0x5680,a1                      	| [$f8a4: ld   de,$5680]
	move.w	#0x93A0,d6                      	| [$f8a7: ld   hl,$93A0]
	jbsr	display_localized_text_CA67       	| [$f8aa: call display_localized_text_CA67]
* display PLAYER 1 again
	LEA_ROM	       0x5680,a1                      	| [$f8ad: ld   de,$5680]
	move.w	#0x9120,d6                      	| [$f8b0: ld   hl,$9120]
* display BONUS
	jbsr	display_localized_text_CA67       	| [$f8b3: call display_localized_text_CA67]
	LEA_ROM	       0x5705,a1                      	| [$f8b6: ld   de,$5705]
	move.w	#0x9240,d6                      	| [$f8b9: ld   hl,$9240]
	jbsr	display_localized_text_CA67       	| [$f8bc: call display_localized_text_CA67]
	move.b	#0x02,d0                        	| [$f8bf: ld   a,$02]
	move.w	#0x9040,d6                      	| [$f8c1: ld   hl,$9040]
	move.b	d0,(a0)                         	| [$f8c4: ld   (hl),a]
	LEA_ROM	       0x5689,a1                      	| [$f8c5: ld   de,$5689]
	move.w	#0x919F,d6                      	| [$f8c8: ld   hl,$919F]
	jbsr	display_localized_text_CA67       	| [$f8cb: call display_localized_text_CA67]
* credit digits seems useless: wrong and overwritten
* by the real value read from number_of_credits_6000
	move.b	fake_credit_digit_6004,d0       	| [$f8ce: ld   a,(fake_credit_digit_6004)]
	move.w	#0x909F,d6
	jbsr	osd_w_videoram                       	| [$1e19: ld   ($909F),a]

	move.b	fake_credit_digit_6005,d0       	| [$f8d4: ld   a,(fake_credit_digit_6005)]
	move.w	#0x90BF,d6
	jbsr	osd_w_videoram                       	| [$1e1f: ld   ($90BF),a]

						| [$1e22: call $1E26] converted to fallthrough
						| [$1e25: ret]
put_score_lives_attributes_f8de:
	move.b	#0x02,d0                        	| [$f8de: ld   a,$02]
	move.w	#0x9840,d6                      	| [$f8e0: ld   hl,$9840]
	jbsr	write_attribute_on_line_5605      	| [$f8e3: call write_attribute_on_line_5605]
	move.b	#0x08,d0                        	| [$f8e6: ld   a,$08]
	move.w	#0x985F,d6                      	| [$f8e8: ld   hl,$985F]
	jbsr	write_attribute_on_line_5605      	| [$f8eb: call write_attribute_on_line_5605]
	move.b	#0x05,d0                        	| [$f8ee: ld   a,$05]
	move.w	#0x9841,d6                      	| [$f8f0: ld   hl,$9841]
	jra	write_attribute_on_line_5605      	| [$f8f3: call write_attribute_on_line_5605]
	rts                                    	| [$f8f6: ret]
l_f8f7:
	move.b	fall_height_604D,d0             	| [$f8f7: ld   a,(fall_height_604D)]
	cmp.b	#0x12,d0                         	| [$f8fa: cp   $12]
	jcs	l_f923                             	| [$f8fc: jr   c,$F923]
	jbsr	is_invincible
	jne	l_f923
	move.b	#0x01,d0                        	| [$f8fe: ld   a,$01]
	move.b	d0,fatal_fall_height_reached_604E	| [$f900: ld   (fatal_fall_height_reached_604E),a]
	move.w	player_logical_address_6009,d6	| [$f903: ld   hl,(player_logical_address_6009)]
 	jbsr		read_rom                          	| [$f906: ld   a,(hl)]
	cmp.b	#0xF8,d0                         	| [$f907: cp   $F8]

	move.l	a0,-(sp)                        	| [$f909: push hl]
	LEA_ROM	       0x23A7,a0                      	| [$f90a: ld   hl,$23A7]
	move.w	#0x02,d1                        	| [$f90d: ld   bc,$000A] 10
	jbsr	cpdr                              	| [$f910: cpdr]
	movem.l	(sp)+,a0                        	| [$f912: pop  hl]
	jne	l_f925                             	| [$f913: jr   nz,$F925]
	move.b	player_in_elevator_4_6014,d0                 	| [$f915: ld   a,(player_in_elevator_4_6014)]
	cmp.b	#0x01,d0                         	| [$f918: cp   $01]
	jeq	l_f92d                             	| [$f91a: jr   z,$F92D]
	move.b	player_in_elevator_5_62E5,d0                 	| [$f91c: ld   a,(player_in_elevator_5_62E5)]
	cmp.b	#0x01,d0                         	| [$f91f: cp   $01]
	jeq	l_f92d                             	| [$f921: jr   z,$F92D]
l_f923:
	clr.b	d0                               	| [$f923: xor  a]
	rts                                    	| [$f924: ret]
l_f925:
	move.b	player_y_6583,d0                	| [$f925: ld   a,(player_y_6583)]
	subq.b	#0x02,d0                        	| [$f928: sub  $02]
	move.b	d0,player_y_6583                	| [$f92a: ld   (player_y_6583),a]
l_f92d:
	clr.b	d0                               	| [$f92d: xor  a]
	move.b	d0,unknown_6008                 	| [$f92e: ld   (unknown_6008),a]
	jbsr	player_dies_F9E1                  	| [$f931: call player_dies_F9E1]
	move.b	#0x01,d0                        	| [$f934: ld   a,$01]
	rts                                    	| [$f936: ret]
l_f937:
	move.b	gameplay_allowed_6054,d0        	| [$f937: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$f93a: cp   $01]
	jeq	l_f94a                             	| [$f93c: jr   z,$F94A]
	move.b	number_of_credits_6000,d0       	| [$f93e: ld   a,(number_of_credits_6000)]
	                         	| [$f941: cp   $00]
	jeq	l_f94b                             	| [$f943: jr   z,$F94B]
	move.b	#0x01,d0                        	| [$f945: ld   a,$01]
	move.b	d0,game_locked_6053             	| [$f947: ld   (game_locked_6053),a]
l_f94a:
	rts                                    	| [$f94a: ret]
l_f94b:
	clr.b	d0                               	| [$f94b: ld   a,$00]
	move.b	d0,game_locked_6053             	| [$f94d: ld   (game_locked_6053),a]
	rts                                    	| [$f950: ret]

init_new_game_F951:

*	LEA_ROM	       0x5B60,a0                      	| [$f951: ld   hl,$5B60]
*	move.b	a0,ay_sound_pointer_6140        	| [$f954: ld   (ay_sound_pointer_6140),hl]
*	clr.b	d0                               	| [$f957: xor  a]
*	move.b	d0,ay_sound_start_6142          	| [$f958: ld   (ay_sound_start_6142),a]
*	jbsr	l_d4e7                            	| [$f95b: call $D4E7]
*	jne	l_f96d                             	| [$f95e: jr   nz,$F96D]
	                      	| [$f960: ld   hl,$3B68]
	* play first tune
	move.w	#TUNE1_SND,d0
	jbsr	play_tune
										| [$f963: ld   (ay_sound_pointer_6140),hl]
											| [$f966: xor  a]
										| [$f967: ld   (ay_sound_start_6142),a]
										| [$f96a: ld   (unknown_6348),a]
l_f96d:
	jbsr	osd_disable_display                               	| [$f96d: xor  a]
	                       	| [$f96e: ld   ($A003),a]
	jbsr	display_screen_1_C2C9                 	| [$f971: call display_screen_1_C2C9]
	move.b	#0x01,d0                        	| [$f974: ld   a,$01]
	move.b	d0,wagon_direction_array_6016   	| [$f976: ld   (wagon_direction_array_6016),a]
	jbsr	display_player_ids_and_credit_F8A4	| [$f979: call display_player_ids_and_credit_F8A4]
 * init player coordinates
	move.b	#0x01,d0                        	| [$f97c: ld   a,$01]
	move.b	d0,player_screen_600D           	| [$f97e: ld   (player_screen_600D),a]
	jbsr	osd_enable_display                       	| [$f981: ld   ($A003),a]
         
	move.b	#0x20,d0                        	| [$f984: ld   a,$20]
	lea	player_struct_6580,a0          	| [$f986: ld   hl,player_struct_6580]
	move.b	d0,(a0)+                         	| [$f989: ld   (hl),a]
	                           	| [$f98a: inc  hl]
	move.b	#0x08,d0                        	| [$f98b: ld   a,$08]
	move.b	d0,(a0)+                         	| [$f98d: ld   (hl),a]
                          	| [$f98e: inc  hl]
	move.b	#0x29,d0                        	| [$f98f: ld   a,$29]
	move.b	d0,(a0)+                         	| [$f991: ld   (hl),a]
                           	| [$f992: inc  hl]
	move.b	#0xD8,d0                        	| [$f993: ld   a,$D8]
	move.b	d0,(a0)                         	| [$f995: ld   (hl),a]
	move.b	d0,player_in_wagon_flag_6029    	| [$f996: ld   (player_in_wagon_flag_6029),a]
	move.b	#0x40,d0                        	| [$f999: ld   a,$40]
	move.b	d0,unknown_6165                 	| [$f99b: ld   (unknown_6165),a]
	move.b	#0xC8,d0                        	| [$f99e: ld   a,$C8]
	move.b	d0,unknown_6166                 	| [$f9a0: ld   (unknown_6166),a]
l_f9a3:
	lea	holds_barrow_61C7,a1           	| [$f9a3: ld   de,holds_barrow_61C7]
	lea	table_1BFB,a0                      	| [$f9a6: ld   hl,$1BFB]
	move.w	#0x18,d1                        	| [$f9a9: ld   bc,$0018] 24
	jbsr	ldir                              	| [$f9ac: ldir]
 	move.b	#0x40,d0                        	| [$f9ae: ld   a,$40]
	tst.b	very_easy_flag
	beq.b	0f
	add.b	#0x20,d0
0:
	move.b	d0,time_61E8                    	| [$f9b0: ld   (time_61E8),a]
	move.b	#0x01,d0                        	| [$f9b3: ld   a,$01]
	move.b	d0,extra_life_awarded_6286      	| [$f9b5: ld   (extra_life_awarded_6286),a]
	move.b	d0,unknown_6019                 	| [$f9b8: ld   (unknown_6019),a]
	move.b	#0xB0,d0                        	| [$f9bb: ld   a,$B0]
	move.b	d0,guard_2_x_659A               	| [$f9bd: ld   (guard_2_x_659A),a]
	jbsr	init_bombs_locations_and_other_stuff_dfbf                            	| [$f9c0: call $DFBF]
	move.b	#0x38,d0                        	| [$f9c3: ld   a,$38]
	move.b	d0,unknown_634D                 	| [$f9c5: ld   (unknown_634D),a]
	jbsr	l_d756                            	| [$f9c8: call $D756]
	rts                                    	| [$f9cb: ret]
reset_barrow_position_f9cc:
	move.b	barrow_screen_params_61C4+1,d0                 	| [$f9cc: ld   a,(unknown_61C5)]
                         	| [$f9cf: cp   $00]
	jeq	l_f9d4                             	| [$f9d1: jr   z,$F9D4]
	* reset it once out of ??? (depending on position on screen)	
	rts                                    	| [$f9d3: ret]
l_f9d4:
	move.b	is_key_hunt_phase_6341,d0                 	| [$f9d4: ld   a,(is_key_hunt_phase_6341)]
	cmp.b	#0x01,d0                         	| [$f9d7: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$f9d9: ret  z] [...]
0:
	move.w	#0x92C3,barrow_screen_params_61C4                      	| [$f9da: ld   hl,$92C3]
					    	| [$f9dd: ld   (barrow_screen_params_61C4),hl]
	rts                                    	| [$f9e0: ret]

player_dies_F9E1:
	jbsr	l_d64b                            	| [$f9e1: call $D64B]
	move.b	#0x01,d0                        	| [$f9e4: ld   a,$01]
	move.b	d0,game_locked_6151                 	| [$f9e6: ld   (game_locked_6151),a]
	jbsr	check_remaining_bags_D269         	| [$f9e9: call check_remaining_bags_D269]
	move.b	d2,d0                           	| [$f9ec: ld   a,c]
	cmp.b	#0x01,d0                         	| [$f9ed: cp   $01]
	bne.b	0f                               	| [...]
	* died holding the last bag: level completed
	jbsr	set_bags_coordinates_hard_level_CFBD	| [$f9ef: call z,set_bags_coordinates_hard_level_CFBD]
0:
	move.b	current_player_617C,d0          	| [$f9f2: ld   a,(current_player_617C)]
	move.b	d0,unknown_626C                 	| [$f9f5: ld   (unknown_626C),a]
	move.w	player_logical_address_6009,d6	| [$f9f8: ld   hl,(player_logical_address_6009)]
 	lea	unknown_6008,a3                	| [$f9fb: ld   iy,unknown_6008]
	lea	player_struct_6580,a2          	| [$f9ff: ld   ix,player_struct_6580]
	jbsr	maybe_align_character_y_on_8_c12a                            	| [$fa03: call $C12A]
	move.b	#0x01,d0                        	| [$fa06: ld   a,$01]
	move.b	d0,game_locked_6151             	| [$fa08: ld   (game_locked_6151),a]
	      	| [$fa0b: ld   (interrupt_control_A000),a]
	                      	| [$fa0e: ld   hl,$2779]
	move.w	#0x2779,unknown_6154                 	| [$fa11: ld   (unknown_6154),hl]
	LEA_ROM	       0xD95D,a0                      	| [$fa14: ld   hl,$D95D]
	clr.b	d0                               	| [$fa17: xor  a]
	move.b	d0,wait_flag_6152               	| [$fa18: ld   (wait_flag_6152),a]
    jbsr   osd_enable_vblank_interrupt  | ei
	jbsr	osd_sound_stop
							| [$fa1c: call play_sample_EC84]
	move.b	lives_6056,d0                   	| [$fa1f: ld   a,(lives_6056)]
	                         	| [$fa22: cp   $00]
	jeq	l_fa35                             	| [$fa24: jr   z,$FA35]
	* plays "aie aie aie" sample
	move.w	#PLAYER_KILLED_TALK_SND,d0
	jbsr	start_a_sound                            	| [$1f88: call $2018]
	* plays "player dies" music
	move.w	#PLAYER_KILLED_TUNE_SND,d0
	jbsr	start_a_sound
	jra	l_fa4b                             	| [$fa33: jr   $FA4B]
l_fa35:
*	jbsr	l_d4e7                            	| [$fa35: call $D4E7]
	*jne	l_fa4b                             	| [$fa38: jr   nz,$FA4B]
    	jbsr   osd_disable_vblank_interrupt  | di
	* game over music
	move.w	#GAME_OVER_TUNE_SND,d0
	jbsr		play_tune
	*LEA_ROM	       0x3F60,a0                      	| [$fa3b: ld   hl,$3F60]
	*move.b	a0,ay_sound_pointer_6140        	| [$fa3e: ld   (ay_sound_pointer_6140),hl]
	*clr.b	d0                               	| [$fa41: xor  a]
	*move.b	d0,ay_sound_start_6142          	| [$fa42: ld   (ay_sound_start_6142),a]
	move.b	#0x01,d0                        	| [$fa45: ld   a,$01]
	move.b	d0,unknown_6348                 	| [$fa47: ld   (unknown_6348),a]
    	jbsr   osd_enable_vblank_interrupt  | ei
l_fa4b:
	move.b	wait_flag_6152,d0               	| [$fa4b: ld   a,(wait_flag_6152)]
	cmp.b	#0x01,d0                         	| [$fa4e: cp   $01]
	jne	l_fa4b                             	| [$fa50: jr   nz,$FA4B]
	move.w	#0x60,d0
	jbsr	osd_wait
                     	| [$fa52: ld   hl,$E000]
l_fa55:
                       	| [$fa55: dec  hl]
                         	| [$fa56: ld   a,h]
                        	| [$fa57: cp   $00]
                          	| [$fa59: jr   nz,$FA55]
	move.b	lives_6056,d0                   	| [$fa5b: ld   a,(lives_6056)]
	                       	| [$fa5e: cp   $00]
	jne	l_fa68                             	| [$fa60: jr   nz,$FA68]
	jbsr	write_game_over_ec6c                            	| [$fa62: call $EC6C]
	jbsr	wait_a_while_ec76                            	| [$fa65: call $EC76]

	move.w	#0x140,d0
	jbsr	osd_wait

l_fa68:
	jbsr	start_new_life_FAEA               	| [$fa68: call start_new_life_FAEA]
	lea	object_held_struct_659C,a2     	| [$fa6b: ld   ix,object_held_struct_659C]
	move.b	d0,(A2)                    	| [$fa6f: ld   (ix+$00),a]
	move.b	d0,(0x01,a2)                    	| [$fa72: ld   (ix+$01),a]
	move.b	d0,(0x02,a2)                    	| [$fa75: ld   (ix+$02),a]
	st.b	d0                                	| [$fa78: ld   a,$FF]
	move.b	d0,(0x03,a2)                    	| [$fa7a: ld   (ix+$03),a]
	                               	| [$fa7d: xor  a]
	clr.b	has_bag_6158                 	| [$fa7e: ld   (has_bag_6158),a]
	clr.b	holds_barrow_61C7            	| [$fa81: ld   (holds_barrow_61C7),a]
	clr.b	has_bomb_6311                 	| [$fa84: ld   (has_bomb_6311),a]
	jbsr	init_bombs_locations_and_other_stuff_dfbf                            	| [$fa87: call $DFBF]
	move.b	number_of_players_617D,d0       	| [$fa8a: ld   a,(number_of_players_617D)]
	cmp.b	#0x01,d0                         	| [$fa8d: cp   $01]
	jeq	l_faa5                             	| [$fa8f: jr   z,$FAA5]
	move.b	current_player_617C,d0          	| [$fa91: ld   a,(current_player_617C)]
	addq.b	#0x01,d0                        	| [$fa94: add  a,$01]
	and.b	#0x01,d0                         	| [$fa96: and  $01]
	move.b	d0,current_player_617C          	| [$fa98: ld   (current_player_617C),a]
	move.b	number_of_players_617D,d0       	| [$fa9b: ld   a,(number_of_players_617D)]
	move.b	d0,d1                           	| [$fa9e: ld   b,a]
	cmp.b	#0x02,d0                         	| [$fa9f: cp   $02]
	bne.b	0f                               	| [...]
	move.b	d1,d0                           	| [$faa1: ld   a,b]

	jbsr	l_c427                            	| [$faa2: call z,$C427]
0:
l_faa5:
	move.b	lives_6056,d0                   	| [$faa5: ld   a,(lives_6056)]
	                         	| [$faa8: cp   $00]
	jne	l_fac7                             	| [$faaa: jr   nz,$FAC7]
	move.b	current_player_617C,d0          	| [$faac: ld   a,(current_player_617C)]
	addq.b	#0x01,d0                        	| [$faaf: add  a,$01]
	and.b	#0x01,d0                         	| [$fab1: and  $01]
	move.b	d0,current_player_617C          	| [$fab3: ld   (current_player_617C),a]
	move.b	number_of_players_617D,d0       	| [$fab6: ld   a,(number_of_players_617D)]
	move.b	d0,d1                           	| [$fab9: ld   b,a]
	cmp.b	#0x02,d0                         	| [$faba: cp   $02]
	bne.b	0f                               	| [...]
	move.b	d1,d0                           	| [$fabc: ld   a,b]
	jbsr	l_c427                            	| [$fabd: call z,$C427]
0:
	move.b	lives_6056,d0                   	| [$fac0: ld   a,(lives_6056)]
                         	| [$fac3: cp   $00]
	jeq	l_fb18                             	| [$fac5: jr   z,$FB18]
l_fac7:
	tst.b	infinite_lives_flag
	bne.b	0f
	subq.b	#1,d0                           	| [$fac7: dec  a]
	move.b	d0,lives_6056                   	| [$fac8: ld   (lives_6056),a]
0:
	jbsr	current_player_start_screen_d017                            	| [$facb: call $D017]
	clr.b	d0                               	| [$face: xor  a]
	move.b	d0,unknown_6008                 	| [$facf: ld   (unknown_6008),a]
	move.b	d0,fatal_fall_height_reached_604E	| [$fad2: ld   (fatal_fall_height_reached_604E),a]
	move.b	d0,fall_height_604D             	| [$fad5: ld   (fall_height_604D),a]
	move.b	d0,unknown_608F                 	| [$fad8: ld   (unknown_608F),a]
	move.b	d0,guard_2_in_elevator_6077     	| [$fadb: ld   (guard_2_in_elevator_6077),a]
	move.b	d0,guard_1_in_elevator_6037     	| [$fade: ld   (guard_1_in_elevator_6037),a]
	move.b	d0,unknown_604F                 	| [$fae1: ld   (unknown_604F),a]
	jbsr	init_guard_directions_and_wagons_C314	| [$fae4: call init_guard_directions_and_wagons_C314]
	move.b	#0x01,d0                        	| [$fae7: ld   a,$01]
	rts                                    	| [$fae9: ret]
start_new_life_FAEA:
	lea	unknown_6144,a2                	| [$faea: ld   ix,unknown_6144]
	clr.b	d0                               	| [$faee: ld   a,$00]
	* 6 becomes 8 (32 bit pointer in 6146)
	move.b	#0x08,d1                        	| [$faf0: ld   b,$06]
	jbsr	memset_E585                       	| [$faf2: call memset_E585]
	clr.b	d0                               	| [$faf5: xor  a]
* set everything player-related to 0
	clr.b	wait_flag_6152               	| [$faf6: ld   (wait_flag_6152),a]
	clr.b	game_locked_6151             	| [$faf9: ld   (game_locked_6151),a]
	clr.b	player_death_flag_6025       	| [$fafc: ld   (player_death_flag_6025),a]
	clr.b	player_controls_frozen_6028  	| [$faff: ld   (player_controls_frozen_6028),a]
	clr.b	fatal_fall_height_reached_604E	| [$fb02: ld   (fatal_fall_height_reached_604E),a]
	clr.b	player_in_wagon_flag_6029    	| [$fb05: ld   (player_in_wagon_flag_6029),a]
	clr.b	player_almost_in_elevator_4_6013                 	| [$fb08: ld   (player_almost_in_elevator_4_6013),a]
	clr.b	fall_height_604D             	| [$fb0b: ld   (fall_height_604D),a]
	clr.b	bag_falling_6159             	| [$fb0e: ld   (bag_falling_6159),a]
	clr.b	bag_sliding_615E             	| [$fb11: ld   (bag_sliding_615E),a]
	clr.b	holds_barrow_61C7            	| [$fb14: ld   (holds_barrow_61C7),a]
	rts                                    	| [$fb17: ret]
l_fb18:
	jbsr	write_game_over_ec6c                            	| [$fb18: call $EC6C]
	clr.b	d0                               	| [$fb1b: xor  a]
	move.b	d0,gameplay_allowed_6054        	| [$fb1c: ld   (gameplay_allowed_6054),a]
                  	| [$fb1f: ld   b,$16]

                  	| [$fb21: ld   hl,$3000]

	                          	| [$fb24: dec  hl]
     jbsr   osd_enable_vblank_interrupt  | ei
	move.b	#0x01,d0                        	| [$fb26: ld   a,$01]
	move.b	d0,game_locked_6053             	| [$fb28: ld   (game_locked_6053),a]
	move.b	d0,game_locked_6151                 	| [$fb2b: ld   (game_locked_6151),a]
	move.w	#0x60*2,d0                           | [$2069: ld   b,$0A]
	jbsr	osd_wait
	                          	| [$fb2e: ld   a,h]
	                        	| [$fb2f: cp   $00]
	                            	| [$fb31: jr   nz,$FB24]
	                          	| [...]
                        	| [$fb33: djnz $FB21]
	jbsr	check_if_high_score_beaten_c674                            	| [$fb35: call $C674]
	clr.b	d0                               	| [$fb38: xor  a]
	move.b	d0,must_play_music_6210         	| [$fb39: ld   (must_play_music_6210),a]
	move.b	d0,current_player_617C          	| [$fb3c: ld   (current_player_617C),a]
	move.b	number_of_credits_6000,d0       	| [$fb3f: ld   a,(number_of_credits_6000)]
	                         	| [$fb42: cp   $00]
	jne	l_fb7b                             	| [$fb44: jr   nz,$FB7B]
	jbsr	prepare_cleared_screen_FB98       	| [$fb46: call prepare_cleared_screen_FB98]
	* "INSERT COIN"
	LEA_ROM	       0x56AC,a1                      	| [$fb49: ld   de,$56AC]
	move.w	#0x935A,d6                      	| [$fb4c: ld   hl,$935A]
	jbsr	display_localized_text_CA67       	| [$fb4f: call display_localized_text_CA67]
	* "BY VALADON AUTOMATION 1982"
	LEA_ROM	       0x2353,a1                      	| [$fb52: ld   de,$2353]
	move.w	#0x93B5,d6                      	| [$fb55: ld   hl,$93B5]
	jbsr	display_text_55d9                            	| [$fb58: call $55D9]
	move.b	#0x0E,d0                        	| [$fb5b: ld   a,$0E]
	move.w	#0x989A,d6                      	| [$fb5d: ld   hl,$989A]
	jbsr	write_attribute_on_line_5605      	| [$fb60: call write_attribute_on_line_5605]
	move.b	#0x03,d0                        	| [$fb63: ld   a,$03]
	move.w	#0x9855,d6                      	| [$fb65: ld   hl,$9855]
	jbsr	write_attribute_on_line_5605      	| [$fb68: call write_attribute_on_line_5605]
	move.b	#0x11,d0                        	| [$fb6b: ld   a,$11]
	move.w	#0x9BB5,d6                       	| [$fb6d: ld   ($9BB5),a]
	jbsr	osd_w_colorram
	jbsr	draw_highscore_names_and_scores_c8fb                            	| [$fb70: call $C8FB]
                        	| [$fb73: ld   a,$01]
	       	| [$fb75: ld   (interrupt_control_A000),a]
	* wait to show highscores
	* and in the meantime check for insert coin
	*
	* in bagman this wasn't done that way, it's better now

	jbsr	wait_and_check_credits_c5d5                            	| [$fb78: call $C5D5]
l_fb7b:
    jbsr   osd_disable_vblank_interrupt  | di
	jbsr	set_bags_coordinates_easy_level_CFDB	| [$fb7c: call set_bags_coordinates_easy_level_CFDB]
	jbsr	set_bags_coordinates_player_2_CFE7         	| [$fb7f: call set_bags_coordinates_player_2_CFE7]
	jbsr	l_c41a                            	| [$fb82: call $C41A]
                               	| [$fb85: xor  a]
	clr.b	game_locked_6053             	| [$fb86: ld   (game_locked_6053),a]
	clr.b	game_locked_6151                 	| [$fb89: ld   (game_locked_6151),a]
	move.b	number_of_credits_6000,d0       	| [$fb8c: ld   a,(number_of_credits_6000)]
	                         	| [$fb8f: cp   $00]
	bne.b	0f                               	| [...]
	jbsr	play_intro_1218                   	| [$fb91: call z,play_intro_1218]
0:
    jbsr   osd_enable_vblank_interrupt  | ei
	move.b	#0x01,d0                        	| [$fb95: ld   a,$01]
	rts                                    	| [$fb97: ret]

prepare_cleared_screen_FB98:
	jbsr	osd_disable_display                              	| [$fb98: ld   a,$00]
	                      	| [$fb9a: ld   ($A003),a]
 	jbsr	clear_screen_C3B7                 	| [$fb9d: call clear_screen_C3B7]
	move.b	#0x30,d0                        	| [$fba0: ld   a,$30]
	jbsr	change_attribute_everywhere_C3A3  	| [$fba2: call change_attribute_everywhere_C3A3]
	move.b	#0x01,d1                        	| [$fba5: ld   b,$01]
	lea	player_struct_6580,a0          	| [$fba7: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$fbaa: ld   a,$00]
	jbsr	l_c3a8                            	| [$fbac: call $C3A8]
	jbsr	display_player_ids_and_credit_F8A4	| [$fbaf: call display_player_ids_and_credit_F8A4]
	jbsr	osd_enable_display                        	| [$fbb2: ld   a,$01]
	                       	| [$fbb4: ld   ($A003),a]
 	rts                                    	| [$fbb7: ret]
choose_guard_random_direction_FBB8:
	jbsr  osd_get_random       	| [$fbb8: ld   a,(interrupt_control_A000)]
	lea		direction_table_5970(pc),a0                      	| [$fbbb: ld   hl,$5970]
	and.b	#0x03,d0                         	| [$fbbe: and  $03]
	                            	| [$fbc0: add  a,l]
	                           	| [$fbc1: ld   l,a]
	                          	| [$fbc2: ld   a,h]

	                          	| [$fbc5: ld   h,a]
	move.b	(a0,d0.w),d0                         	| [$fbc6: ld   a,(hl)]
	move.l	guard_direction_pointer_6095,a0	| [$fbc7: ld   hl,(guard_direction_pointer_6095)]
	move.b	d0,(a0)                         	| [$fbca: ld   (hl),a]
	rts                                    	| [$fbcb: ret]

* check if we can pick objects up (not for bags!)
check_object_pickup_FBCC:
	* can't pickup an object when bag is falling or sliding
	move.b	bag_falling_6159,d0             	| [$fbcc: ld   a,(bag_falling_6159)]
	cmp.b	#0x01,d0                         	| [$fbcf: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$fbd1: ret  z] [...]
0:
	move.b	bag_sliding_615E,d0             	| [$fbd2: ld   a,(bag_sliding_615E)]
	cmp.b	#0x01,d0                         	| [$fbd5: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$fbd7: ret  z] [...]
0:
	* also can't pick if already has object in hand
	* rather release it

	move.b	(a4),d0                         	| [$fbd8: ld   a,(bc)]
	jbsr	exx                               	| [$fbd9: exx]
 
	tst.b	d0                          	| [$fbda: cp   $00]
	jne	l_fc3c                             	| [$fbdc: jp   nz,$FC3C]
	* player doesn't hold anything, no bag is moving
	* check address of player
	move.w	player_logical_address_6009,d6	| [$fbdf: ld   hl,(player_logical_address_6009)]
	* same screen as barrow or bag or whatever object passed
	move.b	player_screen_600D,d0           	| [$fbe2: ld   a,(player_screen_600D)]
	cmp.b	(0x02,a3),d0                     	| [$fbe5: cp   (iy+$02)]
	beq.b	0f                               	| [...]
	rts                                    	| [$fbe8: ret  nz] [...]
0:
	LOAD_AX_BE_WORD_DY	a3,d3
	                   	| [$fbe9: ld   d,(iy+$01)]
	                   	| [$fbec: ld   e,(iy+$00)]
	tst.w	d3
	bne.b	1f
	* jotd: d3 is sometimes 0, I don't want to compute screen address from
	* logical address 0 since it's bound to fail (and the routine has a sanity
	* check to detect potential bugs)
	rts
1:
	movem.w	d3,-(sp)                    	| [$fbef: push de]
	addq.w	#2,d3                           	| [$fbf0: inc  de] * 2
	jbsr	compute_backbuffer_tile_address_F47B	| [$fbf2: call compute_backbuffer_tile_address_F47B]

	                       	| [$fbf5: push hl]
	                              	| [$fbf6: xor  a]
	cmp.w	d3,d6                            	| [$fbf7: sbc  hl,de]
                       	| [$fbf9: pop  hl]
	jeq	l_fc03                             	| [$fbfa: jr   z,$FC03]
 	jbsr	compare_d3_d6_20_offset_d00b                            	| [$fbfc: call $D00B]
	jeq	l_fc03                             	| [$fbff: jr   z,$FC03]
	movem.w	(sp)+,d3                    	| [$fc01: pop  de]
	rts                                    	| [$fc02: ret]
l_fc03:
	movem.w	(sp)+,d3                    	| [$fc03: pop  de]
	* we reach here when an object is pickable (pickaxe)
	jbsr	test_pickup_flag_F4E3             	| [$fc04: call test_pickup_flag_F4E3]
	tst.b	d1                          	| [$fc07: ld   a,b]
	                         	| [$fc08: cp   $00]
	bne.b	pick_up_object_FC0B                               	| [...]
	rts                                    	| [$fc0a: ret  z] [...]

pick_up_object_FC0B:
	move.w	d3,d6		| screen address of object
	                           	| [$fc0b: ld   h,d]
	                           	| [$fc0c: ld   l,e]
	move.w	d6,picked_up_object_screen_address_61F6	| [$fc0d: ld   (picked_up_object_screen_address_61F6),hl]
	clr.b	d0                               	| [$fc10: xor  a]
	move.b	d0,unknown_627E                 	| [$fc11: ld   (unknown_627E),a]
	lea	player_struct_6580,a2          	| [$fc14: ld   ix,player_struct_6580]
	move.b	(0x04,a3),d0                    	| [$fc18: ld   a,(iy+$04)]
	move.b	d0,object_held_struct_659C                    	| [$fc1b: ld   (ix+$1c),a]
	move.b	(0x05,a3),d0                    	| [$fc1e: ld   a,(iy+$05)]
	move.b	d0,object_held_color_attrs_659D                    	| [$fc21: ld   (ix+$1d),a]
	                               	| [$fc24: xor  a]
	* zero out object address: no longer drawn in the scenery, player has it
	clr.b	(A3)                    	| [$fc25: ld   (iy+$00),a]
	clr.b	(0x01,a3)                    	| [$fc28: ld   (iy+$01),a]
	move.b	(0x04,a3),d0                    	| [$fc2b: ld   a,(iy+$04)]
	cmp.b	#0x37,d0                         	| [$fc2e: cp   $37]
	jne	l_fc37                             	| [$fc30: jr   nz,$FC37]
	* we just picked up pickaxe
* resets the LSB of pickaxe timer
* which means that if timer gets past 0x100 once during a life
* or until a pick is lost (not dropped)
* it's not reset (all picks will now only last half the time
* until a life is lost or the pick "times out"!)
*
* not sure if it's a bug or on purpose...
	move.b	#0x01,d0                        	| [$fc32: ld   a,$01]
	* we need to change offset as this counter is now big endian
	move.b	d0,(0x14+1,a3)                    	| [$fc34: ld   (iy+$14),a]
l_fc37:
	move.b	#0x01,d0                        	| [$fc37: ld   a,$01]
	jbsr	exx                               	| [$fc39: exx]
	* pick up object (pick up pickaxe or pick up barrow)
	* sets object picked up flag to true (barrow or pick)

 	move.b	d0,(a4)                         	| [$fc3a: ld   (bc),a]
	rts                                    	| [$fc3b: ret]
l_fc3c:
	tst.b	(A3)                    	| [$fc3c: ld   a,(iy+$00)]
	                         	| [$fc3f: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$fc41: ret  nz] [...]
0:
	move.b	player_x_6582,d0                	| [$fc42: ld   a,(player_x_6582)]
	cmp.b	#0xD0,d0                         	| [$fc45: cp   $D0]
	bcs.b	0f                               	| [...]
	rts                                    	| [$fc47: ret  nc] [...]
0:
	move.b	unknown_633A,d0                 	| [$fc48: ld   a,(unknown_633A)]
	cmp.b	#0x01,d0                         	| [$fc4b: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$fc4d: ret  z] [...]
0:
	jbsr	test_pickup_flag_F4E3             	| [$fc4e: call test_pickup_flag_F4E3]
	move.b	d1,d0                           	| [$fc51: ld   a,b]
	                         	| [$fc52: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$fc54: ret  z] [...]
0:

drop_object_FC55:
	lea	object_held_struct_659C,a2     	| [$fc55: ld   ix,object_held_struct_659C]
	move.b	player_screen_600D,d0           	| [$fc59: ld   a,(player_screen_600D)]
	move.b	d0,current_character_screen_index_6098	| [$fc5c: ld   (current_character_screen_index_6098),a]
	jbsr	compute_logical_address_from_xy_EAEF	| [$fc5f: call compute_logical_address_from_xy_EAEF]
	move.b	has_bomb_6311,d0                 	| [$fc62: ld   a,(has_bomb_6311)]
	cmp.b	#0x01,d0                         	| [$fc65: cp   $01]
	jeq	l_fce7                             	| [$fc67: jp   z,$FCE7]

	movem.w	d5/d6,-(sp)                        	| [$fc6a: push hl]
	move.b	player_screen_600D,d0           	| [$fc6b: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$fc6e: ld   (iy+$02),a]
	jbsr	convert_logical_to_screen_address_E55E	| [$fc71: call convert_logical_to_screen_address_E55E]
	                           	| [$fc74: ld   h,a]
	                               	| [$fc75: xor  a]
	                           	| [$fc76: ld   a,l]
	sub.w	#0x22,d6                         	| [$fc77: sub  $22]
	                          	| [$fc79: ld   l,a]
	                          	| [$fc7a: ld   a,h]
	                      	| [$fc7b: sbc  a,$00]
                            	| [$fc7d: ld   h,a]
	* save screen address where object is going to be dropped
	STORE_DX_BE_WORD_AY	d6,a3
	                    	| [$fc7e: ld   (iy+$00),l]
                   	| [$fc81: ld   (iy+$01),h]
	* as well as screen
	move.b	player_screen_600D,d0           	| [$fc84: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$fc87: ld   (iy+$02),a]
	movem.w	d1/d2,-(sp)                    	| [$fc8a: push bc]
	jbsr	test_non_blocking_tiles_D36C      	| [$fc8b: call test_non_blocking_tiles_D36C]
	move.b	d1,d0                           	| [$fc8e: ld   a,b]

	movem.w	(sp)+,d1/d2                    	| [$fc8f: pop  bc]
											| [$fc90: cp   $00]
	jeq	l_d3a7                             	| [$fc92: jp   z,$D3A7]
	movem.w	(sp),d5/d6                         	| [$fc95: pop  hl]
	jbsr	read_rom                          	| [$fc96: ld   a,(hl)]

	                        	| [$fc99: push hl]
	cmp.b	#0xE0,d0                         	| [$fc97: cp   $E0]
	jeq	l_d3a7                             	| [$fc9a: jp   z,$D3A7]
	movem.w	(sp)+,d5/d6                        	| [$fc9d: pop  hl]
* useless code: pushes hl to sub $20 to it then pops it
* without using the computing value


										| [$fca7: pop  hl]
* hl is the same here as in 21F3 so test cannot be true, ever
* I'm disabling this
*	jbsr	read_rom                         	| [$2205: ld   a,(hl)]
*	cmp.b	#0xE0,d0                         	| [$2206: cp   $E0]
*	bne.b	0f
*	rts                                    	| [$2208: ret  z]
*0:
	jbsr	exx                               	| [$fcac: exx]
 	move.b	holds_barrow_61C7,d0            	| [$fcad: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$fcb0: cp   $01]
	jne	l_fcb9                             	| [$fcb2: jr   nz,$FCB9]
	move.b	#0x28,d0                        	| [$fcb4: ld   a,$28]
	exg	d0,d7                              	| [$fcb6: ex   af,af']

	jra	l_fcd3                             	| [$fcb7: jr   $FCD3]
* compute attribute color in D7 for draw_object_tiles_3417
* either pick or barrow or ...
l_fcb9:
	move.b	#0x20,d0                        	| [$fcb9: ld   a,$20]
	exg	d0,d7                              	| [$fcbb: ex   af,af']

	move.b	has_pick_61CF,d0                	| [$fcbc: ld   a,(has_pick_61CF)]
	cmp.b	#0x01,d0                         	| [$fcbf: cp   $01]
	jeq	l_fcd3                             	| [$fcc1: jr   z,$FCD3]
l_fcc3:
	* has to be bomb
	clr.b	d0                               	| [$fcc3: xor  a]
	move.b	d0,(A3)                    	| [$fcc4: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$fcc7: ld   (iy+$01),a]
	clr.b	d0                               	| [$fcca: xor  a]
	jbsr	exx                               	| [$fccb: exx]
	move.b	d0,(a4)                         	| [$fccc: ld   (bc),a]
	move.b	#0x01,d0                        	| [$fccd: ld   a,$01]
	move.b	d0,bomb_just_dropped_6334                 	| [$fccf: ld   (bomb_just_dropped_6334),a]
	rts                                    	| [$fcd2: ret]
l_fcd3:
	* mark as object released
	                               	| [$fcd3: xor  a]
	clr.b	(a4)                         	| [$fcd4: ld   (bc),a]
	LOAD_AX_BE_WORD_DY	a3,d6
	              	| [$fcd5: ld   l,(iy+$00)]
	                   	| [$fcd8: ld   h,(iy+$01)]
	move.b	(0x06,a3),d0                    	| [$fcdb: ld   a,(iy+$06)]
	* object is dropped: draw object as tiles again
	jbsr	draw_object_tiles_CE7C            	| [$fcde: call draw_object_tiles_CE7C]
	                                	| [$fce1: ld   a,$FF]
	st.b	sprite_object_y_659F         	| [$fce3: ld   (sprite_object_y_659F),a]
	rts                                    	| [$fce6: ret]
l_fce7:
	subq.w	#1,d6                           	| [$fce7: dec  hl]
	movem.w	d1/d2,-(sp)                    	| [$fce8: push bc]
	jbsr		read_rom                         	| [$fce9: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$fcea: push hl]
	jbsr	l_f4f2                            	| [$fceb: call $F4F2]
	movem.l	(sp)+,a0                        	| [$fcee: pop  hl]

	movem.w	(sp)+,d1/d2                    	| [$fcef: pop  bc]
	beq.b	0f                               	| [...]
	rts                                    	| [$fcf0: ret  nz] [...]
0:
	jra	l_fcc3                             	| [$fcf1: jp   $FCC3]

l_fcf4:
	lea	unknown_6156,a3                	| [$fcf4: ld   iy,unknown_6156]
	move.b	(A3),d0                    	| [$fcf8: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$fcfb: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$fcfd: ret  z] [...]
0:
	move.b	guard_1_screen_6099,d0          	| [$fcfe: ld   a,(guard_1_screen_6099)]
	move.b	d0,current_character_screen_index_6098	| [$fd01: ld   (current_character_screen_index_6098),a]

	move.l	a2,-(sp)                        	| [$fd04: push ix]
	move.w	#0x500,d6                      	| [$fd06: ld   hl,$0500]
	jbsr	add_to_score_5C90                 	| [$fd09: call add_to_score_5C90]
	move.w	#GUARD_KILLED_SND,d0            | [$fd0c: ld   hl,$D96F]
	jbsr	start_a_sound                       | [$fd0f: call play_sample_EC84]
                     	
	                 	
	move.l	(sp)+,a2                        	| [$fd12: pop  ix]
	lea	unknown_604F,a2                	| [$fd14: ld   ix,unknown_604F]
	jbsr	l_d4a9                            	| [$fd18: call $D4A9]
	clr.b	d0                               	| [$fd1b: xor  a]
	move.b	d0,guard_1_not_moving_timeout_counter_6057	| [$fd1c: ld   (guard_1_not_moving_timeout_counter_6057),a]
	move.b	#0x21,d0                        	| [$fd1f: ld   a,$21]
	move.b	d0,guard_1_struct_6594          	| [$fd21: ld   (guard_1_struct_6594),a]
	move.w	guard_1_logical_address_6038,d6	| [$fd24: ld   hl,(guard_1_logical_address_6038)]
	lea	guard_1_in_elevator_6037,a3    	| [$fd27: ld   iy,guard_1_in_elevator_6037]
	lea	guard_1_struct_6594,a2         	| [$fd2b: ld   ix,guard_1_struct_6594]
	jbsr	maybe_align_character_y_on_8_c12a                            	| [$fd2f: call $C12A]
	rts                                    	| [$fd32: ret]
l_fd33:
	lea	unknown_6157,a3                	| [$fd33: ld   iy,unknown_6157]
	move.b	(A3),d0                    	| [$fd37: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$fd3a: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$fd3c: ret  z] [...]
0:
	move.b	guard_2_screen_609A,d0          	| [$fd3d: ld   a,(guard_2_screen_609A)]
	move.b	d0,current_character_screen_index_6098	| [$fd40: ld   (current_character_screen_index_6098),a]

	move.l	a2,-(sp)                        	| [$fd43: push ix]
	move.w	#0x500,d6                      	| [$fd45: ld   hl,$0500]
	jbsr	add_to_score_5C90                 	| [$fd48: call add_to_score_5C90]
	move.w	#GUARD_KILLED_SND,d0                      	| [$fd4b: ld   hl,$D96F]
	jbsr	start_a_sound                  	| [$fd4e: call play_sample_EC84]
	move.l	(sp)+,a2                        	| [$fd51: pop  ix]
	lea	unknown_608F,a2                	| [$fd53: ld   ix,unknown_608F]
	jbsr	l_d4a9                            	| [$fd57: call $D4A9]
	clr.b	d0                               	| [$fd5a: xor  a]
	move.b	d0,guard_2_not_moving_timeout_counter_6097	| [$fd5b: ld   (guard_2_not_moving_timeout_counter_6097),a]
	move.b	#0x21,d0                        	| [$fd5e: ld   a,$21]
	move.b	d0,guard_2_struct_6598          	| [$fd60: ld   (guard_2_struct_6598),a]
	move.w	guard_2_logical_address_6078,d6	| [$fd63: ld   hl,(guard_2_logical_address_6078)]
	lea	guard_2_in_elevator_6077,a3    	| [$fd66: ld   iy,guard_2_in_elevator_6077]
	lea	guard_2_struct_6598,a2         	| [$fd6a: ld   ix,guard_2_struct_6598]
	jbsr	maybe_align_character_y_on_8_c12a                            	| [$fd6e: call $C12A]
	rts                                    	| [$fd71: ret]
draw_object_tiles_FD72:
	lea	bags_coordinates_609C,a2       	| [$fd72: ld   ix,bags_coordinates_609C]
	move.b	#0x04,d0                        	| [$fd76: ld   a,$04]
	move.b	d0,bag_color_color_attribute_627A	| [$fd78: ld   (bag_color_color_attribute_627A),a]
	move.b	#0x13,d1                        	| [$fd7b: ld   b,$13]
l_fd7d:

	move.l	a2,-(sp)                        	| [$fd7d: push ix]
	movem.w	d1/d2,-(sp)                    	| [$fd7f: push bc]
	jbsr	draw_bag_cac1                            	| [$fd80: call $CAC1]

	movem.w	(sp)+,d1/d2                    	| [$fd83: pop  bc]
	move.l	(sp)+,a2                        	| [$fd84: pop  ix]
	addq.w	#3,a2                           	| [$fd86: inc  ix] * 3
	move.b	#0x01,d0                        	| [$fd8c: ld   a,$01]
	move.b	d0,bag_color_color_attribute_627A	| [$fd8e: ld   (bag_color_color_attribute_627A),a]
	subq.b	#1,d1                           	| [...]
	jne	l_fd7d                             	| [$fd91: djnz $FD7D]
	move.b	holds_barrow_61C7,d0            	| [$fd93: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$fd96: cp   $01]
	jeq	l_fdb6                             	| [$fd98: jr   z,$FDB6]
	move.b	player_screen_600D,d0           	| [$fd9a: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$fd9d: ld   b,a]
	lea	barrow_screen_params_61C4,a3   	| [$fd9e: ld   iy,barrow_screen_params_61C4]
	move.b	(0x02,a3),d0                    	| [$fda2: ld   a,(iy+$02)]
	cmp.b	d1,d0                            	| [$fda5: cp   b]
	jne	l_fdb6                             	| [$fda6: jr   nz,$FDB6]
	* draw barrow, as player doesn't hold it, and on current screen
	LOAD_AX_BE_WORD_DY	a3,d6		| [$2315: ld   h,(iy+$01)]

	move.b	#0x28,d0                        	| [$fdae: ld   a,$28]
	exg	d0,d7                              	| [$fdb0: ex   af,af']
        
	move.b	#0xEC,d0                        	| [$fdb1: ld   a,$EC]
	jbsr	draw_object_tiles_CE7C            	| [$fdb3: call draw_object_tiles_CE7C]
l_fdb6:
	move.b	player_screen_600D,d0           	| [$fdb6: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$fdb9: ld   b,a]
	lea	current_pickaxe_screen_params_61CC,a3	| [$fdba: ld   iy,current_pickaxe_screen_params_61CC]
	move.b	(0x02,a3),d0                    	| [$fdbe: ld   a,(iy+$02)]
	cmp.b	d1,d0                            	| [$fdc1: cp   b]
	jne	l_fde6                             	| [$fdc2: jr   nz,$FDE6]
	LOAD_AX_BE_WORD_DY	a3,d6                    	| [$fdc4: ld   l,(iy+$00)]
	* jotd: added this test because when one pickaxe is taken,
	* current_pickaxe_screen_params_61CC can be 0 and next videoram read
	* reads in zero (also in the original game)
	tst.w	d6
	jeq		l_fde6
	                    	| [$fdc7: ld   h,(iy+$01)]
	jbsr	osd_r_videoram                         	| [$fdca: ld   a,(hl)]
	jbsr	is_background_tile_for_object_drop_CFF3	| [$fdcb: call is_background_tile_for_object_drop_CFF3]
	jne	l_fde6                             	| [$fdce: jr   nz,$FDE6]

	                        	| [$233a: push hl]
	move.w	d6,-(sp)                    	| [$233b: push de]

                      	| [$fdd2: ld   de,$0020] 32
	add.w	#0x20,d6                            	| [$fdd5: add  hl,de]

	jbsr	osd_r_videoram                         	| [$fdd6: ld   a,(hl)]
	jbsr	is_background_tile_for_object_drop_CFF3	| [$fdd7: call is_background_tile_for_object_drop_CFF3]
	                        	| [$fdda: pop  de]
	                    	| [$fdda: pop  de]
	movem.w	(sp)+,d6                        	| [$fddb: pop  hl]
	jne	l_fde6                             	| [$fddc: jr   nz,$FDE6]
	move.b	#0x20,d0                        	| [$fdde: ld   a,$20]
	exg	d0,d7                              	| [$fde0: ex   af,af']
        * pickaxe
	move.b	#0xE4,d0                        	| [$fde1: ld   a,$E4]
	jbsr	draw_object_tiles_CE7C            	| [$fde3: call draw_object_tiles_CE7C]
l_fde6:
	move.b	#0x04,d1                        	| [$fde6: ld   b,$04]
	lea	struct_swap_buffer_61D3,a3     	| [$fde8: ld   iy,struct_swap_buffer_61D3]
	lea	current_pickaxe_screen_params_61CC,a1	| [$fdec: ld   de,current_pickaxe_screen_params_61CC]
l_fdef:
	movem.w	d1/d2,-(sp)                    	| [$fdef: push bc]

	move.l	a3,-(sp)                        	| [$fdf0: push iy]
	move.l	a1,-(sp)                        	| [$fdf2: push de]
	jbsr	swap_3_bytes_pickaxe_params_DBC2                 	| [$fdf3: call swap_3_bytes_pickaxe_params_DBC2]
	* decode screen address (now big endian, we changed the ROM source)
	LOAD_AX_BE_WORD_DY	a1,d6
	                         	| [$fdf6: ld   a,(de)]
                           	| [$fdf7: ld   l,a]
                           	| [$fdf8: inc  de]
                         	| [$fdf9: ld   a,(de)]
                           	| [$fdfa: ld   h,a]
                           	| [$fdfb: dec  de]
	move.b	player_screen_600D,d0           	| [$fdfc: ld   a,(player_screen_600D)]
	move.l	(sp)+,a3                        	| [$fdff: pop  iy]
	cmp.b	(0x02,a3),d0                     	| [$fe01: cp   (iy+$02)]

	move.l	a3,-(sp)                        	| [$fe04: push iy]
	jne	l_fe24                             	| [$fe06: jr   nz,$FE24]
* read screen tile, with test against 00 on D6 to avoid issues
* (original game reads in 0 at some point)
	tst.w	d6
	jeq	l_fe63
	
	jbsr	osd_r_videoram                        	| [$fe08: ld   a,(hl)]
	jbsr	is_background_tile_for_object_drop_CFF3	| [$fe09: call is_background_tile_for_object_drop_CFF3]
	jne	l_fe24                             	| [$fe0c: jr   nz,$FE24]

	move.w	d6,-(sp)                        	| [$fe0e: push hl]
	                   	| [$fe0f: push de]
	                        	| [$fe0f: push de]
	                      	| [$fe10: ld   de,$0020] 32
	add.w	#0x20,d6                            	| [$fe13: add  hl,de]
* read screen tile

	jbsr	osd_r_videoram                        	| [$fe14: ld   a,(hl)]
	jbsr	is_background_tile_for_object_drop_CFF3	| [$fe15: call is_background_tile_for_object_drop_CFF3]
	                        	| [$fe18: pop  de]
	movem.w	(sp)+,d6                   	| [$fe18: pop  de]
	                       	| [$fe19: pop  hl]
	jne	l_fe24                             	| [$fe1a: jr   nz,$FE24]
	move.b	#0x20,d0                        	| [$fe1c: ld   a,$20]
	exg	d0,d7                              	| [$fe1e: ex   af,af']
 	move.b	#0xE4,d0                        	| [$fe1f: ld   a,$E4]
	jbsr	draw_object_tiles_CE7C            	| [$fe21: call draw_object_tiles_CE7C]
l_fe24:
	move.l	(sp)+,a1                        	| [$fe24: pop  de]
	                    	| [$fe24: pop  de]
	move.l	(sp)+,a3                        	| [$fe25: pop  iy]

	movem.w	(sp)+,d1/d2                    	| [$fe27: pop  bc]
	addq.w	#3,a3                           	| [$fe28: inc  iy] * 3
	subq.b	#1,d1                           	| [...]
	jne	l_fdef                             	| [$fe2e: djnz $FDEF]
	                       	| [$fe30: ld   a,($FFFF)]

	* draw bombs
	move.b	player_screen_600D,d0           	| [$fe33: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$fe36: ld   b,a]
	lea	bomb_1_screen_address_630E,a3                	| [$fe37: ld   iy,bomb_1_screen_address_630E]
	move.b	(0x02,a3),d0                    	| [$fe3b: ld   a,(iy+$02)]
	cmp.b	d1,d0                            	| [$fe3e: cp   b]
	jne	l_fe63                             	| [$fe3f: jr   nz,$FE63]
	LOAD_AX_BE_WORD_DY	a3,d6
	              	| [$fe41: ld   l,(iy+$00)]
	                   	| [$fe44: ld   h,(iy+$01)]
	* jotd: protecting against zero
	tst.w	d6
	beq.b	l_fe63
	
	* get bomb background
	jbsr	osd_r_videoram                         	| [$fe47: ld   a,(hl)]
	jbsr	is_background_tile_for_object_drop_CFF3	| [$fe48: call is_background_tile_for_object_drop_CFF3]
	jne	l_fe63                             	| [$fe4b: jr   nz,$FE63]

	move.w	d6,-(sp)                        	| [$fe4d: push hl]
	movem.w	d3/d4,-(sp)                    	| [$fe4e: push de]
	                      	| [$fe4f: ld   de,$0020] 32
	add.w	#0x20,d6                            	| [$fe52: add  hl,de]
	
	jbsr	osd_r_videoram                         	| [$fe53: ld   a,(hl)]
	jbsr	is_background_tile_for_object_drop_CFF3	| [$fe54: call is_background_tile_for_object_drop_CFF3]
	movem.w	(sp)+,d3/d4                    	| [$fe57: pop  de]
	movem.w	(sp)+,d6                        	| [$fe58: pop  hl]
	jne	l_fe63                             	| [$fe59: jr   nz,$FE63]
	move.b	#0x24,d0                        	| [$fe5b: ld   a,$24]
	exg	d0,d7                              	| [$fe5d: ex   af,af']

	move.b	#0xD4,d0                        	| [$fe5e: ld   a,$D4]
	jbsr	draw_object_tiles_CE7C            	| [$fe60: call draw_object_tiles_CE7C]
l_fe63:
	move.b	#0x04,d1                        	| [$fe63: ld   b,$04]
	lea	bomb_2_screen_address_6315,a3                	| [$fe65: ld   iy,bomb_2_screen_address_6315]
	lea	bomb_1_screen_address_630E,a1                	| [$fe69: ld   de,bomb_1_screen_address_630E]
l_fe6c:
	movem.w	d1/d2,-(sp)                    	| [$fe6c: push bc]

	move.l	a3,-(sp)                        	| [$fe6d: push iy]
	move.l	a1,-(sp)                    	| [$fe6f: push de]
	jbsr	swap_3_bytes_bomb_params_dbb5                            	| [$fe70: call $DBB5]
	LOAD_AX_BE_WORD_DY	a1,d6
		| [$fe73: ld   a,(de)]
		| [$fe74: ld   l,a]
		| [$fe75: inc  de]

		| [$fe76: ld   a,(de)]
		| [$fe77: ld   h,a]
		| [$fe78: dec  de]
	move.b	player_screen_600D,d0           	| [$fe79: ld   a,(player_screen_600D)]
	move.l	(sp),a3                        	| [$fe7c: pop  iy]
											| [$fe81: push iy]
	cmp.b	(0x02,a3),d0                     	| [$fe7e: cp   (iy+$02)]
	jne		l_fea1                             	| [$fe83: jr   nz,$FEA1]

	* jotd: when a bomb is picked up, an address is zeroed
	* but game still reads from that instead of screen memory
	* just skip that (same fix as for the pickaxe)
	tst.w	d6
	jeq	l_fea1
	jbsr	osd_r_videoram                         	| [$fe85: ld   a,(hl)]
	jbsr	is_background_tile_for_object_drop_CFF3	| [$fe86: call is_background_tile_for_object_drop_CFF3]
	jne		l_fea1                             	| [$fe89: jr   nz,$FEA1]

	                        	| [$fe8b: push hl]
	movem.w	d3/d4/d6,-(sp)                    	| [$fe8c: push de]
	move.w	#0x0020,d3                      	| [$fe8d: ld   de,$0020] 32
	add.w	d3,d6                            	| [$fe90: add  hl,de]
	jbsr	osd_r_videoram                         	| [$fe91: ld   a,(hl)]
	jbsr	is_background_tile_for_object_drop_CFF3	| [$fe92: call is_background_tile_for_object_drop_CFF3]
	movem.w	(sp)+,d3/d4/d6                    	| [$fe95: pop  de]
	                        	| [$fe96: pop  hl]
	jne	l_fea1                             	| [$fe97: jr   nz,$FEA1]
	move.b	#0x24,d0                        	| [$fe99: ld   a,$24]
	exg	d0,d7                              	| [$fe9b: ex   af,af']

	move.b	#0xD4,d0                        	| [$fe9c: ld   a,$D4]
	jbsr	draw_object_tiles_CE7C            	| [$fe9e: call draw_object_tiles_CE7C]
l_fea1:
	move.l	(sp)+,a1                    	| [$fea1: pop  de]
	move.l	(sp)+,a3                        	| [$fea2: pop  iy]

	movem.w	(sp)+,d1/d2                    	| [$fea4: pop  bc]
	addq.w	#3,a3                           	| [$fea5: inc  iy] * 3
	subq.b	#1,d1                           	| [...]
	jne	l_fe6c                             	| [$feab: djnz $FE6C]
	rts                                    	| [$fead: ret]


l_feae:
	tst.b	bomb_just_dropped_6334                 	| [$feae: ld   a,(bomb_just_dropped_6334)]
	                         	| [$feb1: cp   $00]
	bne.b	0f                               	| [...]
	rts                                    	| [$feb3: ret  z] [...]
0:	
	lea	object_held_struct_659C,a2     	| [$feb4: ld   ix,object_held_struct_659C]
	lea	unknown_615A,a3                	| [$feb8: ld   iy,unknown_615A]
	move.b	player_screen_600D,current_character_screen_index_6098           	| [$febc: ld   a,(player_screen_600D)]
						| [$febf: ld   (current_character_screen_index_6098),a]
	jbsr	compute_logical_address_from_xy_EAEF	| [$fec2: call compute_logical_address_from_xy_EAEF]
	jbsr		read_rom                         	| [$fec5: ld   a,(hl)]

	move.w	d6,-(sp)                        	| [$fec6: push hl]
	LEA_ROM	       0x21E3,a0                      	| [$fec7: ld   hl,$21E3]
	move.w	#0x17,d1                        	| [$feca: ld   bc,$0017] 23
	jbsr	cpdr                              	| [$fecd: cpdr]
	movem.w	(sp)+,d6                        	| [$fecf: pop  hl]
	bne.b	0f                               	| [...]
	rts                                    	| [$fed0: ret  z] [...]
0:
	move.b	player_screen_600D,d0           	| [$fed1: ld   a,(player_screen_600D)]
	jbsr	convert_logical_to_screen_address_f2b2                            	| [$fed4: call $F2B2]
	
	move.w	d6,screen_base_screen_address_6326                 	| [$fed7: ld   (screen_base_screen_address_6326),hl]
	move.b	#0x24,d0                        	| [$feda: ld   a,$24]
	exg	d0,d7                              	| [$fedc: ex   af,af']
	move.b	#0xD4,d0                        	| [$fedd: ld   a,$D4]
	jbsr	draw_object_tiles_CE7C            	| [$fedf: call draw_object_tiles_CE7C]
	                               	| [$fee2: ld   a,$00]
	clr.b	bomb_just_dropped_6334                 	| [$fee4: ld   (bomb_just_dropped_6334),a]
	st.b	d0                                	| [$fee7: ld   a,$FF]
	move.b	d0,sprite_object_y_659F         	| [$fee9: ld   (sprite_object_y_659F),a]
	rts                                    	| [$feec: ret]



l_ff17:
	move.b	d0,(A2)                    	| [$ff17: ld   (ix+$00),a]
	move.b	#0x0C,d0                        	| [$ff1a: ld   a,$0C]
	jra	guard_move_if_fast_enough_06EE     	| [$ff1c: jp   guard_move_if_fast_enough_06EE]
	move.b	d0,(A2)                    	| [$ff1f: ld   (ix+$00),a]
	move.b	#0x0D,d0                        	| [$ff22: ld   a,$0D]
	jra	guard_move_if_fast_enough_06EE     	| [$ff24: jp   guard_move_if_fast_enough_06EE]
l_ff27:
	move.b	d0,(A2)                    	| [$ff27: ld   (ix+$00),a]
	move.b	#0x0E,d0                        	| [$ff2a: ld   a,$0E]
	jra	guard_move_if_fast_enough_06EE     	| [$ff2c: jp   guard_move_if_fast_enough_06EE]
l_ff2f:
	move.b	d0,(A2)                    	| [$ff2f: ld   (ix+$00),a]
	move.b	#0x0D,d0                        	| [$ff32: ld   a,$0D]
	jra	guard_move_if_fast_enough_06EE     	| [$ff34: jp   guard_move_if_fast_enough_06EE]

direction_table_5970:
	.byte	0x80,0x40,0x20,0x10

* same as in the game but as big endian
* maps on holds_barrow_61C7
* screen address + screen index for ???
table_1BFB:
	.byte 	0x00,0x00,0x00,0x00,0x00,0x92,0x2e,0x04
	.byte	0x00,0x00,0x00,0x00,0x92,0x1b,0x01,0x92
	.byte	0x0a,0x03,0x93,0x07,0x05,0x91,0xa3,0x02
* original table contains little endian screen addresses	
*	.byte 	0x00,0x00,0x00,0x00,0x00,0x2e,0x92,0x4
*	.byte	0x00,0x00,0x00,0x00,0x1b,0x92,0x1,0xa
*	.byte	0x92,0x3,0x7,0x93,0x5,0xa3,0x91,0x2

possible_key_locations_D1B5:
     .byte	0x00,0x00,0x00,0x91,0x23,0x01
	 .byte	0x92,0x03,0x02,0x92,0xA3,0x03
	 .byte	0x92,0x7C,0x03,0x91,0x03,0x03
	 .byte	0x90,0xF0,0x03,0x92,0xD3,0x01,0x92,0x3C,0x02 
* original table contains little endian screen addresses	
*     .byte	0x00,0x00,0x00,0x23,0x91,0x01,0x03,0x92,0x02,0xA3,0x92,0x03,0x7C
*	 .byte	0x92,0x03,0x03,0x91,0x03,0xF0,0x90,0x03,0xD3,0x92,0x01,0x3C,0x92,0x02 
